#!/bin/bash
# 
#  This utility is used to build the executable model compiler tools:
#    * mcmc
#    * docgen
#    * m2x
#    * x2m
#    * masl
#    * MASLParser.jar
#
#   build_mc [-w <working directory>] -t <osxcross target dir> -bp <BP home> -o <output directory>

BPHOME=
OUT_DIR=
WORKING_DIR=
OSXCROSS_TARGET=

# USAGE
print_usage () { 
    echo "Usage:"
    echo "        build_mc [-w <working directory>] -t <osxcross target dir> -bp <BP home> -o <output directory>"
}

# abort
abort () {
    echo "Aborting..."
    $BPHOME/tools/mc/bin/CLI.sh Launch -abort
    exit 1
}
trap abort SIGINT SIGTERM

path_convert () {
    if [[ "$1" == \/* ]]; then
        echo $1
    else
        echo "`pwd`/$1"
    fi
}

# parse arguments
DIRECTIVE=
for arg in $@; do
    if [[ $arg == "-o" || $arg == "-w" || $arg == "-t" || $arg == "-bp" ]]; then # set the directive
        DIRECTIVE=$arg
    elif [[ $DIRECTIVE == "-o" && $OUT_DIR == "" ]]; then   # only can set the output directory once
        OUT_DIR=$(path_convert $arg)
        DIRECTIVE=
    elif [[ $DIRECTIVE == "-w" ]]; then
        WORKING_DIR=$(path_convert $arg)
        DIRECTIVE=
    elif [[ $DIRECTIVE == "-t" ]]; then
        OSXCROSS_TARGET=$(path_convert $arg)
        DIRECTIVE=
    elif [[ $DIRECTIVE == "-bp" ]]; then
        BPHOME=$(path_convert $arg)
        DIRECTIVE=
    else
        print_usage
        exit 1
    fi
done

# check arguments
if [[ $OUT_DIR == "" || $OSXCROSS_TARGET == "" || $BPHOME == "" ]]; then
    print_usage
    exit 1
fi

# check working dir
if [[ $WORKING_DIR == "" ]]; then
    WORKING_DIR=`mktemp -d`
fi

echo "Setting up workspace..."

# make a temporary directory
GIT_DIR=$WORKING_DIR/git
mkdir -p $GIT_DIR
echo "GIT_DIR: $GIT_DIR"

# make a temporary workspace
export WORKSPACE=$WORKING_DIR/workspace
echo "WORKSPACE: $WORKSPACE"

# clone the mc and bridgepoint repositories
echo "Cloning the repos..."
cd $GIT_DIR
git clone https://github.com/xtuml/mc.git --depth 1
git clone https://github.com/xtuml/bridgepoint.git --depth 1

# prepare mcmc and docgen for build
echo "Preparing mcmc and docgen templates..."
cd $GIT_DIR/mc/mcmc/arlan
rm -f template_engine
if [[ `uname` == "Darwin" ]]; then
    make -f makefile.template LFLAGS=-ll
else
    make -f makefile.template
fi
mkdir -p $GIT_DIR/mc/model/escher/src/c
bash convert_templates.sh
cp -r $GIT_DIR/mc/model/document/gen/docbook_h $GIT_DIR/mc/model/docgen/src/docbook

# launch an eclipse instance
echo "Launching an Eclipse command line instance..."
$BPHOME/tools/mc/bin/CLI.sh Launch -workspacePreferences "bridgepoint_prefs_allow_operations_in_where=true"

# import the projects
echo "Importing projects..."
$BPHOME/tools/mc/bin/CLI.sh Import -project $GIT_DIR/bridgepoint/src/org.xtuml.bp.ui.marking/
$BPHOME/tools/mc/bin/CLI.sh Import -project $GIT_DIR/mc/model/mcooa/
$BPHOME/tools/mc/bin/CLI.sh Import -project $GIT_DIR/mc/model/mcshared/
$BPHOME/tools/mc/bin/CLI.sh Import -project $GIT_DIR/mc/model/document/
$BPHOME/tools/mc/bin/CLI.sh Import -project $GIT_DIR/mc/model/docgen/
$BPHOME/tools/mc/bin/CLI.sh Import -project $GIT_DIR/mc/model/escher/
$BPHOME/tools/mc/bin/CLI.sh Import -project $GIT_DIR/mc/model/masl/
$BPHOME/tools/mc/bin/CLI.sh Import -project $GIT_DIR/mc/model/maslin/
$BPHOME/tools/mc/bin/CLI.sh Import -project $GIT_DIR/mc/model/maslout/

# build the projects
echo "Building projects..."
$BPHOME/tools/mc/bin/CLI.sh Build -project docgen
#$BPHOME/tools/mc/bin/CLI.sh Build -project escher
$BPHOME/tools/mc/bin/CLI.sh Build -project masl
$BPHOME/tools/mc/bin/CLI.sh Build -project maslin
$BPHOME/tools/mc/bin/CLI.sh Build -project maslout

# shutdown eclipse instance
$BPHOME/tools/mc/bin/CLI.sh Launch -exit

# archive the source
echo "Archiving the source..."
cd $WORKSPACE
mkdir src
cp -r $WORKSPACE/docgen/src src/docgen-src
#cp -r $WORKSPACE/escher/src src/mcmc-src
cp -r $WORKSPACE/masl/src src/masl-src
cp -r $WORKSPACE/maslin/src src/maslin-src
cp -r $WORKSPACE/maslout/src src/maslout-src
zip -qr mcsrc.zip src/

# build the MASL parser
echo "Building the MASL parser..."
cd $GIT_DIR/mc/masl/parser
wget -O lib/antlr-3.5.2-complete.jar http://www.antlr3.org/download/antlr-3.5.2-complete.jar
ant dist

# make the output directory
mkdir $OUT_DIR

# copy the archived source
cp $WORKSPACE/mcsrc.zip $OUT_DIR

# copy the MASL parser
cp $GIT_DIR/mc/masl/parser/dist/lib/*.jar $OUT_DIR

# do not compile on Mac
if [[ `uname` == "Darwin" ]]; then echo "Done."; exit; fi

# compile the projects
echo "Compiling projects..."

export PATH=$PATH:$OSXCROSS_TARGET/bin

cd $WORKSPACE/docgen/src
make -f makefile.docgen EXECUTABLE=docgen.linux.64; rm -f *.o
make -f makefile.docgen EXECUTABLE=docgen.mac.64 CC=o64-clang; rm -f *.o
make -f makefile.docgen EXECUTABLE=docgen.win.32 CC=i686-w64-mingw32-gcc CFLAGS="-Wno-pointer-to-int-cast -static"; rm -f *.o
make -f makefile.docgen EXECUTABLE=docgen.win.64 CC=x86_64-w64-mingw32-gcc CFLAGS="-Wno-pointer-to-int-cast -static"

#cd $WORKSPACE/escher/src
#make -f makefile.mcmc EXECUTABLE=mcmc.linux.64; rm -f *.o
#make -f makefile.mcmc EXECUTABLE=mcmc.mac.64 CC=o64-clang LFLAGS=-L$OSXCROSS_TARGET/SDK/*/usr/lib -ll

cd $WORKSPACE/masl/src
make -f makefile.masl EXECUTABLE=masl.linux.64; rm -f *.o
make -f makefile.masl EXECUTABLE=masl.mac.64 CC=o64-clang; rm -f *.o
make -f makefile.masl EXECUTABLE=masl.win.32 CC=i686-w64-mingw32-gcc CFLAGS="-Wno-pointer-to-int-cast -static -DWIN"; rm -f *.o
make -f makefile.masl EXECUTABLE=masl.win.64 CC=x86_64-w64-mingw32-gcc CFLAGS="-Wno-pointer-to-int-cast -static -DWIN"

cd $WORKSPACE/maslin/src
make -f makefile.maslin EXECUTABLE=m2x.linux.64; rm -f *.o
make -f makefile.maslin EXECUTABLE=m2x.mac.64 CC=o64-clang; rm -f *.o
make -f makefile.maslin EXECUTABLE=m2x.win.32 CC=i686-w64-mingw32-gcc CFLAGS="-Wno-pointer-to-int-cast -static -DWIN"; rm -f *.o
make -f makefile.maslin EXECUTABLE=m2x.win.64 CC=x86_64-w64-mingw32-gcc CFLAGS="-Wno-pointer-to-int-cast -static -DWIN"

cd $WORKSPACE/maslout/src
make -f makefile.maslout EXECUTABLE=x2m.linux.64; rm -f *.o
make -f makefile.maslout EXECUTABLE=x2m.mac.64 CC=o64-clang; rm -f *.o
make -f makefile.maslout EXECUTABLE=x2m.win.32 CC=i686-w64-mingw32-gcc CFLAGS="-Wno-pointer-to-int-cast -static -DWIN"; rm -f *.o
make -f makefile.maslout EXECUTABLE=x2m.win.64 CC=x86_64-w64-mingw32-gcc CFLAGS="-Wno-pointer-to-int-cast -static -DWIN"

# copy the executables
cp $WORKSPACE/docgen/src/docgen.*.* $OUT_DIR
#cp $WORKSPACE/escher/src/mcmc.*.* $OUT_DIR
cp $WORKSPACE/masl/src/masl.*.* $OUT_DIR
cp $WORKSPACE/maslin/src/m2x.*.* $OUT_DIR
cp $WORKSPACE/maslout/src/x2m.*.* $OUT_DIR

echo "Done."

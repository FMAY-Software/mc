-- BP 7.1.6 content: Package syschar: 3 persistence-version: 7.1.6

INSERT INTO EP_PKG
	VALUES ("bbe52a2c-4f20-49fc-ad27-ff468feeb360",
	"e1ca632b-b51d-48ee-b1a8-9539fcd49828",
	"e1ca632b-b51d-48ee-b1a8-9539fcd49828",
	'load',
	'',
	0);
INSERT INTO GD_MD
	VALUES ("f39acde9-85ee-41a8-ae14-65ebbf7777fb",
	112,
	"bbe52a2c-4f20-49fc-ad27-ff468feeb360",
	108,
	0,
	0,
	1,
	1,
	1,
	12,
	1,
	0,
	0,
	200,
	150,
	0,
	'',
	'stratus::load');
INSERT INTO GD_GE
	VALUES ("f99a2201-7344-4e89-9518-4fba7569072e",
	"f39acde9-85ee-41a8-ae14-65ebbf7777fb",
	"14652593-b1d1-49fa-bb66-a363fa3df43e",
	108,
	0,
	'stratus::load::selectors');
INSERT INTO GD_SHP
	VALUES ("f99a2201-7344-4e89-9518-4fba7569072e");
INSERT INTO GD_NCS
	VALUES ("f99a2201-7344-4e89-9518-4fba7569072e");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"f99a2201-7344-4e89-9518-4fba7569072e");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"f99a2201-7344-4e89-9518-4fba7569072e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f99a2201-7344-4e89-9518-4fba7569072e",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_DIA
	VALUES ("f39acde9-85ee-41a8-ae14-65ebbf7777fb",
	'',
	1.000000,
	0.000000,
	0.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_SYNC
	VALUES ("e375434c-b908-43e7-bba5-8f9f2a2a6fe6",
	"00000000-0000-0000-0000-000000000000",
	'BuiltinType_populate',
	'',
	'create object instance type_definition of TypeDefinition;
create object instance basic_type of BasicType;
create object instance builtin_type of BuiltinType;
builtin_type.name = "instance";
create object instance any_instance_type of AnyInstanceType;
relate type_definition to basic_type across R6236;
relate basic_type to builtin_type across R6205;
relate builtin_type to any_instance_type across R6206;

create object instance type_definition of TypeDefinition;
create object instance basic_type of BasicType;
create object instance builtin_type of BuiltinType;
builtin_type.name = "boolean";
create object instance boolean_type of BooleanType;
relate type_definition to basic_type across R6236;
relate basic_type to builtin_type across R6205;
relate builtin_type to boolean_type across R6206;

create object instance type_definition of TypeDefinition;
create object instance basic_type of BasicType;
create object instance builtin_type of BuiltinType;
builtin_type.name = "character";
create object instance character_type of CharacterType;
relate type_definition to basic_type across R6236;
relate basic_type to builtin_type across R6205;
relate builtin_type to character_type across R6206;

create object instance type_definition of TypeDefinition;
create object instance basic_type of BasicType;
create object instance builtin_type of BuiltinType;
builtin_type.name = "device";
create object instance device_type of DeviceType;
relate type_definition to basic_type across R6236;
relate basic_type to builtin_type across R6205;
relate builtin_type to device_type across R6206;

create object instance type_definition of TypeDefinition;
create object instance basic_type of BasicType;
create object instance builtin_type of BuiltinType;
builtin_type.name = "duration";
create object instance duration_type of DurationType;
relate type_definition to basic_type across R6236;
relate basic_type to builtin_type across R6205;
relate builtin_type to duration_type across R6206;

create object instance type_definition of TypeDefinition;
create object instance basic_type of BasicType;
create object instance builtin_type of BuiltinType;
builtin_type.name = "event";
create object instance event_type of EventType;
relate type_definition to basic_type across R6236;
relate basic_type to builtin_type across R6205;
relate builtin_type to event_type across R6206;

create object instance type_definition of TypeDefinition;
create object instance basic_type of BasicType;
create object instance builtin_type of BuiltinType;
builtin_type.name = "string";
create object instance string_type of StringType;
relate type_definition to basic_type across R6236;
relate basic_type to builtin_type across R6205;
relate builtin_type to string_type across R6206;

create object instance type_definition of TypeDefinition;
create object instance basic_type of BasicType;
create object instance builtin_type of BuiltinType;
builtin_type.name = "timer";
create object instance timer_type of TimerType;
relate type_definition to basic_type across R6236;
relate basic_type to builtin_type across R6205;
relate builtin_type to timer_type across R6206;

create object instance type_definition of TypeDefinition;
create object instance basic_type of BasicType;
create object instance builtin_type of BuiltinType;
builtin_type.name = "timestamp";
create object instance timestamp_type of TimestampType;
relate type_definition to basic_type across R6236;
relate basic_type to builtin_type across R6205;
relate builtin_type to timestamp_type across R6206;

create object instance type_definition of TypeDefinition;
create object instance basic_type of BasicType;
create object instance builtin_type of BuiltinType;
builtin_type.name = "wcharacter";
create object instance wcharacter_type of WCharacterType;
relate type_definition to basic_type across R6236;
relate basic_type to builtin_type across R6205;
relate builtin_type to wcharacter_type across R6206;

create object instance type_definition of TypeDefinition;
create object instance basic_type of BasicType;
create object instance builtin_type of BuiltinType;
builtin_type.name = "wstring";
create object instance wstring_type of WStringType;
relate type_definition to basic_type across R6236;
relate basic_type to builtin_type across R6205;
relate builtin_type to wstring_type across R6206;

create object instance type_definition of TypeDefinition;
create object instance basic_type of BasicType;
create object instance builtin_type of BuiltinType;
builtin_type.name = "real";
create object instance numeric_type of NumericType;
numeric_type.bits = 64;
numeric_type.signed = true;
// create and link to min and max expressions
create object instance expression of Expression2;
create object instance literal_expression of LiteralExpression;
create object instance numeric_literal of NumericLiteral;
create object instance integer_literal of IntegerLiteral;
integer_literal.value = 2147483647; // 2 ^ 63 - 1 TODO
relate expression to literal_expression across R5517;
relate literal_expression to numeric_literal across R5700;
relate numeric_literal to integer_literal across R5703;
relate expression to numeric_type across R6222;
create object instance expression of Expression2;
create object instance literal_expression of LiteralExpression;
create object instance numeric_literal of NumericLiteral;
create object instance integer_literal of IntegerLiteral;
integer_literal.value = -2147483647; // 2 ^ 63 - 1 TODO
relate expression to literal_expression across R5517;
relate literal_expression to numeric_literal across R5700;
relate numeric_literal to integer_literal across R5703;
relate expression to numeric_type across R6223;
create object instance real_type of RealType;
relate type_definition to basic_type across R6236;
relate basic_type to builtin_type across R6205;
relate builtin_type to numeric_type across R6206;
relate numeric_type to real_type across R6221;

create object instance type_definition of TypeDefinition;
create object instance basic_type of BasicType;
create object instance builtin_type of BuiltinType;
builtin_type.name = "long_integer";
create object instance numeric_type of NumericType;
numeric_type.bits = 64;
numeric_type.signed = true;
// create and link to min and max expressions
create object instance expression of Expression2;
create object instance literal_expression of LiteralExpression;
create object instance numeric_literal of NumericLiteral;
create object instance integer_literal of IntegerLiteral;
integer_literal.value = 2147483647; // 2 ^ 63 - 1 TODO
relate expression to literal_expression across R5517;
relate literal_expression to numeric_literal across R5700;
relate numeric_literal to integer_literal across R5703;
relate expression to numeric_type across R6222;
create object instance expression of Expression2;
create object instance literal_expression of LiteralExpression;
create object instance numeric_literal of NumericLiteral;
create object instance integer_literal of IntegerLiteral;
integer_literal.value = -2147483647; // 2 ^ 63 - 1 TODO
relate expression to literal_expression across R5517;
relate literal_expression to numeric_literal across R5700;
relate numeric_literal to integer_literal across R5703;
relate expression to numeric_type across R6223;
create object instance integer_type of IntegerType;
relate type_definition to basic_type across R6236;
relate basic_type to builtin_type across R6205;
relate builtin_type to numeric_type across R6206;
relate numeric_type to integer_type across R6221;

create object instance type_definition of TypeDefinition;
create object instance basic_type of BasicType;
create object instance builtin_type of BuiltinType;
builtin_type.name = "byte";
create object instance numeric_type of NumericType;
numeric_type.bits = 8;
numeric_type.signed = false;
// create and link to min and max expressions
create object instance expression of Expression2;
create object instance literal_expression of LiteralExpression;
create object instance numeric_literal of NumericLiteral;
create object instance integer_literal of IntegerLiteral;
integer_literal.value = 255; // 2 ^ 8 - 1 TODO
relate expression to literal_expression across R5517;
relate literal_expression to numeric_literal across R5700;
relate numeric_literal to integer_literal across R5703;
relate expression to numeric_type across R6222;
create object instance expression of Expression2;
create object instance literal_expression of LiteralExpression;
create object instance numeric_literal of NumericLiteral;
create object instance integer_literal of IntegerLiteral;
integer_literal.value = 0;
relate expression to literal_expression across R5517;
relate literal_expression to numeric_literal across R5700;
relate numeric_literal to integer_literal across R5703;
relate expression to numeric_type across R6223;
create object instance byte_type of ByteType;
relate type_definition to basic_type across R6236;
relate basic_type to builtin_type across R6205;
relate builtin_type to numeric_type across R6206;
relate numeric_type to byte_type across R6221;

create object instance type_definition of TypeDefinition;
create object instance basic_type of BasicType;
create object instance builtin_type of BuiltinType;
builtin_type.name = "integer";
create object instance numeric_type of NumericType;
numeric_type.bits = 32;
numeric_type.signed = false;
// create and link to min and max expressions
create object instance expression of Expression2;
create object instance literal_expression of LiteralExpression;
create object instance numeric_literal of NumericLiteral;
create object instance integer_literal of IntegerLiteral;
integer_literal.value = 2147483647; // 2 ^ 31 - 1 TODO
relate expression to literal_expression across R5517;
relate literal_expression to numeric_literal across R5700;
relate numeric_literal to integer_literal across R5703;
relate expression to numeric_type across R6222;
create object instance expression of Expression2;
create object instance literal_expression of LiteralExpression;
create object instance numeric_literal of NumericLiteral;
create object instance integer_literal of IntegerLiteral;
integer_literal.value = -2147483647; // - 2 ^ 31 - 1 TODO
relate expression to literal_expression across R5517;
relate literal_expression to numeric_literal across R5700;
relate numeric_literal to integer_literal across R5703;
relate expression to numeric_type across R6223;
create object instance small_type of SmallIntegerType;
relate type_definition to basic_type across R6236;
relate basic_type to builtin_type across R6205;
relate builtin_type to numeric_type across R6206;
relate numeric_type to small_type across R6221;

/* Comment out the logging if not desired.
 */
select many builtin_types from instances of BuiltinType where ( SORT::ascending( attr:"name" ) );
message = "builtin types:  ";
for each builtin_type in builtin_types
  message = message + builtin_type.name + " ";
end for;
LOG::LogInfo( message:message );',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO PE_PE
	VALUES ("e375434c-b908-43e7-bba5-8f9f2a2a6fe6",
	1,
	"bbe52a2c-4f20-49fc-ad27-ff468feeb360",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("552a529e-ffe4-4468-9aa5-4bb8eb46d605",
	"00000000-0000-0000-0000-000000000000",
	'resolve_name',
	'',
	'/*
AttributeDeclaration
EventDeclaration
EnumeratorItem
*/ 
expression = param.expression;
code_block = param.code_block;
message = ""; d = ""; n = ""; s = ""; // string UDTs
d = param.domainname; n = param.name;
message = "resolve_name( " + param.trace + ", " + d + "::" + n + ", ";
if ( not_empty code_block )
  select one service related by code_block->Service[R5403];
  if ( empty service )
    select one state related by code_block->State2[R6115];
    if ( empty state )
      LOG::LogFailure( message:"empty service and state" );
    else
      s = state.name;
    end if;
  else
    s = service.name;
  end if;
  message = message + "true(" + s + ")";
else
  message = message + "false";
end if;
message = message + " ) - ";
LOG::LogInfo( message: message + "starting..." );
// TODO not sure I need this
select any basic_type from instances of BasicType where ( false );

// charactistics
if ( "elements" == n ) // UDT strings
  select one basic_type related by expression->BasicType[R5570];
  select one instance_type related by basic_type->InstanceType[R6205];
  if ( not_empty instance_type )
    LOG::LogInfo( message: message + "elements instance type" );
    return basic_type;
  end if;
  select one collection_type related by basic_type->CollectionType[R6205];
  if ( not_empty collection_type )
    LOG::LogInfo( message: message + "elements collection type" );
    return basic_type;
  else
    LOG::LogFailure( message: message + "was not a collection type" );
  end if;
elif ( "first" == n ) // UDT strings
elif ( "last" == n ) // UDT strings
else
end if;

// variable
if ( not_empty code_block )
  select any variable_definition related by code_block->VariableDefinition[R5151] where ( selected.name == param.name );
  if ( not_empty variable_definition )
    create object instance variable_name_expression of VariableNameExpression;
    relate expression to variable_name_expression across R5517;
    select one basic_type related by variable_definition->BasicType[R5137];
    relate variable_name_expression to variable_definition across R5562;
    LOG::LogInfo( message: message + "variable." );
    return basic_type;
  end if;
end if;

// parameter
if ( not_empty code_block )
  select one parameter_definition related by code_block->Service[R5403]->ParameterDefinition[R5204];
  while ( not_empty parameter_definition )
    if ( parameter_definition.name == param.name )
      create object instance parameter_name_expression of ParameterNameExpression;
      relate expression to parameter_name_expression across R5517;
      relate parameter_name_expression to parameter_definition across R5536;
      select one basic_type related by parameter_definition->BasicType[R5200];
      LOG::LogInfo( message: message + "parameter." );
      return basic_type;
    end if;
    select one parameter_definition related by parameter_definition->ParameterDefinition[R5208.''precedes''];
  end while;
end if;

// type
select any builtin_type from instances of BuiltinType where ( selected.name == param.name );
if ( not_empty builtin_type )
  select one basic_type related by builtin_type->BasicType[R6205];
  LOG::LogInfo( message: message + "builtin type." );
  return basic_type;
else
  select any domain from instances of Domain where ( selected.name == param.domainname );
  select any user_defined_type from instances of UserDefinedType2 where ( selected.name == param.name );
  if ( not_empty domain )
    select any user_defined_type related by domain->UserDefinedType2[R6235] where ( selected.name == param.name );
  end if;
  if ( not_empty user_defined_type )
    select one basic_type related by user_defined_type->BasicType[R6205];
    LOG::LogInfo( message: message + "user type." );
    return basic_type;
  end if;
end if;

// service
// TODO full signature
select any service from instances of Service where ( selected.name == param.name );
if ( not_empty service )
  select any service_overload related by service->ServiceOverload[R5207];
  create object instance service_expression of ServiceExpression;
  relate expression to service_expression across R5517;
  //relate service_expression to service_overload across R5545;
  select one basic_type related by service->BasicType[R5205];
  LOG::LogInfo( message: message + "service." );
  return basic_type;
end if;

// object
select any object_declaration from instances of ObjectDeclaration where ( selected.name == param.name );
if ( not_empty object_declaration )
  create object instance object_name_expression of ObjectNameExpression;
  relate expression to object_name_expression across R5517;
  relate object_name_expression to object_declaration across R5533;
  // TODO - may need to know that we need a set
  basic_type = ::select_create_InstanceType( object_declaration: object_declaration, isset: false );
  if ( empty basic_type )
    LOG::LogFailure( message: message + "before object... basic_type is empty" );
  end if;
  LOG::LogInfo( message: message + "object." );
  return basic_type;
end if;

// terminator
select any domain_terminator from instances of DomainTerminator where ( selected.name == param.name );
if ( not_empty domain_terminator )
  create object instance terminator_name_expression of TerminatorNameExpression;
  relate expression to terminator_name_expression across R5517;
  relate terminator_name_expression to domain_terminator across R5555;
  t = param.name; // string UDTs
  t = "terminator";
  select any internal_type from instances of InternalType where ( selected.name == t );
  select one basic_type related by internal_type->BasicType[R6205];
  LOG::LogInfo( message: message + "terminator." );
  return basic_type;
end if;

// attribute
// TODO I think this will be moved/duplicated in a routine used to resolve DotExpression.
select any attribute_declaration from instances of AttributeDeclaration where ( selected.name == param.name );
if ( not_empty attribute_declaration )
  create object instance selected_attribute_expression of SelectedAttributeExpression;
  relate expression to selected_attribute_expression across R5517;
  relate selected_attribute_expression to attribute_declaration across R5541;
  select one basic_type related by attribute_declaration->BasicType[R5803];
  LOG::LogInfo( message: message + "attribute." );
  return basic_type;
end if;

// enumerator
select any enumerate_item from instances of EnumerateItem where ( selected.name == param.name );
if ( not_empty enumerate_item )
  create object instance literal_expression of LiteralExpression;
  create object instance enumerate_literal of EnumerateLiteral;
  relate enumerate_literal to literal_expression across R5700;
  relate enumerate_literal to enumerate_item across R5701;
  relate expression to literal_expression across R5517;
  select any basic_type related by enumerate_item->EnumerateType[R6218]->FullTypeDefinition[R6219]->TypeDefinition[R6236]->TypeDeclaration[R6234]->UserDefinedType2[R6241]->BasicType[R6205];
  LOG::LogInfo( message: message + "enumerator." );
  return basic_type;
end if;

return basic_type;',
	"f2470f88-fc4a-406d-ba1c-54179e448ed4",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("8ea44194-5b7b-4140-8a45-f01703a03b3d",
	"552a529e-ffe4-4468-9aa5-4bb8eb46d605",
	'name',
	"18a1a0a5-c53e-4a43-a5bc-f75ee1a2abe2",
	0,
	'',
	"b6f387a9-e605-43c1-87cc-03df20613496",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("18a1a0a5-c53e-4a43-a5bc-f75ee1a2abe2",
	"00000000-0000-0000-0000-000000000000",
	'Name',
	'',
	'',
	'../../../../ooamasl/models/ooamasl/ooamasl/Shared/Shared.xtuml');
INSERT INTO S_SPARM
	VALUES ("289ee47a-f37e-4544-892d-cec5b9d258b2",
	"552a529e-ffe4-4468-9aa5-4bb8eb46d605",
	'expression',
	"0f86953a-c0a1-4f83-b7e4-af32c53c2d6d",
	0,
	'',
	"cb392c75-f171-4224-ac58-1b83de495b03",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("0f86953a-c0a1-4f83-b7e4-af32c53c2d6d",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Expression>',
	'',
	'',
	'../../../../ooamasl/models/ooamasl/ooamasl/expression/expression.xtuml');
INSERT INTO S_SPARM
	VALUES ("b6f387a9-e605-43c1-87cc-03df20613496",
	"552a529e-ffe4-4468-9aa5-4bb8eb46d605",
	'domainname',
	"18a1a0a5-c53e-4a43-a5bc-f75ee1a2abe2",
	0,
	'',
	"289ee47a-f37e-4544-892d-cec5b9d258b2",
	'');
INSERT INTO S_SPARM
	VALUES ("cb392c75-f171-4224-ac58-1b83de495b03",
	"552a529e-ffe4-4468-9aa5-4bb8eb46d605",
	'code_block',
	"a76746ea-c05f-42fd-bfbf-00a70b069bb6",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("a76746ea-c05f-42fd-bfbf-00a70b069bb6",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<CodeBlock>',
	'',
	'',
	'../../../../ooamasl/models/ooamasl/ooamasl/statement/statement.xtuml');
INSERT INTO S_SPARM
	VALUES ("cecbf047-60d8-488e-bb85-91866b61c65b",
	"552a529e-ffe4-4468-9aa5-4bb8eb46d605",
	'trace',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"8ea44194-5b7b-4140-8a45-f01703a03b3d",
	'');
INSERT INTO PE_PE
	VALUES ("552a529e-ffe4-4468-9aa5-4bb8eb46d605",
	1,
	"bbe52a2c-4f20-49fc-ad27-ff468feeb360",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_DT_PROXY
	VALUES ("f2470f88-fc4a-406d-ba1c-54179e448ed4",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<BasicType>',
	'',
	'',
	'../../../../ooamasl/models/ooamasl/ooamasl/type/type.xtuml');
INSERT INTO S_SYNC
	VALUES ("01372ac6-690a-4750-8939-6d5cb799ed21",
	"00000000-0000-0000-0000-000000000000",
	'create_RelationshipSpecification',
	'',
	'relationship_declaration = param.relationship_declaration;
from_object_declaration = param.from_object_declaration;
object_or_role = from_object_declaration.name; // UDT strings
object_or_role = param.object_or_role;
object_or_role_string = param.object_or_role; // UDT strings
to_object_declaration = param.to_object_declaration;

// Create the RelationshipSpecification.
// Link it to the RelationshipDeclaration.
// Link it to the from-side and to-side ObjectDeclarations.
// Populate the role phrase?  CDS
create object instance relationship_specification of RelationshipSpecification;
relate relationship_specification to relationship_declaration across R6015;
relate relationship_specification to from_object_declaration across R6014;

// Resolve with from and to object when available.
if ( not_empty to_object_declaration )
  LOG::LogInfo( message:"create_RelationshipSpec " + from_object_declaration.name + " " + object_or_role_string + " " + to_object_declaration.name +" directly" );
  relate relationship_specification to to_object_declaration across R6011;
  return relationship_specification;
end if;

// Resolve with only relationship and from object when possible.
// 1) Look across normal normal non-reflexive binary.
// 2) Look for subtype.

// normal binary non-reflexive
select one object_declaration related by relationship_declaration->NormalRelationshipDeclaration[R6010]->HalfRelationship[R6007]->ObjectDeclaration[R6006];
if ( not_empty object_declaration )
  if ( from_object_declaration.name != object_declaration.name )
    LOG::LogInfo( message: "normal ltr from " + from_object_declaration.name + "->" + object_declaration.name );
    relate relationship_specification to object_declaration across R6011;
    return relationship_specification;
  end if;
end if;
select one object_declaration related by relationship_declaration->NormalRelationshipDeclaration[R6010]->HalfRelationship[R6007]->ObjectDeclaration[R6004];
if ( not_empty object_declaration )
  if ( from_object_declaration.name != object_declaration.name )
    LOG::LogInfo( message: "normal ltr to " + from_object_declaration.name + "->" + object_declaration.name );
    relate relationship_specification to object_declaration across R6011;
    return relationship_specification;
  end if;
end if;
// supertype
select one object_declaration related by relationship_declaration->SubtypeRelationshipDeclaration[R6010]->ObjectDeclaration[R6017];
if ( not_empty object_declaration )
  LOG::LogInfo( message: "sub-super supertype " + from_object_declaration.name + "->" + object_declaration.name );
  relate relationship_specification to object_declaration across R6011;
  return relationship_specification;
end if;
// associative
// TODO - handle navigation to associator
if ( param.allow_assoc )
  select one object_declaration related by relationship_declaration->AssociativeRelationshipDeclaration[R6010]->ObjectDeclaration[R6001]
    where ( ( selected.name == object_or_role ) and ( selected.name != from_object_declaration.name ) );
  if ( not_empty object_declaration )
    LOG::LogInfo( message: "6001 associative " + from_object_declaration.name + "->" + object_declaration.name );
    relate relationship_specification to object_declaration across R6011;
    return relationship_specification;
  end if;
end if;
if ( not param.force_assoc )
  select one object_declaration related by relationship_declaration->AssociativeRelationshipDeclaration[R6010]->HalfRelationship[R6000]->ObjectDeclaration[R6004] where ( selected.name != from_object_declaration.name );
  if ( not_empty object_declaration )
    LOG::LogInfo( message: "6000 6004 associative " + from_object_declaration.name + "->" + object_declaration.name );
    relate relationship_specification to object_declaration across R6011;
    return relationship_specification;
  end if;
  select one object_declaration related by relationship_declaration->AssociativeRelationshipDeclaration[R6010]->HalfRelationship[R6000]->ObjectDeclaration[R6006] where ( selected.name != from_object_declaration.name );
  if ( not_empty object_declaration )
    LOG::LogInfo( message: "6000 6006 associative " + from_object_declaration.name + "->" + object_declaration.name );
    relate relationship_specification to object_declaration across R6011;
    return relationship_specification;
  end if;
  select one object_declaration related by relationship_declaration->AssociativeRelationshipDeclaration[R6010]->HalfRelationship[R6002]->ObjectDeclaration[R6004] where ( selected.name != from_object_declaration.name );
  if ( not_empty object_declaration )
    LOG::LogInfo( message: "6002 6004 associative " + from_object_declaration.name + "->" + object_declaration.name );
    relate relationship_specification to object_declaration across R6011;
    return relationship_specification;
  end if;
  select one object_declaration related by relationship_declaration->AssociativeRelationshipDeclaration[R6010]->HalfRelationship[R6002]->ObjectDeclaration[R6006] where ( selected.name != from_object_declaration.name );
  if ( not_empty object_declaration )
    LOG::LogInfo( message: "6002 6006 associative " + from_object_declaration.name + "->" + object_declaration.name );
    relate relationship_specification to object_declaration across R6011;
    return relationship_specification;
  end if;
end if;

if ( "" != object_or_role_string )

  // Use the object_or_role as an object name.
  select any object_declaration from instances of ObjectDeclaration where ( selected.name == object_or_role );
  //on = "";
  //select many object_declarations from instances of ObjectDeclaration;
  //for each object_declaration in object_declarations;
  //on = object_declaration.name;
	//if ( on == object_or_role )
	if ( not_empty object_declaration )
		LOG::LogInfo( message: "object_or_role as object " + from_object_declaration.name + "->" + object_declaration.name );
		relate relationship_specification to object_declaration across R6011;
		return relationship_specification;
	end if;
	//end for;

  // Use the object_or_role as a role phrase.
  select many half_relationships related by from_object_declaration->HalfRelationship[R6006] where ( selected.role == object_or_role_string );
  select any object_declaration related by half_relationships->ObjectDeclaration[R6004];
	if ( not_empty object_declaration )
		LOG::LogInfo( message: "object_or_role as role " + from_object_declaration.name + "->" + object_declaration.name );
		relate relationship_specification to object_declaration across R6011;
		return relationship_specification;
	end if;

end if;

// CDS choose one to avoid exceptions for now...
select any to_object_declaration from instances of ObjectDeclaration;
LOG::LogInfo( message: "TODO CDS defaulting to bogus lookup !!!!!! " + from_object_declaration.name + "->" + to_object_declaration.name );
relate relationship_specification to to_object_declaration across R6011;
return relationship_specification;

/*
select one object_declaration related by relationship_declaration->AssociativeRelationshipDeclaration[R6010]->ObjectDeclaration[R6001];
if ( not_empty object_declaration )
  LOG::LogInfo( message: "assoc using from " + from_object_declaration.name + "->" + object_declaration.name );
  relate relationship_specification to object_declaration across R6011;
  return relationship_specification;
end if;
select one object_declaration related by relationship_declaration->AssociativeRelationshipDeclaration[R6010]->HalfRelationship[R6000]->ObjectDeclaration[R6006];
if ( not_empty object_declaration )
  LOG::LogInfo( message: "assoc ltr from " + from_object_declaration.name + "->" + object_declaration.name );
  relate relationship_specification to object_declaration across R6011;
  return relationship_specification;
end if;
select one object_declaration related by relationship_declaration->AssociativeRelationshipDeclaration[R6010]->HalfRelationship[R6002]->ObjectDeclaration[R6006];
if ( not_empty object_declaration )
  LOG::LogInfo( message: "assoc rtl from " + from_object_declaration.name + "->" + object_declaration.name );
  relate relationship_specification to object_declaration across R6011;
  return relationship_specification;
end if;

return relationship_specification;
*/',
	"47e32455-be33-4b7c-9e44-d3b8f4f9ad39",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("60186075-466e-4b90-b067-3254733bcda5",
	"01372ac6-690a-4750-8939-6d5cb799ed21",
	'from_object_declaration',
	"ccbbc697-c60c-4034-8e31-7a46032151eb",
	0,
	'',
	"85a0d2ce-cbb7-42fb-83b0-3838e6249a30",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("ccbbc697-c60c-4034-8e31-7a46032151eb",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<ObjectDeclaration>',
	'',
	'',
	'../../../../ooamasl/models/ooamasl/ooamasl/object/object.xtuml');
INSERT INTO S_SPARM
	VALUES ("85a0d2ce-cbb7-42fb-83b0-3838e6249a30",
	"01372ac6-690a-4750-8939-6d5cb799ed21",
	'relationship_declaration',
	"fc9b3839-3ca6-48c8-b09a-c036f8335a12",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("fc9b3839-3ca6-48c8-b09a-c036f8335a12",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<RelationshipDeclaration>',
	'',
	'',
	'../../../../ooamasl/models/ooamasl/ooamasl/relationship/relationship.xtuml');
INSERT INTO S_SPARM
	VALUES ("125eeff7-c6ff-44fc-9fc9-954283c93429",
	"01372ac6-690a-4750-8939-6d5cb799ed21",
	'object_or_role',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"60186075-466e-4b90-b067-3254733bcda5",
	'');
INSERT INTO S_SPARM
	VALUES ("707be580-6716-4c90-b28e-1632b91ff204",
	"01372ac6-690a-4750-8939-6d5cb799ed21",
	'to_object_declaration',
	"ccbbc697-c60c-4034-8e31-7a46032151eb",
	0,
	'',
	"125eeff7-c6ff-44fc-9fc9-954283c93429",
	'');
INSERT INTO S_SPARM
	VALUES ("12a1eec9-bf2b-4b7c-a71c-e712c055edc3",
	"01372ac6-690a-4750-8939-6d5cb799ed21",
	'allow_assoc',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"707be580-6716-4c90-b28e-1632b91ff204",
	'');
INSERT INTO S_SPARM
	VALUES ("700cc2be-dbba-41f0-b338-2ae085af58d6",
	"01372ac6-690a-4750-8939-6d5cb799ed21",
	'force_assoc',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"12a1eec9-bf2b-4b7c-a71c-e712c055edc3",
	'');
INSERT INTO PE_PE
	VALUES ("01372ac6-690a-4750-8939-6d5cb799ed21",
	1,
	"bbe52a2c-4f20-49fc-ad27-ff468feeb360",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_DT_PROXY
	VALUES ("47e32455-be33-4b7c-9e44-d3b8f4f9ad39",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<RelationshipSpecification>',
	'',
	'',
	'../../../../ooamasl/models/ooamasl/ooamasl/relationship/relationship.xtuml');
INSERT INTO S_SYNC
	VALUES ("a863d51e-ea32-4372-a270-6699010060e9",
	"00000000-0000-0000-0000-000000000000",
	'InternalType_populate',
	'',
	'create object instance type_definition of TypeDefinition;
create object instance basic_type of BasicType;
basic_type.isanonymous = true;
create object instance internal_type of InternalType;
internal_type.name = "characteristic";
relate type_definition to basic_type across R6236;
relate basic_type to internal_type across R6205;

create object instance type_definition of TypeDefinition;
create object instance basic_type of BasicType;
basic_type.isanonymous = true;
create object instance internal_type of InternalType;
internal_type.name = "enum";
relate type_definition to basic_type across R6236;
relate basic_type to internal_type across R6205;

create object instance type_definition of TypeDefinition;
create object instance basic_type of BasicType;
basic_type.isanonymous = true;
create object instance internal_type of InternalType;
internal_type.name = "object";
relate type_definition to basic_type across R6236;
relate basic_type to internal_type across R6205;

create object instance type_definition of TypeDefinition;
create object instance basic_type of BasicType;
basic_type.isanonymous = true;
create object instance internal_type of InternalType;
internal_type.name = "service";
relate type_definition to basic_type across R6236;
relate basic_type to internal_type across R6205;

create object instance type_definition of TypeDefinition;
create object instance basic_type of BasicType;
basic_type.isanonymous = true;
create object instance internal_type of InternalType;
internal_type.name = "split";
relate type_definition to basic_type across R6236;
relate basic_type to internal_type across R6205;

create object instance type_definition of TypeDefinition;
create object instance basic_type of BasicType;
basic_type.isanonymous = true;
create object instance internal_type of InternalType;
internal_type.name = "stream_modifier";
relate type_definition to basic_type across R6236;
relate basic_type to internal_type across R6205;

create object instance type_definition of TypeDefinition;
create object instance basic_type of BasicType;
basic_type.isanonymous = true;
create object instance internal_type of InternalType;
internal_type.name = "terminator";
relate type_definition to basic_type across R6236;
relate basic_type to internal_type across R6205;

create object instance type_definition of TypeDefinition;
create object instance basic_type of BasicType;
basic_type.isanonymous = true;
create object instance internal_type of InternalType;
internal_type.name = "type";
relate type_definition to basic_type across R6236;
relate basic_type to internal_type across R6205;

/* Comment out the logging if not desired.
 */
select many internal_types from instances of InternalType where ( SORT::ascending( attr:"name" ) );
message = "internal types:  ";
for each internal_type in internal_types
  message = message + internal_type.name + " ";
end for;
LOG::LogInfo( message:message );',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO PE_PE
	VALUES ("a863d51e-ea32-4372-a270-6699010060e9",
	1,
	"bbe52a2c-4f20-49fc-ad27-ff468feeb360",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("007fcb1d-f3da-4ada-b5d4-18c50447e2a9",
	"00000000-0000-0000-0000-000000000000",
	'create_DotExpression',
	'',
	'expression = param.expression;
lhs = param.lhs;
create object instance dot_expression of DotExpression;
relate expression to dot_expression across R5517;
relate lhs to dot_expression across R5569;

select any basic_type from instances of BasicType where ( false );

select one lhs_basic_type related by expression->BasicType[R5570];
if ( empty lhs_basic_type )
  LOG::LogFailure( message:"create_DotExpression:  lhs has no type - " + param.name );
  return basic_type;
end if;

// TODO - provide subtyping maybe from DotExpression <- SelectedAttributeExpression, SelectedComponentExpression, TypeNameExpression, ObjectNameExpresion

// Look for attribute access.
select one instance_type related by lhs_basic_type->InstanceType[R6205];
if ( not_empty instance_type )
  select any attribute_declaration related by instance_type->ObjectDeclaration[R6220]->AttributeDeclaration[R5802] where ( selected.name == param.name );
  if ( not_empty attribute_declaration )
    // create selected attribute expression
    create object instance selected_attribute_expression of SelectedAttributeExpression;
    relate selected_attribute_expression to attribute_declaration across R5541;
    relate selected_attribute_expression to dot_expression across R5572;
    select one basic_type related by attribute_declaration->BasicType[R5803];
    LOG::LogInfo( message:"create_DotExpression:  attribute:  " + param.name );
    return basic_type;
  end if;
  // Look for instance operation access.
  select any service related by instance_type->ObjectDeclaration[R6220]->ObjectService[R5808]->Service[R5203] where ( selected.name == param.name );
  if ( not_empty service )
    // TODO - link invocations to dot expression correctly
    select one basic_type related by service->BasicType[R5205];
    if ( empty basic_type )
      // service
      create object instance instance_service_invocation of InstanceServiceInvocation;
      create object instance service_invocation of ServiceInvocation;
      relate instance_service_invocation to service_invocation across R5610;
    else
      // function
      create object instance instance_function_invocation of InstanceFunctionInvocation;
      create object instance function_invocation of FunctionInvocation2;
      relate instance_function_invocation to function_invocation across R5600;
    end if;
    LOG::LogInfo( message:"create_DotExpression:  object service invocation:  " + param.name );
    return basic_type;
  end if;
end if;

// Look for structure element.
select one structure_type related by lhs_basic_type->UserDefinedType2[R6205]->TypeDeclaration[R6241]->TypeDefinition[R6234]->FullTypeDefinition[R6236]->StructureType[R6219];
if ( not_empty structure_type )
  select one structure_element related by structure_type->StructureElement[R6244];
  while ( not_empty structure_element )
    if ( param.name == structure_element.name )
      // create selected component expression
      create object instance selected_component_expression of SelectedComponentExpression;
      relate selected_component_expression to structure_element across R5543;
      relate selected_component_expression to dot_expression across R5571;
      select one basic_type related by structure_element->BasicType[R6230];
      LOG::LogInfo( message:"create_DotExpression:  structure element:  " + param.name );
      return basic_type;
    end if;
    select one structure_element related by structure_element->StructureElement[R6243.''precedes''];
  end while;
end if;

LOG::LogFailure( message:"create_DotExpression:  found neither attribute access nor structure member access " + param.name );

return basic_type;',
	"f2470f88-fc4a-406d-ba1c-54179e448ed4",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("deed95d2-e00d-4f78-9a47-fb72b2dfaf82",
	"007fcb1d-f3da-4ada-b5d4-18c50447e2a9",
	'expression',
	"0f86953a-c0a1-4f83-b7e4-af32c53c2d6d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("ad315b99-d512-4091-82b3-2a6a25e71c99",
	"007fcb1d-f3da-4ada-b5d4-18c50447e2a9",
	'name',
	"18a1a0a5-c53e-4a43-a5bc-f75ee1a2abe2",
	0,
	'',
	"61a01517-7a19-4476-bca9-3b30ccfcb382",
	'');
INSERT INTO S_SPARM
	VALUES ("61a01517-7a19-4476-bca9-3b30ccfcb382",
	"007fcb1d-f3da-4ada-b5d4-18c50447e2a9",
	'lhs',
	"0f86953a-c0a1-4f83-b7e4-af32c53c2d6d",
	0,
	'',
	"deed95d2-e00d-4f78-9a47-fb72b2dfaf82",
	'');
INSERT INTO PE_PE
	VALUES ("007fcb1d-f3da-4ada-b5d4-18c50447e2a9",
	1,
	"bbe52a2c-4f20-49fc-ad27-ff468feeb360",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("0b39a02d-fa9a-44ad-ad19-28711cf87042",
	"00000000-0000-0000-0000-000000000000",
	'ReferentialAttribute_resolve',
	'',
	'// Link up the referential attributes here after all objects and attributes
// are fully defined.  During the first pass, the referentials were linked
// to themselves.

LOG::LogInfo( message:"RerentialAttribute_resolve starting..." );

o_referring = ""; o_referenced = ""; // string UDTs
select many referential_attribute_definitions from instances of ReferentialAttributeDefinition;
for each referential_attribute_definition in referential_attribute_definitions
  select one referring_attribute_declaration related by referential_attribute_definition->AttributeDeclaration[R5800.''is_referenced_by''];
  select one referring_object_declaration related by referring_attribute_declaration->ObjectDeclaration[R5802];
  o_referring = referring_object_declaration.name;
  o_referring = o_referring + "." + referential_attribute_definition.name;
  unrelate referring_attribute_declaration from referring_attribute_declaration across R5800.''refers_to'' using referential_attribute_definition;
  select any referenced_attribute_declaration related by
    referential_attribute_definition->RelationshipSpecification[R5811]->ObjectDeclaration[R6011]->AttributeDeclaration[R5802]
    where ( selected.name == referential_attribute_definition.name );
  if ( empty referenced_attribute_declaration )
    LOG::LogFailure( message:"RerentialAttribute_resolve failed to find referenced attribute:  " + referential_attribute_definition.name );
  else
    select one referenced_object_declaration related by referenced_attribute_declaration->ObjectDeclaration[R5802];
    o_referenced = referenced_object_declaration.name;
    o_referenced = o_referenced + "." + referenced_attribute_declaration.name;
    relate referring_attribute_declaration to referenced_attribute_declaration across R5800.''refers_to'' using referential_attribute_definition;
    LOG::LogInfo( message:"RerentialAttribute_resolve " + o_referring + " to " + o_referenced );
  end if;
end for;

LOG::LogInfo( message:"RerentialAttribute_resolve ...done" );',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO PE_PE
	VALUES ("0b39a02d-fa9a-44ad-ad19-28711cf87042",
	1,
	"bbe52a2c-4f20-49fc-ad27-ff468feeb360",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("095e5892-2c3f-42ff-81fa-8625c618c189",
	"00000000-0000-0000-0000-000000000000",
	'OrderingExpression_initialize',
	'',
	'ordering_expression = param.ordering_expression;
child_expression = param.child_expression;

ordering_expression.isreverse = param.isreverse;
relate ordering_expression to child_expression across R5535;

// Determine whether we have structures or instances.
select one child_basic_type related by child_expression->BasicType[R5570]->CollectionType[R6205]->BasicType[R6208];
select one instance_type related by child_basic_type->InstanceType[R6205];
if ( not_empty instance_type )
  // We have a collection of instances.
  create object instance instance_ordering_expression of InstanceOrderingExpression;
  relate instance_ordering_expression to ordering_expression across R5534;
else
  // We have a collection of structures
  create object instance structure_ordering_expression of StructureOrderingExpression;
  relate structure_ordering_expression to ordering_expression across R5534;
end if;

// Create an anonymous sequence of the same element as the child expression.
create object instance type_definition of TypeDefinition;
create object instance basic_type of BasicType;
basic_type.isanonymous = true;
create object instance collection_type of CollectionType;
create object instance sequence_type of SequenceType;
relate basic_type to type_definition across R6236;
relate collection_type to basic_type across R6205;
relate sequence_type to collection_type across R6207;
relate collection_type to child_basic_type across R6208;

return basic_type;',
	"f2470f88-fc4a-406d-ba1c-54179e448ed4",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("d3111652-332c-4393-8471-fef0d65715e5",
	"095e5892-2c3f-42ff-81fa-8625c618c189",
	'child_expression',
	"0f86953a-c0a1-4f83-b7e4-af32c53c2d6d",
	0,
	'',
	"a45de31b-5581-4a7a-8d4c-715be784d3c0",
	'');
INSERT INTO S_SPARM
	VALUES ("dbb531db-09b6-48ff-b328-a8a8176b6a32",
	"095e5892-2c3f-42ff-81fa-8625c618c189",
	'isreverse',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"d3111652-332c-4393-8471-fef0d65715e5",
	'');
INSERT INTO S_SPARM
	VALUES ("a45de31b-5581-4a7a-8d4c-715be784d3c0",
	"095e5892-2c3f-42ff-81fa-8625c618c189",
	'ordering_expression',
	"c91ad4ef-f132-440a-8a85-a39814523746",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("c91ad4ef-f132-440a-8a85-a39814523746",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<OrderingExpression>',
	'',
	'',
	'../../../../ooamasl/models/ooamasl/ooamasl/expression/expression.xtuml');
INSERT INTO PE_PE
	VALUES ("095e5892-2c3f-42ff-81fa-8625c618c189",
	1,
	"bbe52a2c-4f20-49fc-ad27-ff468feeb360",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("54a0b7b2-ad3f-4fb8-a067-59393777c524",
	"00000000-0000-0000-0000-000000000000",
	'OrderingExpression_sort',
	'',
	'ordering_expression = param.ordering_expression;

select one child_basic_type related by ordering_expression->Expression2[R5535]->BasicType[R5570]->CollectionType[R6205]->BasicType[R6208];
select one instance_ordering_expression related by ordering_expression->InstanceOrderingExpression[R5534];
if ( not_empty instance_ordering_expression )
  select one instance_type related by child_basic_type->InstanceType[R6205];
  select one object_declaration related by instance_type->ObjectDeclaration[R6220];
  select any attribute_declaration related by object_declaration->AttributeDeclaration[R5802] where ( selected.name == param.name );
  if ( not_empty attribute_declaration )
    relate attribute_declaration to instance_ordering_expression across R5563;
  end if;
else
  select one structure_ordering_expression related by ordering_expression->StructureOrderingExpression[R5534];
  select one structure_type related by child_basic_type->UserDefinedType2[R6205]->TypeDeclaration[R6241]->TypeDefinition[R6234]->FullTypeDefinition[R6236]->StructureType[R6219];
  select one structure_element related by structure_type->StructureElement[R6244];
  while ( not_empty structure_element )
    if ( structure_element.name == param.name )
      relate structure_element to structure_ordering_expression across R5564;
      break;
    end if;
    select one structure_element related by structure_element->StructureElement[R6243.''precedes''];
  end while;
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("97e52f22-2348-4f3c-a902-0b2f88f41917",
	"54a0b7b2-ad3f-4fb8-a067-59393777c524",
	'ordering_expression',
	"c91ad4ef-f132-440a-8a85-a39814523746",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("9db3cc73-759b-4a6b-8684-1f12a4457a08",
	"54a0b7b2-ad3f-4fb8-a067-59393777c524",
	'name',
	"18a1a0a5-c53e-4a43-a5bc-f75ee1a2abe2",
	0,
	'',
	"97e52f22-2348-4f3c-a902-0b2f88f41917",
	'');
INSERT INTO S_SPARM
	VALUES ("c36f68af-94bb-44db-9b7a-084600c65d0a",
	"54a0b7b2-ad3f-4fb8-a067-59393777c524",
	'isreverse',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"9db3cc73-759b-4a6b-8684-1f12a4457a08",
	'');
INSERT INTO PE_PE
	VALUES ("54a0b7b2-ad3f-4fb8-a067-59393777c524",
	1,
	"bbe52a2c-4f20-49fc-ad27-ff468feeb360",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO PE_PE
	VALUES ("bbe52a2c-4f20-49fc-ad27-ff468feeb360",
	1,
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	7);
INSERT INTO S_SYS_PROXY
	VALUES ("e1ca632b-b51d-48ee-b1a8-9539fcd49828",
	'stratus',
	1,
	'../stratus.xtuml');

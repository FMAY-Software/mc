-- BP 7.1.6 content: Package syschar: 3 persistence-version: 7.1.6

INSERT INTO EP_PKG
	VALUES ("42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	"d9bc5487-4193-4817-be1c-6c3f3339aebf",
	'afunmark',
	'',
	0);
INSERT INTO GD_MD
	VALUES ("51de99c8-8ec6-4559-8bc5-024d0f98afc3",
	112,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	108,
	0,
	0,
	1,
	1,
	1,
	12,
	1,
	0,
	0,
	0,
	0,
	0,
	'',
	'com.mentor.nucleus.bp.core::components::ooaofooa::ooaofooa::afunmark');
INSERT INTO DIM_DIA
	VALUES ("51de99c8-8ec6-4559-8bc5-024d0f98afc3",
	'',
	1.000000,
	4000.000000,
	3000.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_SYNC
	VALUES ("13fadada-6c09-4e33-ad0b-9ca2e6e5a44f",
	"00000000-0000-0000-0000-000000000000",
	'WireSynchServiceOoaBridge',
	'',
	'//============================================================================
// $RCSfile: m.bridge.arc,v $
//
// Description:
// This archetype file contains the implementation functions for colors
// specified in the (user supplied/modified) bridge.clr file.
//
// Notice:
// (C) Copyright 1998-2013 Mentor Graphics Corporation
//     All rights reserved.
//
// This document contains confidential and proprietary information and
// property of Mentor Graphics Corp.  No part of this document may be
// reproduced without the express written permission of Mentor Graphics Corp.
//============================================================================
//
//============================================================================
initiant = param.initiant;
ee_key_letters = param.ee_key_letters;
recipient = param.recipient;
T::print(s:"Note:  WireSynchServiceOoaBridge is no longer supported.  Use components and interfaces.");
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("81e270a1-8c34-4704-b831-3b47f55f6bc0",
	"13fadada-6c09-4e33-ad0b-9ca2e6e5a44f",
	'initiant',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("b72ecdcc-f1ae-46d6-9f11-a9ea611bca16",
	"13fadada-6c09-4e33-ad0b-9ca2e6e5a44f",
	'ee_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"81e270a1-8c34-4704-b831-3b47f55f6bc0",
	'');
INSERT INTO S_SPARM
	VALUES ("ae94a3a9-dcca-4191-bbb2-093343c78f3e",
	"13fadada-6c09-4e33-ad0b-9ca2e6e5a44f",
	'recipient',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"b72ecdcc-f1ae-46d6-9f11-a9ea611bca16",
	'');
INSERT INTO PE_PE
	VALUES ("13fadada-6c09-4e33-ad0b-9ca2e6e5a44f",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("60c3c3a1-2919-4704-bf40-d544b3087594",
	"00000000-0000-0000-0000-000000000000",
	'WireRealizeExternalEntity',
	'',
	'//
//============================================================================
a = param.a;
b = param.b;
c = param.c;
d = param.d;
e = param.e;
T::print(s:"Note:  WireRealizeExternalEntity is no longer supported.  Use components and interfaces.");
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("80ee74ae-19a7-42ab-bc92-377117ebc500",
	"60c3c3a1-2919-4704-bf40-d544b3087594",
	'a',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("e751bb5f-a2d0-4b5e-a8a5-9a4ce87fa649",
	"60c3c3a1-2919-4704-bf40-d544b3087594",
	'b',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"80ee74ae-19a7-42ab-bc92-377117ebc500",
	'');
INSERT INTO S_SPARM
	VALUES ("97cd544d-b226-4e8e-bc6f-819a54ed4232",
	"60c3c3a1-2919-4704-bf40-d544b3087594",
	'c',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"e751bb5f-a2d0-4b5e-a8a5-9a4ce87fa649",
	'');
INSERT INTO S_SPARM
	VALUES ("52ab92ae-f189-4514-b132-c0a7a9f225a0",
	"60c3c3a1-2919-4704-bf40-d544b3087594",
	'd',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"97cd544d-b226-4e8e-bc6f-819a54ed4232",
	'');
INSERT INTO S_SPARM
	VALUES ("593901d2-0bf7-4be4-aa91-a101b2b3e9fa",
	"60c3c3a1-2919-4704-bf40-d544b3087594",
	'e',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"52ab92ae-f189-4514-b132-c0a7a9f225a0",
	'');
INSERT INTO PE_PE
	VALUES ("60c3c3a1-2919-4704-bf40-d544b3087594",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("640a2f4a-b7b2-44ba-ba4b-53f85e7012a4",
	"00000000-0000-0000-0000-000000000000",
	'WireRealizedExternalEntity',
	'',
	'//
//============================================================================
a = param.a;
b = param.b;
c = param.c;
d = param.d;
e = param.e;
T::print(s:"Note:  WireRealizeExternalEntity is no longer supported.  Use components and interfaces.");
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("487c4b66-8b0e-44bb-bc6d-8fd578f8bc51",
	"640a2f4a-b7b2-44ba-ba4b-53f85e7012a4",
	'a',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("396b1e71-f52e-4445-b1b7-53b8997f34a6",
	"640a2f4a-b7b2-44ba-ba4b-53f85e7012a4",
	'b',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"487c4b66-8b0e-44bb-bc6d-8fd578f8bc51",
	'');
INSERT INTO S_SPARM
	VALUES ("d0a72167-bcd9-4563-ab68-93b8a550f1fe",
	"640a2f4a-b7b2-44ba-ba4b-53f85e7012a4",
	'c',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"396b1e71-f52e-4445-b1b7-53b8997f34a6",
	'');
INSERT INTO S_SPARM
	VALUES ("53bd2142-5df5-41de-8b60-6c040b79191d",
	"640a2f4a-b7b2-44ba-ba4b-53f85e7012a4",
	'd',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"d0a72167-bcd9-4563-ab68-93b8a550f1fe",
	'');
INSERT INTO S_SPARM
	VALUES ("f09a7697-2149-4ceb-98f8-ea5cba868a7c",
	"640a2f4a-b7b2-44ba-ba4b-53f85e7012a4",
	'e',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"53bd2142-5df5-41de-8b60-6c040b79191d",
	'');
INSERT INTO PE_PE
	VALUES ("640a2f4a-b7b2-44ba-ba4b-53f85e7012a4",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("107c1c99-bff1-487f-a230-11139a3db346",
	"00000000-0000-0000-0000-000000000000",
	'TagSyncServiceSafeForInterrupts',
	'',
	'//
//
//============================================================================
// Mark a function (synchronous service) as being safe for 
// interrupt service routine (ISR) invocation.  This is also useful
// for task communication and other multi-context situations.
//============================================================================
component_name = param.component_name;
function_name = param.function_name;
component_name = T::r(s:component_name);
select any tm_sync from instances of TM_SYNC where ( ( selected.RegisteredDomain == component_name ) and ( selected.Name == function_name ) );
if ( empty tm_sync )
  create object instance tm_sync of TM_SYNC;
  tm_sync.RegisteredDomain = component_name;
  tm_sync.Name = function_name;
end if;
tm_sync.IsSafeForInterrupts = true;
T::print(s:"Function ${function_name} in component ${component_name} marked as safe for interrupt invocation.");
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("00dd5f0e-b926-4d2e-8c66-0482c4e37fe4",
	"107c1c99-bff1-487f-a230-11139a3db346",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("3e63531f-b122-42f4-ac4a-7a523b23e437",
	"107c1c99-bff1-487f-a230-11139a3db346",
	'function_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00dd5f0e-b926-4d2e-8c66-0482c4e37fe4",
	'');
INSERT INTO PE_PE
	VALUES ("107c1c99-bff1-487f-a230-11139a3db346",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("85c22d23-f8e8-4026-9a03-73ab46117e0c",
	"00000000-0000-0000-0000-000000000000",
	'TagBridgeCallNotGenerate',
	'',
	'//
//
//============================================================================
//-- 004: 20140122 Add Start (saitou) 
dom_name = param.dom_name;
ee_name = param.ee_name;
//
select many te_cs from instances of TE_C;
if ( dom_name != "*" )
  select many te_cs from instances of TE_C where ( selected.Name == dom_name );
end if;
for each te_c in te_cs
  select any te_ee from instances of TE_EE where ( ( selected.Key_Lett == ee_name ) and ( selected.te_cID == te_c.ID ) );
  if ( not_empty te_ee )
    te_ee.Included = false;
    T::print(s:"TagBridgeCallNotGenerate() : ${ee_name}");
    select many s_brgs related by te_ee->S_EE[R2020]->S_BRG[R19];
    for each s_brg in s_brgs
      select one te_brg related by s_brg->TE_BRG[R2025];
      if ( not_empty te_brg )
        te_brg.NotGenerateInvocation = true;
      end if;
    end for;
  else
    T::print(s:"TagBridgeCallNotGenerate() ${ee_name} is not found.");
  end if;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("a874eaf0-0f9c-4481-9091-fc415c3ab6de",
	"85c22d23-f8e8-4026-9a03-73ab46117e0c",
	'dom_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("e5f7d2aa-068c-4101-b191-5559525cdb97",
	"85c22d23-f8e8-4026-9a03-73ab46117e0c",
	'ee_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"a874eaf0-0f9c-4481-9091-fc415c3ab6de",
	'');
INSERT INTO PE_PE
	VALUES ("85c22d23-f8e8-4026-9a03-73ab46117e0c",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("f1780d26-b2d4-4796-b097-a89699402015",
	"00000000-0000-0000-0000-000000000000",
	'port_realize_EE',
	'',
	'//-- 004: 20140122 Add End (saitou) 
//-- 009: 20140205 Add Start (saitou)
dom_name = param.dom_name;
port_name = param.port_name;
ee_name = param.ee_name;
//
select many te_cs from instances of TE_C;
if ( dom_name != "*" )
  select many te_cs from instances of TE_C where ( selected.Name == dom_name );
end if;
//
for each te_c in te_cs
  select any te_po from instances of TE_PO where ( ( selected.Name == port_name ) and ( selected.te_cID == te_c.ID ) );
  select any te_ee from instances of TE_EE where ( ( selected.Key_Lett == ee_name ) and ( selected.te_cID == te_c.ID ) );
  if ( ( not_empty te_po ) and ( not_empty te_ee ) )
    te_po.realizeEE_ID = te_ee.EE_ID;
    T::print(s:"port_realize_EE() : port(${te_po.Name}) realize EE(${te_ee.Key_Lett})");
    // �����Ŏw�肳��Ă���EE�̓��f����͎g�p����Ă��Ȃ��͂��B�ł����ۂ͎g���̂ŁAIncluded�t���O�𗧂ĂĂ����B
    te_ee.Included = true;
  end if;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("6a5d42d8-cc6c-40a8-8f2b-91830cdc5092",
	"f1780d26-b2d4-4796-b097-a89699402015",
	'dom_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("eaad43db-8e43-4efa-a5c0-a77ac3bdc638",
	"f1780d26-b2d4-4796-b097-a89699402015",
	'port_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"6a5d42d8-cc6c-40a8-8f2b-91830cdc5092",
	'');
INSERT INTO S_SPARM
	VALUES ("fc2326d5-3e1d-40a2-94b6-cb43d65e41a8",
	"f1780d26-b2d4-4796-b097-a89699402015",
	'ee_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"eaad43db-8e43-4efa-a5c0-a77ac3bdc638",
	'');
INSERT INTO PE_PE
	VALUES ("f1780d26-b2d4-4796-b097-a89699402015",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("60a141c0-9d2f-4c8b-98ac-48bd994d58d9",
	"00000000-0000-0000-0000-000000000000",
	'mark_ee_as_realized',
	'',
	'//-- 009: 20140205 Add End (saitou)
//-- 014: 20140225 Add Start (saitou) 
dom_name = param.dom_name;
ee_name = param.ee_name;
prefix = param.prefix;
include_file = param.include_file;
//
select many te_cs from instances of TE_C;
if ( dom_name != "*" )
  select many te_cs from instances of TE_C where ( selected.Name == dom_name );
end if;
for each te_c in te_cs
  select any te_ee from instances of TE_EE where ( ( selected.Key_Lett == ee_name ) and ( selected.te_cID == te_c.ID ) );
  if ( not_empty te_ee )
    T::print(s:"mark_ee_as_realized() : ${ee_name} : [${te_ee.RegisteredName}] -> [${prefix}] : ${include_file}");
    te_ee.RegisteredName = "${prefix}";
    te_ee.Include_File = "${include_file}";
    select many s_brgs related by te_ee->S_EE[R2020]->S_BRG[R19];
    for each s_brg in s_brgs
      select one te_brg related by s_brg->TE_BRG[R2025];
      //-- 010:20140311 Modified Start (nomura)
      r = ::fx_is_exist_real_func( te_ee:te_ee );
      isExistRealFunc = r;
      if ( ( not_empty te_brg ) and ( isExistRealFunc == false ) )
        //-- 010:20140307 Modified End (nomura)
        brgprefix = te_ee.RegisteredName + "_";
        te_brg.GeneratedName = brgprefix + s_brg.Name;
      end if;
    end for;
  else
    T::print(s:"mark_ee_as_realized() ${ee_name} is not found.");
  end if;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("b7abfe11-20a5-4cb1-b340-49628db251d5",
	"60a141c0-9d2f-4c8b-98ac-48bd994d58d9",
	'dom_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("0a651604-96af-4391-a7d6-34fcec7500c7",
	"60a141c0-9d2f-4c8b-98ac-48bd994d58d9",
	'ee_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"b7abfe11-20a5-4cb1-b340-49628db251d5",
	'');
INSERT INTO S_SPARM
	VALUES ("19f9ecfd-4218-4c80-858a-c5d62b3b7fee",
	"60a141c0-9d2f-4c8b-98ac-48bd994d58d9",
	'prefix',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"0a651604-96af-4391-a7d6-34fcec7500c7",
	'');
INSERT INTO S_SPARM
	VALUES ("ae944a97-9e57-4c44-a76e-47fe969fed5c",
	"60a141c0-9d2f-4c8b-98ac-48bd994d58d9",
	'include_file',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"19f9ecfd-4218-4c80-858a-c5d62b3b7fee",
	'');
INSERT INTO PE_PE
	VALUES ("60a141c0-9d2f-4c8b-98ac-48bd994d58d9",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("ec4d5d06-37f1-4a19-bb70-a0542ef0a488",
	"00000000-0000-0000-0000-000000000000",
	'TagSystemObjectDefaultExtentSize',
	'',
	'//============================================================================
// $RCSfile: m.class.arc,v $
//
// Description:
// This archetype file contains the implementation functions for colors
// specified in the (user supplied/modified) object.clr file.
//
// Notice:
// (C) Copyright 1998-2013 Mentor Graphics Corporation
//     All rights reserved.
// Enhancements provided by TOYO Corporation.
//
// This document contains confidential and proprietary information and
// property of Mentor Graphics Corp.  No part of this document may be
// reproduced without the express written permission of Mentor Graphics Corp.
//============================================================================
//
//============================================================================
// Set default extension for entire component.
//============================================================================
extent_size = param.extent_size;
::MarkSystemObjectDefaultExtentSize( extent_size:extent_size );
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("cb2a28aa-0266-4078-a15f-bc44d53ff21a",
	"ec4d5d06-37f1-4a19-bb70-a0542ef0a488",
	'extent_size',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("ec4d5d06-37f1-4a19-bb70-a0542ef0a488",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("f6915098-c77d-4695-a568-65e3fa618b72",
	"00000000-0000-0000-0000-000000000000",
	'MarkSystemObjectDefaultExtentSize',
	'',
	'extent_size = param.extent_size;
select many te_classes from instances of TE_CLASS;
for each te_class in te_classes
  te_class.MaxExtentSize = extent_size;
end for;
T::print(s:"Class default extent size is $t{extent_size} for _all_ classes.");
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("98a1177c-f5f1-4144-9e59-2c41f85be82f",
	"f6915098-c77d-4695-a568-65e3fa618b72",
	'extent_size',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("f6915098-c77d-4695-a568-65e3fa618b72",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("400dacca-f41a-4ef7-a392-43aa887ee00c",
	"00000000-0000-0000-0000-000000000000",
	'TagObjectExtentSize',
	'',
	'//
//============================================================================
obj_key_letters = param.obj_key_letters;
extent_size = param.extent_size;
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkObjectExtentSize( component_name:te_c.Name, obj_key_letters:obj_key_letters, extent_size:extent_size );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("d2a9c401-02f2-49bb-805f-0ddf5ba464eb",
	"400dacca-f41a-4ef7-a392-43aa887ee00c",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("446e33f1-0515-4ef4-8cb3-975e79a66873",
	"400dacca-f41a-4ef7-a392-43aa887ee00c",
	'extent_size',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"d2a9c401-02f2-49bb-805f-0ddf5ba464eb",
	'');
INSERT INTO PE_PE
	VALUES ("400dacca-f41a-4ef7-a392-43aa887ee00c",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("bc9a8617-5d79-49f5-a568-75aecb0fc73c",
	"00000000-0000-0000-0000-000000000000",
	'MarkObjectExtentSize',
	'',
	'component_name = param.component_name;
obj_key_letters = param.obj_key_letters;
extent_size = param.extent_size;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  select any te_class related by te_c->TE_CLASS[R2064] where ( selected.Key_Lett == obj_key_letters );
  if ( not_empty te_class )
    te_class.MaxExtentSize = extent_size;
    T::print(s:"Class ''${te_class.Name}'' (${te_class.Key_Lett}) extent size is $t{extent_size}");
  else
    T::print(s:"ERROR:  Class (${obj_key_letters}) not found in component ''${te_c.Name}''.");
    T::print(s:"      => MarkObjectExtentSize( ${obj_key_letters}, $t{extent_size} )");
  end if;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("c7f55bc0-eb1e-4683-9ddf-5b640046c9e4",
	"bc9a8617-5d79-49f5-a568-75aecb0fc73c",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("eba4ecd4-dd92-47a7-a994-26c457f46435",
	"bc9a8617-5d79-49f5-a568-75aecb0fc73c",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"c7f55bc0-eb1e-4683-9ddf-5b640046c9e4",
	'');
INSERT INTO S_SPARM
	VALUES ("68a8171e-1bb4-45a5-b1b3-633a3d126e6b",
	"bc9a8617-5d79-49f5-a568-75aecb0fc73c",
	'extent_size',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"eba4ecd4-dd92-47a7-a994-26c457f46435",
	'');
INSERT INTO PE_PE
	VALUES ("bc9a8617-5d79-49f5-a568-75aecb0fc73c",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("d428f79d-85d2-477a-b5e8-3fadace5edd1",
	"00000000-0000-0000-0000-000000000000",
	'TagTransformerGeneration',
	'',
	'//
//============================================================================
// This function was used in previous versions of MC-3020 to enable
// the generation of code from actions in transformers (operations).
// This function is deprecated in favor of translating operations by
// default.  Translation may be disabled with MarkClassOperationTranslationOff.
//============================================================================
obj_key_letters = param.obj_key_letters;
transformer_name = param.transformer_name;
T::print(s:"Note:  TagTransformerGeneration is no longer used.  Please use");
T::print(s:"MarkClassOperationTranslationOff to control semantic translation.");
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("c52d58db-e434-4562-96be-4ac9b0b7189b",
	"d428f79d-85d2-477a-b5e8-3fadace5edd1",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("051c0b9d-2998-4e8b-886e-287179b5d23c",
	"d428f79d-85d2-477a-b5e8-3fadace5edd1",
	'transformer_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"c52d58db-e434-4562-96be-4ac9b0b7189b",
	'');
INSERT INTO PE_PE
	VALUES ("d428f79d-85d2-477a-b5e8-3fadace5edd1",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("f7c293fc-b3c7-47a1-912a-132ff90f74af",
	"00000000-0000-0000-0000-000000000000",
	'TagClassOperationTranslationOff',
	'',
	'//
//============================================================================
// Disable the translation of class operation processing semantics.
// The default is for all operations to be translated.
//============================================================================
obj_key_letters = param.obj_key_letters;
op_name = param.op_name;
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkClassOperationTranslationOff( component_name:te_c.Name, obj_key_letters:obj_key_letters, op_name:op_name );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("16befeef-3231-4e85-ae5a-fc038f9d16b2",
	"f7c293fc-b3c7-47a1-912a-132ff90f74af",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("a628f2f6-37aa-4587-8f58-34047b77bd3d",
	"f7c293fc-b3c7-47a1-912a-132ff90f74af",
	'op_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"16befeef-3231-4e85-ae5a-fc038f9d16b2",
	'');
INSERT INTO PE_PE
	VALUES ("f7c293fc-b3c7-47a1-912a-132ff90f74af",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("ad44e6eb-f483-486d-bef7-345adb6df71f",
	"00000000-0000-0000-0000-000000000000",
	'MarkClassOperationTranslationOff',
	'',
	'component_name = param.component_name;
obj_key_letters = param.obj_key_letters;
op_name = param.op_name;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  msg = "";
  select many te_classes related by te_c->TE_CLASS[R2064] where ( false );
  if ( "*" == obj_key_letters )
    select many te_classes related by te_c->TE_CLASS[R2064];
  else
    select many te_classes related by te_c->TE_CLASS[R2064] where ( selected.Key_Lett == obj_key_letters );
  end if;
  if ( empty te_classes )
    msg = "ERROR:  Class ${obj_key_letters} not found in component.";
    msg = msg + "\n => MarkClassOperationTranslationOff( ${obj_key_letters}, ${op_name} )";
  end if;
  for each te_class in te_classes
    if ( "*" == op_name )
      select many te_tfrs related by te_class->O_OBJ[R2019]->O_TFR[R115]->TE_TFR[R2024];
      if ( not_empty te_tfrs )
        for each te_tfr in te_tfrs
          te_tfr.XlateSemantics = false;
        end for;
        msg = "Class ${te_class.Name} (${te_class.Key_Lett}) all operation semantics disabled.";
      end if;
    else
      select any o_tfr related by te_class->O_OBJ[R2019]->O_TFR[R115] where ( selected.Name == op_name );
      if ( not_empty o_tfr )
        select one te_tfr related by o_tfr->TE_TFR[R2024];
        te_tfr.XlateSemantics = false;
        msg = "Class Operation ${te_class.Name} ${te_class.Key_Lett}::${te_tfr.Name} semantics disabled.";
      else
        msg = "ERROR:  Class Operation ${te_class.Name} ${te_class.Key_Lett}::${op_name} is not defined.";
        msg = msg + "\n  => MarkClassOperationTranslationOff( ${obj_key_letters}, ${op_name} )";
      end if;
    end if;
  end for;
  if ( msg != "" )
    T::print(s:"${msg}");
  end if;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("5cbdca99-1b68-45df-a3b8-4c3bd6760273",
	"ad44e6eb-f483-486d-bef7-345adb6df71f",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("7d609263-2bc8-49f5-8dc2-e3a0717e9bf6",
	"ad44e6eb-f483-486d-bef7-345adb6df71f",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"5cbdca99-1b68-45df-a3b8-4c3bd6760273",
	'');
INSERT INTO S_SPARM
	VALUES ("b9f29d80-328b-4454-90cf-fb6de32d3eea",
	"ad44e6eb-f483-486d-bef7-345adb6df71f",
	'op_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"7d609263-2bc8-49f5-8dc2-e3a0717e9bf6",
	'');
INSERT INTO PE_PE
	VALUES ("ad44e6eb-f483-486d-bef7-345adb6df71f",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("ed96d353-7f9f-41b3-ae15-ffdd82219e4f",
	"00000000-0000-0000-0000-000000000000",
	'TagObjectTraceOff',
	'',
	'//
//============================================================================
obj_key_letters = param.obj_key_letters;
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkObjectTraceOff( component_name:te_c.Name, obj_key_letters:obj_key_letters );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("d8575e82-5c2e-4d97-b342-10dc56572627",
	"ed96d353-7f9f-41b3-ae15-ffdd82219e4f",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("ed96d353-7f9f-41b3-ae15-ffdd82219e4f",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("873db1dc-7572-473c-8df1-b3cc0719efb9",
	"00000000-0000-0000-0000-000000000000",
	'MarkObjectTraceOff',
	'',
	'component_name = param.component_name;
obj_key_letters = param.obj_key_letters;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  msg = "";
  if ( "*" == obj_key_letters )
    select many te_classes related by te_c->TE_CLASS[R2064];
    for each te_class in te_classes
      te_class.IsTrace = false;
    end for;
    msg = "Class tracing for all is disabled in component ${te_c.Name}.";
  else
    select any te_class related by te_c->TE_CLASS[R2064] where ( selected.Key_Lett == obj_key_letters );
    if ( not_empty te_class )
      te_class.IsTrace = false;
      msg = "Class ${te_class.Name} (${te_class.Key_Lett}) tracing is disabled.";
    else
      msg = "ERROR:  Class (${obj_key_letters}) not found in component ${te_c.Name}.";
      msg = msg + "\n => MarkObjectTraceOff( ${obj_key_letters} )";
    end if;
  end if;
  if ( "" != msg )
    T::print(s:"${msg}");
  end if;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("4e391b17-8082-4191-9485-f67f52d57b47",
	"873db1dc-7572-473c-8df1-b3cc0719efb9",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("7b25245c-382c-4fb6-b3a9-565bb9a85d90",
	"873db1dc-7572-473c-8df1-b3cc0719efb9",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"4e391b17-8082-4191-9485-f67f52d57b47",
	'');
INSERT INTO PE_PE
	VALUES ("873db1dc-7572-473c-8df1-b3cc0719efb9",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("8e5850e4-4b51-46a3-88d8-85351befb98b",
	"00000000-0000-0000-0000-000000000000",
	'TagObjectTraceOn',
	'',
	'//
//============================================================================
obj_key_letters = param.obj_key_letters;
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkObjectTraceOn( component_name:te_c.Name, obj_key_letters:obj_key_letters );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("d1035a24-5a97-4750-b245-f66aa2ed422b",
	"8e5850e4-4b51-46a3-88d8-85351befb98b",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("8e5850e4-4b51-46a3-88d8-85351befb98b",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("84d93062-aea7-42e5-bbb5-0f76d6208c41",
	"00000000-0000-0000-0000-000000000000",
	'MarkObjectTraceOn',
	'',
	'component_name = param.component_name;
obj_key_letters = param.obj_key_letters;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  msg = "";
  if ( "*" == obj_key_letters )
    select many te_classes related by te_c->TE_CLASS[R2064];
    for each te_class in te_classes
      te_class.IsTrace = true;
    end for;
    msg = "Class tracing for all is enabled in component ${te_c.Name}.";
  else
    select any te_class related by te_c->TE_CLASS[R2064] where ( selected.Key_Lett == obj_key_letters );
    if ( not_empty te_class )
      te_class.IsTrace = true;
      msg = "Class ${te_class.Name} (${te_class.Key_Lett}) tracing is enabled.";
    else
      msg = "ERROR:  Class (${obj_key_letters}) not found in component ${te_c.Name}.";
      msg = msg + "\n => MarkObjectTraceOn( ${obj_key_letters} )";
    end if;
  end if;
  if ( "" != msg )
    T::print(s:"${msg}");
  end if;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("a451813d-3802-4eb8-a2c3-c0a780d62e08",
	"84d93062-aea7-42e5-bbb5-0f76d6208c41",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("28b4ac2a-a2a1-4970-8660-c78685398b22",
	"84d93062-aea7-42e5-bbb5-0f76d6208c41",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"a451813d-3802-4eb8-a2c3-c0a780d62e08",
	'');
INSERT INTO PE_PE
	VALUES ("84d93062-aea7-42e5-bbb5-0f76d6208c41",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("789237ed-d36c-44ba-95c7-2e64f4838061",
	"00000000-0000-0000-0000-000000000000",
	'TagPEIsDefinedInData',
	'',
	'//
//============================================================================
// Identify this class as having preexisting instances defined
// in data.
//============================================================================
ss_prefix = param.ss_prefix;
obj_key_letters = param.obj_key_letters;
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkPEIsDefinedInData( component_name:te_c.Name, ss_prefix:ss_prefix, obj_key_letters:obj_key_letters );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("2e60606f-1ac2-464e-ace4-5503ceb1b25d",
	"789237ed-d36c-44ba-95c7-2e64f4838061",
	'ss_prefix',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("4e7998d4-4dca-46e0-999e-080315592f03",
	"789237ed-d36c-44ba-95c7-2e64f4838061",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"2e60606f-1ac2-464e-ace4-5503ceb1b25d",
	'');
INSERT INTO PE_PE
	VALUES ("789237ed-d36c-44ba-95c7-2e64f4838061",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("87049692-a204-4fee-af1c-5b0c2ba8567c",
	"00000000-0000-0000-0000-000000000000",
	'MarkPEIsDefinedInData',
	'',
	'component_name = param.component_name;
ss_prefix = param.ss_prefix;
obj_key_letters = param.obj_key_letters;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  msg = "";
  // Get set into scope.
  select many te_classes related by te_c->TE_CLASS[R2064] where ( false );
  // Check for an explicit object.
  // Check for an explicit subsystem.
  // Check a star in the subsystem and component.
  // Otherwise, generate a coloring error.
  if ( ( "*" == ss_prefix ) and ( "*" == obj_key_letters ) )
    select many te_classes related by te_c->TE_CLASS[R2064];
  elif ( "" == ss_prefix )
    select many te_classes related by te_c->TE_CLASS[R2064] where ( selected.Key_Lett == obj_key_letters );
  elif ( "*" == obj_key_letters )
    select any s_ss from instances of S_SS where ( selected.Name == ss_prefix );
    select many te_classes related by s_ss->O_OBJ[R2]->TE_CLASS[R2019] where ( selected.Key_Lett == obj_key_letters );
  else
    msg = msg + "ERROR:  MarkPEIsDefinedInData( ${ss_prefix}, ${obj_key_letters} ) in component ${te_c.Name}\n";
  end if;
  for each te_class in te_classes
    te_class.PEIsDefinedInData = true;
    msg = msg + "Class ${te_class.Name} (${te_class.Key_Lett}) in component ${te_c.Name} marked to enable PEIs in data.\n";
  end for;
  if ( "" != msg )
    T::print(s:"${msg}");
  end if;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("ee390df8-a691-4445-84c0-17c2395a295c",
	"87049692-a204-4fee-af1c-5b0c2ba8567c",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("f303ff9c-de29-4c3c-a0c0-c97851216c70",
	"87049692-a204-4fee-af1c-5b0c2ba8567c",
	'ss_prefix',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"ee390df8-a691-4445-84c0-17c2395a295c",
	'');
INSERT INTO S_SPARM
	VALUES ("cf700043-712c-4d78-a41b-6cb1fc5778fd",
	"87049692-a204-4fee-af1c-5b0c2ba8567c",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"f303ff9c-de29-4c3c-a0c0-c97851216c70",
	'');
INSERT INTO PE_PE
	VALUES ("87049692-a204-4fee-af1c-5b0c2ba8567c",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("16ef1d8c-fe00-4b14-9bf9-5d5c64dd6114",
	"00000000-0000-0000-0000-000000000000",
	'TagStaticInstancePopulation',
	'',
	'//
//============================================================================
// Identify this class as having a static instance population.
// That is, after initialization is complete, instances are neither
// created nor destroyed.
//============================================================================
ss_prefix = param.ss_prefix;
obj_key_letters = param.obj_key_letters;
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkStaticInstancePopulation( component_name:te_c.Name, ss_prefix:ss_prefix, obj_key_letters:obj_key_letters );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("9c155d15-9edc-40f8-8535-97198c70c647",
	"16ef1d8c-fe00-4b14-9bf9-5d5c64dd6114",
	'ss_prefix',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("975a14b7-5742-4b2b-94c3-7a83d7b9ff20",
	"16ef1d8c-fe00-4b14-9bf9-5d5c64dd6114",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"9c155d15-9edc-40f8-8535-97198c70c647",
	'');
INSERT INTO PE_PE
	VALUES ("16ef1d8c-fe00-4b14-9bf9-5d5c64dd6114",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("56ab850f-a8c3-4193-a7f7-738bbf3b3815",
	"00000000-0000-0000-0000-000000000000",
	'MarkStaticInstancePopulation',
	'',
	'component_name = param.component_name;
ss_prefix = param.ss_prefix;
obj_key_letters = param.obj_key_letters;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  msg = "";
  // Get set into scope.
  select many te_classes related by te_c->TE_CLASS[R2064] where ( false );
  // Check for an explicit object.
  // Check for an explicit subsystem.
  // Check a star in the subsystem and component.
  // Otherwise, generate a coloring error.
  if ( ( "*" == ss_prefix ) and ( "*" == obj_key_letters ) )
    select many te_classes related by te_c->TE_CLASS[R2064];
  elif ( "" == ss_prefix )
    select many te_classes related by te_c->TE_CLASS[R2064] where ( selected.Key_Lett == obj_key_letters );
  elif ( "*" == obj_key_letters )
    select any s_ss from instances of S_SS where ( selected.Name == ss_prefix );
    select many te_classes related by s_ss->O_OBJ[R2]->TE_CLASS[R2019] where ( selected.Key_Lett == obj_key_letters );
  else
    msg = msg + "ERROR:  MarkStaticInstancePopulation( ${ss_prefix}, ${obj_key_letters} ) in component ${te_c.Name}\n";
  end if;
  for each te_class in te_classes
    te_class.IsFixedPopulation = true;
    msg = msg + "Class ${te_class.Name} (${te_class.Key_Lett}) in component ${te_c.Name} marked as\n";
    msg = msg + "as having a static instance population.\n";
  end for;
  if ( "" != msg )
    T::print(s:"${msg}");
  end if;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("f31666de-5c7f-4e02-8ebc-7f7c3a9ed5a5",
	"56ab850f-a8c3-4193-a7f7-738bbf3b3815",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("906b3e85-2e2b-4ae7-a481-e88e18dbaafc",
	"56ab850f-a8c3-4193-a7f7-738bbf3b3815",
	'ss_prefix',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"f31666de-5c7f-4e02-8ebc-7f7c3a9ed5a5",
	'');
INSERT INTO S_SPARM
	VALUES ("7061da8c-6479-4382-806d-b55a240d2216",
	"56ab850f-a8c3-4193-a7f7-738bbf3b3815",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"906b3e85-2e2b-4ae7-a481-e88e18dbaafc",
	'');
INSERT INTO PE_PE
	VALUES ("56ab850f-a8c3-4193-a7f7-738bbf3b3815",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("92490d0b-31c5-49e0-9524-5cfdd04be41d",
	"00000000-0000-0000-0000-000000000000",
	'TagReadOnly',
	'',
	'//
//============================================================================
// Mark object as read only.
//============================================================================
ss_prefix = param.ss_prefix;
obj_key_letters = param.obj_key_letters;
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkReadOnly( component_name:te_c.Name, ss_prefix:ss_prefix, obj_key_letters:obj_key_letters );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("63112d4b-82eb-400e-9558-d3a44ba79594",
	"92490d0b-31c5-49e0-9524-5cfdd04be41d",
	'ss_prefix',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("867e31ff-b98f-4531-be89-965f921c91ef",
	"92490d0b-31c5-49e0-9524-5cfdd04be41d",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"63112d4b-82eb-400e-9558-d3a44ba79594",
	'');
INSERT INTO PE_PE
	VALUES ("92490d0b-31c5-49e0-9524-5cfdd04be41d",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("b03f1637-5bd7-477c-aa14-f5c58e42ef6b",
	"00000000-0000-0000-0000-000000000000",
	'MarkReadOnly',
	'',
	'component_name = param.component_name;
ss_prefix = param.ss_prefix;
obj_key_letters = param.obj_key_letters;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  msg = "";
  // Get set into scope.
  select many te_classes related by te_c->TE_CLASS[R2064] where ( false );
  // Check for an explicit object.
  // Check for an explicit subsystem.
  // Check a star in the subsystem and component.
  // Otherwise, generate a coloring error.
  if ( ( "*" == ss_prefix ) and ( "*" == obj_key_letters ) )
    select many te_classes related by te_c->TE_CLASS[R2064];
  elif ( "" == ss_prefix )
    select many te_classes related by te_c->TE_CLASS[R2064] where ( selected.Key_Lett == obj_key_letters );
  elif ( "*" == obj_key_letters )
    select any s_ss from instances of S_SS where ( selected.Name == ss_prefix );
    select many te_classes related by s_ss->O_OBJ[R2]->TE_CLASS[R2019] where ( selected.Key_Lett == obj_key_letters );
  else
    msg = msg + "ERROR:  MarkReadOnly( ${ss_prefix}, ${obj_key_letters} ) in component ${te_c.Name}\n";
  end if;
  for each te_class in te_classes
    te_class.IsReadOnly = true;
    msg = msg + "Class ${te_class.Name} (${te_class.Key_Lett}) in component ${te_c.Name} marked as read only.\n";
  end for;
  if ( "" != msg )
    T::print(s:"${msg}");
  end if;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("5de2499d-35e6-418a-ba8f-1995dd538a13",
	"b03f1637-5bd7-477c-aa14-f5c58e42ef6b",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("ab11d33c-3eb5-441a-be02-d9594eb22497",
	"b03f1637-5bd7-477c-aa14-f5c58e42ef6b",
	'ss_prefix',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"5de2499d-35e6-418a-ba8f-1995dd538a13",
	'');
INSERT INTO S_SPARM
	VALUES ("104fc732-0d65-4f32-bf41-99c9bd885be1",
	"b03f1637-5bd7-477c-aa14-f5c58e42ef6b",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"ab11d33c-3eb5-441a-be02-d9594eb22497",
	'');
INSERT INTO PE_PE
	VALUES ("b03f1637-5bd7-477c-aa14-f5c58e42ef6b",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("79acea41-7744-42ae-b67d-ec0ca3dae940",
	"00000000-0000-0000-0000-000000000000",
	'TagPersistentClass',
	'',
	'//
//============================================================================
// Enable persistent storage of the specified class or classes.
//============================================================================
ss_prefix = param.ss_prefix;
obj_key_letters = param.obj_key_letters;
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkPersistentClass( component_name:te_c.Name, ss_prefix:ss_prefix, obj_key_letters:obj_key_letters );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("40a3d5fd-6620-4b34-b772-0093debd22aa",
	"79acea41-7744-42ae-b67d-ec0ca3dae940",
	'ss_prefix',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("c17c2650-04ed-4ac0-af7c-23733a7c166a",
	"79acea41-7744-42ae-b67d-ec0ca3dae940",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"40a3d5fd-6620-4b34-b772-0093debd22aa",
	'');
INSERT INTO PE_PE
	VALUES ("79acea41-7744-42ae-b67d-ec0ca3dae940",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("534c2920-08ae-4fc5-b7f0-539cfffcff76",
	"00000000-0000-0000-0000-000000000000",
	'MarkPersistentClass',
	'',
	'component_name = param.component_name;
ss_prefix = param.ss_prefix;
obj_key_letters = param.obj_key_letters;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  msg = "";
  // Get set into scope.
  select many te_classes related by te_c->TE_CLASS[R2064] where ( false );
  // Check for an explicit object.
  // Check for an explicit subsystem.
  // Check a star in the subsystem and component.
  // Otherwise, generate a coloring error.
  if ( ( "*" == ss_prefix ) and ( "*" == obj_key_letters ) )
    select many te_classes related by te_c->TE_CLASS[R2064];
  elif ( "" == ss_prefix )
    select many te_classes related by te_c->TE_CLASS[R2064] where ( selected.Key_Lett == obj_key_letters );
  elif ( "*" == obj_key_letters )
    select any s_ss from instances of S_SS where ( selected.Name == ss_prefix );
    select many te_classes related by s_ss->O_OBJ[R2]->TE_CLASS[R2019] where ( selected.Key_Lett == obj_key_letters );
  else
    msg = msg + "ERROR:  MarkPersistentClass( ${ss_prefix}, ${obj_key_letters} ) in component ${te_c.Name}\n";
  end if;
  for each te_class in te_classes
    te_class.Persistent = true;
    msg = msg + "Class ${te_class.Name} (${te_class.Key_Lett}) in component ${te_c.Name} marked as persistent.\n";
  end for;
  if ( "" != msg )
    T::print(s:"${msg}");
  end if;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("c286faa3-320f-4a5e-aaf4-0d1ff52d9581",
	"534c2920-08ae-4fc5-b7f0-539cfffcff76",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("a20eaebc-68ed-4d4a-93f0-953a70a5d0bf",
	"534c2920-08ae-4fc5-b7f0-539cfffcff76",
	'ss_prefix',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"c286faa3-320f-4a5e-aaf4-0d1ff52d9581",
	'');
INSERT INTO S_SPARM
	VALUES ("4fed2ef8-0bf5-4fa9-b3f3-c7fede7b9e70",
	"534c2920-08ae-4fc5-b7f0-539cfffcff76",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"a20eaebc-68ed-4d4a-93f0-953a70a5d0bf",
	'');
INSERT INTO PE_PE
	VALUES ("534c2920-08ae-4fc5-b7f0-539cfffcff76",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("4e1458ce-f2f6-44d3-9e4f-a5b152cc2f4a",
	"00000000-0000-0000-0000-000000000000",
	'TagNonPersistentClass',
	'',
	'//
//============================================================================
// Disable persistent storage of the specified class or classes.
// This interface is meant to undo what the MarkPersistent interface
// does.  This way the user can tag all classes persistent and then
// unmark a few (rather than explicitly mark a whole bunch).
//============================================================================
ss_prefix = param.ss_prefix;
obj_key_letters = param.obj_key_letters;
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkNonPersistentClass( component_name:te_c.Name, ss_prefix:ss_prefix, obj_key_letters:obj_key_letters );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("04d9fab0-fa57-4232-9fab-7cdc8672ef3c",
	"4e1458ce-f2f6-44d3-9e4f-a5b152cc2f4a",
	'ss_prefix',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("fcf14c6b-4218-4e29-a78c-3b7b6bcdfc53",
	"4e1458ce-f2f6-44d3-9e4f-a5b152cc2f4a",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"04d9fab0-fa57-4232-9fab-7cdc8672ef3c",
	'');
INSERT INTO PE_PE
	VALUES ("4e1458ce-f2f6-44d3-9e4f-a5b152cc2f4a",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("6bf7b094-0dee-4ca0-aeff-20aa7ff0850e",
	"00000000-0000-0000-0000-000000000000",
	'MarkNonPersistentClass',
	'',
	'component_name = param.component_name;
ss_prefix = param.ss_prefix;
obj_key_letters = param.obj_key_letters;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  msg = "";
  // Get set into scope.
  select many te_classes related by te_c->TE_CLASS[R2064] where ( false );
  // Check for an explicit object.
  // Check for an explicit subsystem.
  // Check a star in the subsystem and component.
  // Otherwise, generate a coloring error.
  if ( ( "*" == ss_prefix ) and ( "*" == obj_key_letters ) )
    select many te_classes related by te_c->TE_CLASS[R2064];
  elif ( "" == ss_prefix )
    select many te_classes related by te_c->TE_CLASS[R2064] where ( selected.Key_Lett == obj_key_letters );
  elif ( "*" == obj_key_letters )
    select any s_ss from instances of S_SS where ( selected.Name == ss_prefix );
    select many te_classes related by s_ss->O_OBJ[R2]->TE_CLASS[R2019] where ( selected.Key_Lett == obj_key_letters );
  else
    msg = msg + "ERROR:  MarkNonPersistentClass( ${ss_prefix}, ${obj_key_letters} ) in component ${te_c.Name}\n";
  end if;
  for each te_class in te_classes
    te_class.Persistent = false;
    msg = msg + "Class ${te_class.Name} (${te_class.Key_Lett}) in component ${te_c.Name} marked as not persistent.\n";
  end for;
  if ( "" != msg )
    T::print(s:"${msg}");
  end if;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("7d35c8d7-b7eb-42f5-8b12-4459560a636c",
	"6bf7b094-0dee-4ca0-aeff-20aa7ff0850e",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("4af5360a-4b15-4b05-816f-dd5a58073a3d",
	"6bf7b094-0dee-4ca0-aeff-20aa7ff0850e",
	'ss_prefix',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"7d35c8d7-b7eb-42f5-8b12-4459560a636c",
	'');
INSERT INTO S_SPARM
	VALUES ("984e085c-d31a-45c6-b6e2-8ee388d0b924",
	"6bf7b094-0dee-4ca0-aeff-20aa7ff0850e",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"4af5360a-4b15-4b05-816f-dd5a58073a3d",
	'');
INSERT INTO PE_PE
	VALUES ("6bf7b094-0dee-4ca0-aeff-20aa7ff0850e",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("002dd1d1-1029-499c-8f1a-557d1693755f",
	"00000000-0000-0000-0000-000000000000",
	'MapClassToTask',
	'',
	'//
//============================================================================
// Map classes to tasks based upon user marking.  With this interface
// an individual class, subsystem or component can be mapped to the
// specified task.
//============================================================================
ss_prefix = param.ss_prefix;
obj_key_letters = param.obj_key_letters;
task = param.task;
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkClassToTask( component_name:te_c.Name, ss_prefix:ss_prefix, obj_key_letters:obj_key_letters, task:task );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("ebc68fe0-fc89-42c8-af59-3bab7ac76100",
	"002dd1d1-1029-499c-8f1a-557d1693755f",
	'ss_prefix',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("1d6c2e7a-5aaa-465d-9879-f13f3b8a5a2b",
	"002dd1d1-1029-499c-8f1a-557d1693755f",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"ebc68fe0-fc89-42c8-af59-3bab7ac76100",
	'');
INSERT INTO S_SPARM
	VALUES ("726ba067-145c-4d6e-9e56-af6d30328485",
	"002dd1d1-1029-499c-8f1a-557d1693755f",
	'task',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"1d6c2e7a-5aaa-465d-9879-f13f3b8a5a2b",
	'');
INSERT INTO PE_PE
	VALUES ("002dd1d1-1029-499c-8f1a-557d1693755f",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("a1193967-125b-4819-9e37-e23a4c337194",
	"00000000-0000-0000-0000-000000000000",
	'MarkClassToTask',
	'',
	'component_name = param.component_name;
ss_prefix = param.ss_prefix;
obj_key_letters = param.obj_key_letters;
task = param.task;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  // Get set into scope.
  select many te_classes related by te_c->TE_CLASS[R2064] where ( false );
  // Check for an explicit object.
  // Check for an explicit subsystem.
  // Check a star in the subsystem and component.
  // Otherwise, generate a coloring error.
  if ( ( "*" == ss_prefix ) and ( "*" == obj_key_letters ) )
    select many te_classes related by te_c->TE_CLASS[R2064];
  elif ( "" == ss_prefix )
    select many te_classes related by te_c->TE_CLASS[R2064] where ( selected.Key_Lett == obj_key_letters );
  elif ( "*" == obj_key_letters )
    select any s_ss from instances of S_SS where ( selected.Name == ss_prefix );
    select many te_classes related by s_ss->O_OBJ[R2]->TE_CLASS[R2019] where ( selected.Key_Lett == obj_key_letters );
  else
    T::print(s:"ERROR:  MapClassToTask( ${ss_prefix}, ${obj_key_letters}, $t{task} ) in component ${te_c.Name}\n");
  end if;
  for each te_class in te_classes
    te_class.Task = task;
  end for;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("f54000ce-8e84-494b-8d94-6acd1b85867e",
	"a1193967-125b-4819-9e37-e23a4c337194",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("d1730030-71d8-4813-91de-1e6bb2e7cbea",
	"a1193967-125b-4819-9e37-e23a4c337194",
	'ss_prefix',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"f54000ce-8e84-494b-8d94-6acd1b85867e",
	'');
INSERT INTO S_SPARM
	VALUES ("7a36d87c-399c-41e8-a238-5505387593da",
	"a1193967-125b-4819-9e37-e23a4c337194",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"d1730030-71d8-4813-91de-1e6bb2e7cbea",
	'');
INSERT INTO S_SPARM
	VALUES ("1b92e404-fc4e-431d-a149-ea659a68a327",
	"a1193967-125b-4819-9e37-e23a4c337194",
	'task',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"7a36d87c-399c-41e8-a238-5505387593da",
	'');
INSERT INTO PE_PE
	VALUES ("a1193967-125b-4819-9e37-e23a4c337194",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("bdfbbca6-3a93-4c8d-946d-16f42a453302",
	"00000000-0000-0000-0000-000000000000",
	'MarkAsChannel',
	'',
	'//============================================================================
// $RCSfile: m.component.arc,v $
//
// Description:
// Component level marking functions are found here.
//
// Notice:
// (C) Copyright 1998-2013 Mentor Graphics Corporation
//     All rights reserved.
//
// This document contains confidential and proprietary information and
// property of Mentor Graphics Corp.  No part of this document may be
// reproduced without the express written permission of Mentor Graphics Corp.
//============================================================================
//
//
//============================================================================
// Mark components as channels using package name and/or component
// name as the selection criteria.
//============================================================================
package_name = param.package_name;
component_name = param.component_name;
inc_file = param.inc_file;
::MarkComponentAsChannel( package_name:package_name, component_name:component_name, inc_file:inc_file );
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("4c010072-9e7d-49f7-bdb1-12461ff1d1f6",
	"bdfbbca6-3a93-4c8d-946d-16f42a453302",
	'package_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("1c7dbaf5-bcbb-4f37-bd35-9ceedb3fb23f",
	"bdfbbca6-3a93-4c8d-946d-16f42a453302",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"4c010072-9e7d-49f7-bdb1-12461ff1d1f6",
	'');
INSERT INTO S_SPARM
	VALUES ("7f5f7d5a-a3c2-431c-a9b6-205c0fb3912b",
	"bdfbbca6-3a93-4c8d-946d-16f42a453302",
	'inc_file',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"1c7dbaf5-bcbb-4f37-bd35-9ceedb3fb23f",
	'');
INSERT INTO PE_PE
	VALUES ("bdfbbca6-3a93-4c8d-946d-16f42a453302",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("d24ec67c-c70f-4f1e-b382-f4b7f555451b",
	"00000000-0000-0000-0000-000000000000",
	'MarkComponentAsChannel',
	'',
	'package_name = param.package_name;
component_name = param.component_name;
inc_file = param.inc_file;
select many c_cs from instances of C_C where ( false );
if ( ( ( "" == package_name ) and ( "" == component_name ) ) or ( ( "*" == package_name ) and ( "*" == component_name ) ) )
  // all components
  select many c_cs from instances of C_C;
elif ( ( "" == package_name ) or ( "*" == package_name ) )
  // matches without respect to package
  select many c_cs from instances of C_C where ( selected.Name == component_name );
elif ( ( "" == component_name ) or ( "*" == component_name ) )
  // all components in packages with given name
  select many ep_pkgs from instances of EP_PKG where ( selected.Name == package_name );
  select many c_cs related by ep_pkgs->PE_PE[R8000]->C_C[R8001];
else
  // particular component in particular package(s)
  select many ep_pkgs from instances of EP_PKG where ( selected.Name == package_name );
  select many c_cs related by ep_pkgs->PE_PE[R8000]->C_C[R8001] where ( selected.Name == component_name );
end if;
select many te_cs related by c_cs->TE_C[R2054];
if ( empty te_cs )
  T::print(s:"WARNING:  MarkComponentAsChannel - Could not find component ${package_name}::${component_name}.");
end if;
for each te_c in te_cs
  select one tm_c related by te_c->TM_C[R2804];
  if ( empty tm_c )
    create object instance tm_c of TM_C;
    tm_c.Package = package_name;
    tm_c.Name = component_name;
    relate te_c to tm_c across R2804;
  end if;
  tm_c.isChannel = true;
  tm_c.include_file = inc_file;
  // Now that we have marked this component as a channel modify the message names
  select many te_macts related by te_c->TE_MACT[R2002];
  for each te_mact in te_macts
    select one te_aba related by te_mact->TE_ABA[R2010];
    te_mact.GeneratedName = te_mact.MessageName;
    te_mact.GeneratedName = T::r(s:te_mact.GeneratedName);
    te_aba.GeneratedName = te_mact.GeneratedName;
  end for;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("a5089a43-60a3-4875-b7e5-926f6a03af0b",
	"d24ec67c-c70f-4f1e-b382-f4b7f555451b",
	'package_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("30525429-38ef-4411-87d4-1a189bb0a1fa",
	"d24ec67c-c70f-4f1e-b382-f4b7f555451b",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"a5089a43-60a3-4875-b7e5-926f6a03af0b",
	'');
INSERT INTO S_SPARM
	VALUES ("d32061cb-a3a4-4ec8-94de-01a665cf6887",
	"d24ec67c-c70f-4f1e-b382-f4b7f555451b",
	'inc_file',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"30525429-38ef-4411-87d4-1a189bb0a1fa",
	'');
INSERT INTO PE_PE
	VALUES ("d24ec67c-c70f-4f1e-b382-f4b7f555451b",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("c753ef3f-a716-4691-b28c-8ed8d3a1f978",
	"00000000-0000-0000-0000-000000000000",
	'MarkComponentWithTemplate',
	'',
	'//
//============================================================================
// Mark a component that has a C++ template.
//============================================================================
package_name = param.package_name;
component_name = param.component_name;
select many c_cs from instances of C_C where ( false );
if ( ( ( "" == package_name ) and ( "" == component_name ) ) or ( ( "*" == package_name ) and ( "*" == component_name ) ) )
  // all components
  select many c_cs from instances of C_C;
elif ( ( "" == package_name ) or ( "*" == package_name ) )
  // matches without respect to package
  select many c_cs from instances of C_C where ( selected.Name == component_name );
elif ( ( "" == component_name ) or ( "*" == component_name ) )
  // all components in packages with given name
  select many ep_pkgs from instances of EP_PKG where ( selected.Name == package_name );
  select many c_cs related by ep_pkgs->PE_PE[R8000]->C_C[R8001];
else
  // particular component in particular package(s)
  select many ep_pkgs from instances of EP_PKG where ( selected.Name == package_name );
  select many c_cs related by ep_pkgs->PE_PE[R8000]->C_C[R8001] where ( selected.Name == component_name );
end if;
select many te_cs related by c_cs->TE_C[R2054];
if ( empty te_cs )
  T::print(s:"WARNING:  MarkComponentWithTemplate - Could not find component ${package_name}::${component_name}.");
end if;
for each te_c in te_cs
  select one tm_c related by te_c->TM_C[R2804];
  if ( empty tm_c )
    create object instance tm_c of TM_C;
    tm_c.Package = package_name;
    tm_c.Name = component_name;
    tm_c.isChannel = false;
    tm_c.include_file = "";
  end if;
  if ( not_empty te_c )
    relate te_c to tm_c across R2804;
  end if;
  // Make the new template the current one for follow-on markings.
  select many tm_templates from instances of TM_TEMPLATE;
  for each tm_template in tm_templates
    tm_template.current = false;
  end for;
  create object instance tm_template of TM_TEMPLATE;
  tm_template.current = true;
  relate tm_template to tm_c across R2800;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("7226c60c-8510-4153-991c-483ff0846dfb",
	"c753ef3f-a716-4691-b28c-8ed8d3a1f978",
	'package_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("f7f73b40-9138-42d7-ab25-ad219f7fbb07",
	"c753ef3f-a716-4691-b28c-8ed8d3a1f978",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"7226c60c-8510-4153-991c-483ff0846dfb",
	'');
INSERT INTO PE_PE
	VALUES ("c753ef3f-a716-4691-b28c-8ed8d3a1f978",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("b5af655c-2c2c-4c98-a081-f8f21de9fdb9",
	"00000000-0000-0000-0000-000000000000",
	'MarkInterfaceWithTemplate',
	'',
	'//
//============================================================================
// Mark an interface that has a C++ template.
//============================================================================
package_name = param.package_name;
interface_name = param.interface_name;
select any c_i from instances of C_I where ( false );
if ( ( "" == package_name ) or ( "*" == package_name ) )
  select any c_i from instances of C_I where ( selected.Name == interface_name );
else
  select many ep_pkgs from instances of EP_PKG where ( selected.Name == package_name );
  select any c_i related by ep_pkgs->PE_PE[R8000]->C_I[R8001] where ( selected.Name == interface_name );
end if;
if ( empty c_i )
  T::print(s:"WARNING:  MarkInterfaceWithTemplate - Could not find interface ${package_name}::${interface_name}.");
end if;
create object instance tm_if of TM_IF;
tm_if.Package = package_name;
tm_if.Name = interface_name;
relate tm_if to c_i across R2807;
// Make the new template the current one for follow-on markings.
select many tm_templates from instances of TM_TEMPLATE;
for each tm_template in tm_templates
  tm_template.current = false;
end for;
create object instance tm_template of TM_TEMPLATE;
tm_template.current = true;
relate tm_template to tm_if across R2802;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("0f06ff24-b17b-4c90-bd04-9d3440efb395",
	"b5af655c-2c2c-4c98-a081-f8f21de9fdb9",
	'package_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("decd51d7-ab78-446f-aca1-c0234562d7ed",
	"b5af655c-2c2c-4c98-a081-f8f21de9fdb9",
	'interface_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"0f06ff24-b17b-4c90-bd04-9d3440efb395",
	'');
INSERT INTO PE_PE
	VALUES ("b5af655c-2c2c-4c98-a081-f8f21de9fdb9",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("a532b15c-f12b-4743-9d53-27383f7d90a8",
	"00000000-0000-0000-0000-000000000000",
	'AddTemplateParameter',
	'',
	'//
//============================================================================
// Add a template parameter to a C++ template.
// The template is located based upon the associated component.
//============================================================================
package_name = param.package_name;
component_name = param.component_name;
type_name = param.type_name;
variable_name = param.variable_name;
default_value = param.default_value;
select any tm_template from instances of TM_TEMPLATE where ( selected.current );
select any tm_c from instances of TM_C where ( ( selected.Package == package_name ) and ( selected.Name == component_name ) );
if ( ( "" == package_name ) or ( "*" == package_name ) )
  select any tm_c from instances of TM_C where ( selected.Name == component_name );
  if ( empty tm_c )
    select one tm_c related by tm_template->TM_C[R2800];
  end if;
end if;
if ( empty tm_c )
  select any tm_if from instances of TM_IF where ( ( selected.Package == package_name ) and ( selected.Name == component_name ) );
  if ( ( "" == package_name ) or ( "*" == package_name ) )
    select any tm_if from instances of TM_IF where ( selected.Name == component_name );
    if ( empty tm_if )
      select one tm_if related by tm_template->TM_IF[R2802];
    end if;
  end if;
  if ( empty tm_if )
    T::print(s:"ERROR:  AddTemplateParameter - Could not find element (component or interface) ${package_name}::${component_name}.");
  else
    select one tm_template related by tm_if->TM_TEMPLATE[R2802];
  end if;
else
  select one tm_template related by tm_c->TM_TEMPLATE[R2800];
end if;
if ( not_empty tm_template )
  create object instance tm_tp of TM_TP;
  relate tm_tp to tm_template across R2801;
  tm_tp.typename = type_name;
  tm_tp.Name = variable_name;
  tm_tp.DefaultValue = default_value;
else
  T::print(s:"ERROR:  AddTemplateParameter - Could not find template for element ${package_name}::${component_name}.");
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("bba371a7-9570-4c9e-83fb-116f05150076",
	"a532b15c-f12b-4743-9d53-27383f7d90a8",
	'package_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("63553565-0574-4610-be06-b2109c569d3a",
	"a532b15c-f12b-4743-9d53-27383f7d90a8",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"bba371a7-9570-4c9e-83fb-116f05150076",
	'');
INSERT INTO S_SPARM
	VALUES ("6c71a016-d325-4058-898a-9b66bc3062e6",
	"a532b15c-f12b-4743-9d53-27383f7d90a8",
	'type_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"63553565-0574-4610-be06-b2109c569d3a",
	'');
INSERT INTO S_SPARM
	VALUES ("79d38735-eb7a-4b42-adab-f862b2434e83",
	"a532b15c-f12b-4743-9d53-27383f7d90a8",
	'variable_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"6c71a016-d325-4058-898a-9b66bc3062e6",
	'');
INSERT INTO S_SPARM
	VALUES ("e3654127-da11-4efd-a67d-db8356933516",
	"a532b15c-f12b-4743-9d53-27383f7d90a8",
	'default_value',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"79d38735-eb7a-4b42-adab-f862b2434e83",
	'');
INSERT INTO PE_PE
	VALUES ("a532b15c-f12b-4743-9d53-27383f7d90a8",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("9fc14320-c1f8-497e-bbe7-77b8fe84231b",
	"00000000-0000-0000-0000-000000000000",
	'SetTemplateParameter',
	'',
	'//
//============================================================================
// Set the template parameter for an instance of a component or interface
// class.  The template is navigated based upon the associated package
// and instance.
//============================================================================
package_name = param.package_name;
instance = param.instance;
variable_name = param.variable_name;
value = param.value;
// Base selection upon the template that most recently got created.
select any tm_template from instances of TM_TEMPLATE where ( selected.current );
select one tm_c related by tm_template->TM_C[R2800];
select one tm_if related by tm_template->TM_IF[R2802];
select any tm_tp related by tm_template->TM_TP[R2801] where ( selected.Name == variable_name );
if ( ( ( "" == package_name ) or ( "" == instance ) ) or ( ( "" == variable_name ) or ( "" == value ) ) )
  T::print(s:"ERROR:  SetTemplateParameter -  Must provide valid strings for all arguments. ${package_name}::${instance}.${variable_name} to value ${value}.");
else
  select any ep_pkg from instances of EP_PKG where ( selected.Name == package_name );
  if ( empty ep_pkg )
    T::print(s:"ERROR:  SetTemplateParameter -  Package, ${package_name}, not found for ${package_name}::${instance}.${variable_name} to value ${value}.");
  end if;
  if ( not_empty tm_tp )
    if ( not_empty tm_c )
      select any te_ci related by ep_pkg->PE_PE[R8000]->CL_IC[R8001]->TE_CI[R2009] where ( selected.ClassifierName == instance );
      if ( empty te_ci )
        select any te_ci related by ep_pkg->PE_PE[R8000]->C_C[R8001]->CL_IC[R4205]->TE_CI[R2009] where ( selected.ClassifierName == instance );
      end if;
      if ( not_empty te_ci )
        create object instance tm_tpv of TM_TPV;
        tm_tpv.instance = instance;
        tm_tpv.value = value;
        relate tm_tpv to tm_tp across R2808;
        relate tm_tpv to te_ci across R2805;
              else
        T::print(s:"ERROR:  SetTemplateParameter - no component instance for ${package_name}::${instance} with name ${variable_name}.");
      end if;
    elif ( not_empty tm_if )
      select many te_iirs related by ep_pkg->PE_PE[R8000]->CL_IC[R8001]->CL_IIR[R4700]->TE_IIR[R2013] where ( ( selected.port_name == instance ) and ( selected.interface_name == tm_if.Name ) );
      for each te_iir in te_iirs
        create object instance tm_tpv of TM_TPV;
        tm_tpv.instance = instance;
        tm_tpv.value = value;
        relate tm_tpv to tm_tp across R2808;
        relate tm_tpv to te_iir across R2806;
              end for;
      select many te_iirs related by ep_pkg->PE_PE[R8000]->C_C[R8001]->CL_IC[R4205]->CL_IIR[R4700]->TE_IIR[R2013] where ( ( selected.port_name == instance ) and ( selected.interface_name == tm_if.Name ) );
      for each te_iir in te_iirs
        create object instance tm_tpv of TM_TPV;
        tm_tpv.instance = instance;
        tm_tpv.value = value;
        relate tm_tpv to tm_tp across R2808;
        relate tm_tpv to te_iir across R2806;
              end for;
      select many te_iirs related by ep_pkg->PE_PE[R8000]->C_C[R8001]->C_PO[R4010]->C_IR[R4016]->TE_IIR[R2046] where ( ( selected.port_name == instance ) and ( selected.interface_name == tm_if.Name ) );
      for each te_iir in te_iirs
        create object instance tm_tpv of TM_TPV;
        tm_tpv.instance = instance;
        tm_tpv.value = value;
        relate tm_tpv to tm_tp across R2808;
        relate tm_tpv to te_iir across R2806;
              end for;
    else
      T::print(s:"ERROR:  SetTemplateParameter - Found a template parameter for a template that is orphaned.");
    end if;
  else
    T::print(s:"WARNING:  SetTemplateParameter - Did NOT find template parameter for package ${package_name}::${instance} with name ${variable_name}.");
  end if;
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("79ac4375-bfa2-4210-b4ee-a1f23db79eae",
	"9fc14320-c1f8-497e-bbe7-77b8fe84231b",
	'package_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("71931fa4-65ce-41dd-b06f-089279c52702",
	"9fc14320-c1f8-497e-bbe7-77b8fe84231b",
	'instance',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"79ac4375-bfa2-4210-b4ee-a1f23db79eae",
	'');
INSERT INTO S_SPARM
	VALUES ("21706aab-957e-4a99-89fe-5b76cd7bcab6",
	"9fc14320-c1f8-497e-bbe7-77b8fe84231b",
	'variable_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"71931fa4-65ce-41dd-b06f-089279c52702",
	'');
INSERT INTO S_SPARM
	VALUES ("aeaa9fa4-6574-48ac-acab-3c0b254bc097",
	"9fc14320-c1f8-497e-bbe7-77b8fe84231b",
	'value',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"21706aab-957e-4a99-89fe-5b76cd7bcab6",
	'');
INSERT INTO PE_PE
	VALUES ("9fc14320-c1f8-497e-bbe7-77b8fe84231b",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("6b47bf5f-ede6-4067-a93c-a8a7e62353c6",
	"00000000-0000-0000-0000-000000000000",
	'SetTPV',
	'',
	'//
//============================================================================
// Set Template Parameter Value
//   Once components and interfaces have been marked with C++ templates
//   and all template parameters added, the template parameter values can
//   be set and associated with the appropriate component and interface
//   instances (component references and ports).
//   Set the template parameter for an instance of a component or interface
//   class.  The template is navigated based upon the associated package
//   and instance.
//============================================================================
package_name = param.package_name;
parent_component = param.parent_component;
component = param.component;
classifier_name = param.classifier_name;
port = param.port;
variable_name = param.variable_name;
value = param.value;
trace = "${package_name}::${parent_component}::${component}:${classifier_name}.${variable_name} value ${value} (and port ${port})";
if ( ( ( "" == package_name ) or ( "" == component ) ) or ( ( "" == classifier_name ) or ( ( ( "" == variable_name ) or ( "" == value ) ) ) ) )
  T::print(s:"ERROR:  SetTPV - Must provide valid strings for all arguments except the optional port, ${package_name}::${parent_component}::${component}:${classifier_name}.${variable_name} to value ${value} (and port ${port}).");
else
  select any ep_pkg from instances of EP_PKG where ( selected.Name == package_name );
  if ( empty ep_pkg )
    T::print(s:"ERROR:  SetTPV -  Package, ${package_name}, not found for ${package_name}::${parent_component}::${component}:${classifier_name}.${variable_name} to value ${value}.");
  end if;
  select many te_cis related by ep_pkg->PE_PE[R8000]->CL_IC[R8001]->TE_CI[R2009] where ( ( selected.Name == component ) and ( selected.ClassifierName == classifier_name ) );
  if ( "" != parent_component )
    select many c_cs related by ep_pkg->PE_PE[R8000]->C_C[R8001] where ( selected.Name == parent_component );
    select many te_cis related by c_cs->CL_IC[R4205]->TE_CI[R2009] where ( ( selected.Name == component ) and ( selected.ClassifierName == classifier_name ) );
  else
    if ( empty te_cis )
      select many te_cis related by ep_pkg->PE_PE[R8000]->C_C[R8001]->CL_IC[R4205]->TE_CI[R2009] where ( ( selected.Name == component ) and ( selected.ClassifierName == classifier_name ) );
    end if;
  end if;
  te_cis_count = cardinality te_cis;
  if ( te_cis_count > 1 )
    T::print(s:"WARNING:  SetTPV - More than one instantiation found for ${package_name}::${parent_component}::${component}:${classifier_name}.${variable_name} to value ${value}.");
    T::print(s:"                   All instantiations will be marked to receive the same template parameter value.");
  elif ( 0 == te_cis_count )
    T::print(s:"ERROR:  SetTPV - Component instance not found for ${package_name}::${parent_component}::${component}:${classifier_name}.");
  end if;
  if ( "" == port )
    // We are setting values for component templates.
    for each te_ci in te_cis
      select one tm_template related by te_ci->TE_C[R2008]->TM_C[R2804]->TM_TEMPLATE[R2800];
      select any tm_tp related by tm_template->TM_TP[R2801] where ( selected.Name == variable_name );
      if ( not_empty tm_tp )
        // Create the template parameter value and link it in.
        create object instance tm_tpv of TM_TPV;
        tm_tpv.instance = component;
        tm_tpv.value = value;
        relate tm_tpv to tm_tp across R2808;
        relate tm_tpv to te_ci across R2805;
              else
        T::print(s:"WARNING:  SetTPV - Template parameter not found for ${package_name}::${parent_component}::${component}:${classifier_name}.");
      end if;
    end for;
  else
    // We are setting a value for an interface template.
    for each te_ci in te_cis
      select any te_iir related by te_ci->CL_IC[R2009]->CL_IIR[R4700]->TE_IIR[R2013] where ( selected.port_name == port );
      ::SetTPV_for_channel_connection( te_iir:te_iir, variable_name:variable_name, value:value, trace:trace, flavor:0 );
    end for;
  end if;
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("bbd98ce5-a110-4ace-a95b-991d56cca611",
	"6b47bf5f-ede6-4067-a93c-a8a7e62353c6",
	'package_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("19b7f7ec-edde-468c-8c89-9a600f144e01",
	"6b47bf5f-ede6-4067-a93c-a8a7e62353c6",
	'parent_component',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"bbd98ce5-a110-4ace-a95b-991d56cca611",
	'');
INSERT INTO S_SPARM
	VALUES ("7b8eadc1-c8a7-4538-9eec-8fb40ab5c855",
	"6b47bf5f-ede6-4067-a93c-a8a7e62353c6",
	'component',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"19b7f7ec-edde-468c-8c89-9a600f144e01",
	'');
INSERT INTO S_SPARM
	VALUES ("ed38b967-847a-419f-846f-36ab0db99697",
	"6b47bf5f-ede6-4067-a93c-a8a7e62353c6",
	'classifier_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"7b8eadc1-c8a7-4538-9eec-8fb40ab5c855",
	'');
INSERT INTO S_SPARM
	VALUES ("754f9dfe-bcbc-4721-b9e4-d728057f85e7",
	"6b47bf5f-ede6-4067-a93c-a8a7e62353c6",
	'port',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"ed38b967-847a-419f-846f-36ab0db99697",
	'');
INSERT INTO S_SPARM
	VALUES ("1541df60-6364-496f-ab31-f98e985445ca",
	"6b47bf5f-ede6-4067-a93c-a8a7e62353c6",
	'variable_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"754f9dfe-bcbc-4721-b9e4-d728057f85e7",
	'');
INSERT INTO S_SPARM
	VALUES ("90681ddd-d134-4b6e-9acf-0eff04249ba9",
	"6b47bf5f-ede6-4067-a93c-a8a7e62353c6",
	'value',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"1541df60-6364-496f-ab31-f98e985445ca",
	'');
INSERT INTO PE_PE
	VALUES ("6b47bf5f-ede6-4067-a93c-a8a7e62353c6",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("d88d1b5b-2dd1-4128-927b-6d7ee6df5240",
	"00000000-0000-0000-0000-000000000000",
	'SetTPV_for_channel_connection',
	'',
	'//
// Rules
// Always start from IIR.
// On a first call, first try to cross a satisfaction from IIR.
// It is only possible to go upward on a delegation on the first call.
// After the first call, it is O.K. to cross a satisfaction after crossing
// a delegation.
// After traversing to an imported interface reference, consider marking
// the associated interface reference.  (Mark both.)
// Gather all the delegated_te_iirs into a collection and then loop through.
// This is necessary for delegations only.
// Be smart and look for only the right types in the right direction.
te_iir = param.te_iir;
variable_name = param.variable_name;
value = param.value;
trace = param.trace;
flavor = param.flavor;
select many delegated_te_iirs from instances of TE_IIR where ( false );
// flavors:  0:firstcall, 1:coming from satisfaction, 2:coming from delegation
select any tm_tp related by te_iir->C_IR[R2046]->C_I[R4012]->TM_IF[R2807]->TM_TEMPLATE[R2802]->TM_TP[R2801] where ( selected.Name == variable_name );
if ( empty tm_tp )
  select any tm_tp related by te_iir->CL_IIR[R2013]->C_IR[R4701]->C_I[R4012]->TM_IF[R2807]->TM_TEMPLATE[R2802]->TM_TP[R2801] where ( selected.Name == variable_name );
  if ( empty tm_tp )
    T::print(s:"WARNING:  SetTPV - Template parameter not found for ${trace}.");
  end if;
end if;
// Determine whether we have an interface reference for a component marked
// as a channel.  Process channel interface references on first call only.
select one tm_c related by te_iir->TE_PO[R2080]->TE_C[R2005]->TM_C[R2804];
isChannel = false;
if ( not_empty tm_c )
  isChannel = tm_c.isChannel;
end if;
// See if this template parameter already has a value for this reference.
select any tm_tpv related by te_iir->TM_TPV[R2806] where ( ( selected.instance == te_iir.interface_name ) and ( selected.tm_tpID == tm_tp.ID ) );
// If isChannel, then skip unless it is the first call.
if ( ( ( ( empty tm_tpv ) and ( not_empty tm_tp ) ) and ( not isChannel ) ) or ( 0 == flavor ) )
  //.select one te_c related by te_iir->TE_PO[R2080]->TE_C[R2005]
  //.print "${trace} ${te_iir.port_name} ${te_c.Name}"
  create object instance tm_tpv of TM_TPV;
  tm_tpv.instance = te_iir.interface_name;
  tm_tpv.value = value;
  relate tm_tpv to tm_tp across R2808;
  relate tm_tpv to te_iir across R2806;
    //
  // Find a satisfaction or delegation.  Recursively apply the same template parameter value to the connections.
  select one satisfied_te_iir related by te_iir->TE_IIR[R2081.''requires or delegates''] where ( false );
  if ( ( 0 == flavor ) or ( 2 == flavor ) )
    // iir to iir
    // Search from imported reference across satisfaction to imported reference provision to requirement.
    select many satisfied_te_iirs related by te_iir->CL_IIR[R2013]->CL_IP[R4703]->CL_IPINS[R4705]->C_SF[R4705]->CL_IR[R4706]->CL_IIR[R4703]->TE_IIR[R2013];
    if ( not_empty satisfied_te_iirs )
      for each satisfied_te_iir in satisfied_te_iirs
        ::SetTPV_for_channel_connection( te_iir:satisfied_te_iir, variable_name:variable_name, value:value, trace:" 1${trace}", flavor:1 );
      end for;
    else
      // Search from imported reference across satisfaction to imported reference requirement to provision.
      select one satisfied_te_iir related by te_iir->CL_IIR[R2013]->CL_IR[R4703]->C_SF[R4706]->CL_IPINS[R4705]->CL_IP[R4705]->CL_IIR[R4703]->TE_IIR[R2013];
      if ( not_empty satisfied_te_iir )
        ::SetTPV_for_channel_connection( te_iir:satisfied_te_iir, variable_name:variable_name, value:value, trace:" 2${trace}", flavor:1 );
      else
        // mixed iir and ir
        // Search from imported reference across satisfaction to reference imported provision to requirement.
        select many satisfied_te_iirs related by te_iir->CL_IIR[R2013]->CL_IP[R4703]->CL_IPINS[R4705]->C_SF[R4705]->C_R[R4002]->C_IR[R4009]->TE_IIR[R2046];
        if ( not_empty satisfied_te_iirs )
          for each satisfied_te_iir in satisfied_te_iirs
            ::SetTPV_for_channel_connection( te_iir:satisfied_te_iir, variable_name:variable_name, value:value, trace:" 3${trace}", flavor:1 );
          end for;
        else
          // Search from imported reference across satisfaction to reference imported requirement to provision.
          select one satisfied_te_iir related by te_iir->CL_IIR[R2013]->CL_IR[R4703]->C_SF[R4706]->C_P[R4002]->C_IR[R4009]->TE_IIR[R2046];
          if ( not_empty satisfied_te_iir )
            ::SetTPV_for_channel_connection( te_iir:satisfied_te_iir, variable_name:variable_name, value:value, trace:" 4${trace}", flavor:1 );
          else
            // Search from reference across satisfaction to reference provision to requirement.
            select any satisfied_te_iir related by te_iir->C_IR[R2046]->C_P[R4009]->C_SF[R4002]->C_R[R4002]->C_IR[R4009]->TE_IIR[R2046];
            if ( not_empty satisfied_te_iir )
              ::SetTPV_for_channel_connection( te_iir:satisfied_te_iir, variable_name:variable_name, value:value, trace:" 4a${trace}", flavor:1 );
            else
              // Search from reference across satisfaction to reference requirement to provision.
              select any satisfied_te_iir related by te_iir->C_IR[R2046]->C_R[R4009]->C_SF[R4002]->C_P[R4002]->C_IR[R4009]->TE_IIR[R2046];
              if ( not_empty satisfied_te_iir )
                ::SetTPV_for_channel_connection( te_iir:satisfied_te_iir, variable_name:variable_name, value:value, trace:" 4b${trace}", flavor:1 );
              else
                // Search from reference across satisfaction to imported reference imported provision to requirement.
                // CDS should not find these, because we already go the other mixed direction?
                //.select one satisfied_te_iir related by te_iir->C_IR[R2046]->C_P[R4009]->C_SF[R4002]->CL_IR[R4706]->CL_IIR[R4703]->TE_IIR[R2013]
                if ( not_empty satisfied_te_iir )
                  ::SetTPV_for_channel_connection( te_iir:satisfied_te_iir, variable_name:variable_name, value:value, trace:" 5${trace}", flavor:1 );
                else
                  // Search from reference across satisfaction to imported reference imported requirement to provision.
                  // CDS should not find these, because we already go the other mixed direction?
                  //.select one satisfied_te_iir related by te_iir->C_IR[R2046]->C_R[R4009]->C_SF[R4002]->CL_IPINS[R4705]->CL_IP[R4705]->CL_IIR[R4703]->TE_IIR[R2013]
                  if ( not_empty satisfied_te_iir )
                    ::SetTPV_for_channel_connection( te_iir:satisfied_te_iir, variable_name:variable_name, value:value, trace:" 6${trace}", flavor:1 );
                  end if;
                end if;
              end if;
            end if;
          end if;
        end if;
      end if;
    end if;
  end if;
  // delegation
  if ( empty satisfied_te_iir )
    select one delegated_te_iir related by satisfied_te_iir->TE_IIR[R2081.''requires or delegates''] where ( false );
    // IIR IR DG  RID IR
    select any delegated_te_iir related by te_iir->CL_IIR[R2013]->C_DG[R4704]->C_RID[R4013]->C_IR[R4013]->TE_IIR[R2046];
    if ( not_empty delegated_te_iir )
      delegated_te_iirs = delegated_te_iirs;
      trace = "7a " + trace;
    end if;
    select any delegated_te_iir related by te_iir->CL_IIR[R2013]->C_IR[R4701]->C_RID[R4013]->C_DG[R4013]->CL_IIR[R4704]->TE_IIR[R2013];
    if ( not_empty delegated_te_iir )
      delegated_te_iirs = delegated_te_iirs;
      trace = "7b " + trace;
    end if;
    //     IR DG  RID IR
    select any delegated_te_iir related by te_iir->C_IR[R2046]->C_DG[R4014]->C_RID[R4013]->C_IR[R4013]->TE_IIR[R2046];
    if ( not_empty delegated_te_iir )
      delegated_te_iirs = delegated_te_iirs;
      trace = "8a " + trace;
    end if;
    //     IR RID DG  IR
    select any delegated_te_iir related by te_iir->C_IR[R2046]->C_RID[R4013]->C_DG[R4013]->C_IR[R4014]->TE_IIR[R2046];
    if ( not_empty delegated_te_iir )
      delegated_te_iirs = delegated_te_iirs;
      trace = "8b " + trace;
    end if;
    // IIR IR DG  RID IR
    select any delegated_te_iir related by te_iir->CL_IIR[R2013]->C_IR[R4701]->C_DG[R4014]->C_RID[R4013]->C_IR[R4013]->TE_IIR[R2046];
    if ( not_empty delegated_te_iir )
      delegated_te_iirs = delegated_te_iirs;
      trace = "8c " + trace;
    end if;
    //     IR DG  RID IR IIR
    select any delegated_te_iir related by te_iir->C_IR[R2046]->C_DG[R4014]->C_RID[R4013]->C_IR[R4013]->CL_IIR[R4701]->TE_IIR[R2013];
    if ( not_empty delegated_te_iir )
      delegated_te_iirs = delegated_te_iirs;
      trace = "8d " + trace;
    end if;
    // IIR IR RID DG  IR
    select many more_delegated_te_iirs related by te_iir->CL_IIR[R2013]->C_IR[R4701]->C_RID[R4013]->C_DG[R4013]->C_IR[R4014]->TE_IIR[R2046];
    if ( not_empty more_delegated_te_iirs )
      delegated_te_iirs = delegated_te_iirs;
      trace = "8e " + trace;
    end if;
    //     IR RID DG  IR IIR
    select many more_delegated_te_iirs related by te_iir->C_IR[R2046]->C_RID[R4013]->C_DG[R4013]->C_IR[R4014]->CL_IIR[R4701]->TE_IIR[R2013];
    if ( not_empty more_delegated_te_iirs )
      delegated_te_iirs = delegated_te_iirs;
      trace = "8f " + trace;
    end if;
    // IIR IR DG  RID IR IIR
    select any delegated_te_iir related by te_iir->CL_IIR[R2013]->C_IR[R4701]->C_DG[R4014]->C_RID[R4013]->C_IR[R4013]->CL_IIR[R4701]->TE_IIR[R2013];
    if ( not_empty delegated_te_iir )
      delegated_te_iirs = delegated_te_iirs;
      trace = "8g " + trace;
    end if;
    // IIR IR RID DG  IR IIR
    select many more_delegated_te_iirs related by te_iir->CL_IIR[R2013]->C_IR[R4701]->C_RID[R4013]->C_DG[R4013]->C_IR[R4014]->CL_IIR[R4701]->TE_IIR[R2013];
    if ( not_empty more_delegated_te_iirs )
      delegated_te_iirs = delegated_te_iirs;
      trace = "8h " + trace;
    end if;
    select any delegated_te_iir related by te_iir->CL_IIR[R2013]->C_IR[R4701]->C_RID[R4013]->C_DG[R4013]->C_IR[R4014]->TE_IIR[R2046];
    if ( not_empty delegated_te_iir )
      delegated_te_iirs = delegated_te_iirs;
      trace = "B " + trace;
    end if;
    for each delegated_te_iir in delegated_te_iirs
      ::SetTPV_for_channel_connection( te_iir:delegated_te_iir, variable_name:variable_name, value:value, trace:"${trace}", flavor:2 );
    end for;
  end if;
else
  if ( empty tm_tp )
    T::print(s:"SetTPV:  warning - no variable ${te_iir.port_name} ${te_iir.interface_name}");
  end if;
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("3f68dee1-39a6-4026-935b-93611b3c7007",
	"d88d1b5b-2dd1-4128-927b-6d7ee6df5240",
	'te_iir',
	"149ddb67-8f06-43ce-87d4-ecd7ebdd1dd4",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("149ddb67-8f06-43ce-87d4-ecd7ebdd1dd4",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Interface Instance>',
	'',
	'',
	'../Translation Extensions/Translation Extensions.xtuml');
INSERT INTO S_SPARM
	VALUES ("b13bcc4b-f5ec-4fa1-95e2-ba909557d969",
	"d88d1b5b-2dd1-4128-927b-6d7ee6df5240",
	'variable_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"3f68dee1-39a6-4026-935b-93611b3c7007",
	'');
INSERT INTO S_SPARM
	VALUES ("6d8afc85-1edd-43c4-9eb8-0bc36c2d1d0c",
	"d88d1b5b-2dd1-4128-927b-6d7ee6df5240",
	'value',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"b13bcc4b-f5ec-4fa1-95e2-ba909557d969",
	'');
INSERT INTO S_SPARM
	VALUES ("08ab5094-eb02-41f8-afb0-ebbb30a0b1a8",
	"d88d1b5b-2dd1-4128-927b-6d7ee6df5240",
	'trace',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"6d8afc85-1edd-43c4-9eb8-0bc36c2d1d0c",
	'');
INSERT INTO S_SPARM
	VALUES ("aa41f799-14b7-4a5d-a225-5493afd4c5ba",
	"d88d1b5b-2dd1-4128-927b-6d7ee6df5240",
	'flavor',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"08ab5094-eb02-41f8-afb0-ebbb30a0b1a8",
	'');
INSERT INTO PE_PE
	VALUES ("d88d1b5b-2dd1-4128-927b-6d7ee6df5240",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("8006e626-de43-461a-add9-ac7567a82f59",
	"00000000-0000-0000-0000-000000000000",
	'MarkInterfacePrefix',
	'',
	'//
//============================================================================
// Mark the prefixes for the interface naming.
//============================================================================
provided_port = param.provided_port;
required_port = param.required_port;
channel = param.channel;
select any te_prefix from instances of TE_PREFIX;
te_prefix.provided_port = provided_port;
te_prefix.required_port = required_port;
te_prefix.channel = channel;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("8581b567-0dd6-4651-87fe-802eb7527157",
	"8006e626-de43-461a-add9-ac7567a82f59",
	'provided_port',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("4b065d37-b803-4c08-9864-30f9ae0211be",
	"8006e626-de43-461a-add9-ac7567a82f59",
	'required_port',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"8581b567-0dd6-4651-87fe-802eb7527157",
	'');
INSERT INTO S_SPARM
	VALUES ("640dcd28-81b3-4c18-81e2-a8331b8b1062",
	"8006e626-de43-461a-add9-ac7567a82f59",
	'channel',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"4b065d37-b803-4c08-9864-30f9ae0211be",
	'');
INSERT INTO PE_PE
	VALUES ("8006e626-de43-461a-add9-ac7567a82f59",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("675f7911-d2c8-4ba0-9fcd-e35459488da3",
	"00000000-0000-0000-0000-000000000000",
	'MarkComponentAsRealized',
	'',
	'//
//============================================================================
// Mark components as realized using package name and/or component
// name as the selection criteria.
//============================================================================
package_name = param.package_name;
component_name = param.component_name;
inc_file = param.inc_file;
select many c_cs from instances of C_C where ( false );
if ( ( ( "" == package_name ) and ( "" == component_name ) ) or ( ( "*" == package_name ) and ( "*" == component_name ) ) )
  // all components
  select many c_cs from instances of C_C;
elif ( ( "" == package_name ) or ( "*" == package_name ) )
  // matches without respect to package
  select many c_cs from instances of C_C where ( selected.Name == component_name );
elif ( ( "" == component_name ) or ( "*" == component_name ) )
  // all components in packages with given name
  select many ep_pkgs from instances of EP_PKG where ( selected.Name == package_name );
  select many c_cs related by ep_pkgs->PE_PE[R8000]->C_C[R8001];
else
  // particular component in particular package(s)
  select many ep_pkgs from instances of EP_PKG where ( selected.Name == package_name );
  select many c_cs related by ep_pkgs->PE_PE[R8000]->C_C[R8001] where ( selected.Name == component_name );
end if;
if ( empty c_cs )
  T::print(s:"WARNING:  MarkComponentAsRealized - Could not find component ${package_name}::${component_name}.");
end if;
for each c_c in c_cs
  select any tm_c from instances of TM_C where ( ( selected.Name == component_name ) and ( selected.Package == package_name ) );
  if ( empty tm_c )
    create object instance tm_c of TM_C;
    tm_c.Package = package_name;
    tm_c.Name = component_name;
  end if;
  tm_c.isRealized = true;
  tm_c.include_file = inc_file;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("224ec7ec-dca9-45ef-bea6-490163ca560d",
	"675f7911-d2c8-4ba0-9fcd-e35459488da3",
	'package_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("3f79bc2b-fa20-48f8-b14d-f352db330b91",
	"675f7911-d2c8-4ba0-9fcd-e35459488da3",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"224ec7ec-dca9-45ef-bea6-490163ca560d",
	'');
INSERT INTO S_SPARM
	VALUES ("9eea3029-5d6b-4192-8f0e-e7956e72c062",
	"675f7911-d2c8-4ba0-9fcd-e35459488da3",
	'inc_file',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"3f79bc2b-fa20-48f8-b14d-f352db330b91",
	'');
INSERT INTO PE_PE
	VALUES ("675f7911-d2c8-4ba0-9fcd-e35459488da3",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("a8cccf38-c82a-41ae-a2fe-06c40acb0dc3",
	"00000000-0000-0000-0000-000000000000",
	'TagDataTypePrecision',
	'',
	'//============================================================================
// $RCSfile: m.datatype.arc,v $
//
// Description:
// This archetype file contains the implementation functions for marks
// specified in the (user supplied/modified) datatype.clr file.
//
// Notice:
// (C) Copyright 1998-2013 Mentor Graphics Corporation
//     All rights reserved.
//
// This document contains confidential and proprietary information and
// property of Mentor Graphics Corp.  No part of this document may be
// reproduced without the express written permission of Mentor Graphics Corp.
//============================================================================
//
//============================================================================
component_name = param.component_name;
dt_name = param.dt_name;
tagged_name = param.tagged_name;
initial_value = param.initial_value;
component_name = T::r(s:component_name);
select any tm_precision from instances of TM_PRECISION where ( ( selected.Domain == component_name ) and ( selected.DT_name == dt_name ) );
if ( empty tm_precision )
  create object instance tm_precision of TM_PRECISION;
end if;
tm_precision.Domain = component_name;
tm_precision.DT_name = dt_name;
tm_precision.xName = tagged_name;
tm_precision.initial_value = initial_value;
T::print(s:"TagDataTypePrecision:  ${dt_name} in ${component_name} given ${tagged_name} precision with ${initial_value}.");
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("3c918ccd-00fd-4d52-95cb-406e079efd14",
	"a8cccf38-c82a-41ae-a2fe-06c40acb0dc3",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("0140e3ca-6ba4-421f-ac08-af1c05d970d4",
	"a8cccf38-c82a-41ae-a2fe-06c40acb0dc3",
	'dt_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"3c918ccd-00fd-4d52-95cb-406e079efd14",
	'');
INSERT INTO S_SPARM
	VALUES ("71a5e206-d712-45c8-92cc-6c543177c7b6",
	"a8cccf38-c82a-41ae-a2fe-06c40acb0dc3",
	'tagged_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"0140e3ca-6ba4-421f-ac08-af1c05d970d4",
	'');
INSERT INTO S_SPARM
	VALUES ("4779580f-ad23-4725-b575-8fcb9b7cf932",
	"a8cccf38-c82a-41ae-a2fe-06c40acb0dc3",
	'initial_value',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"71a5e206-d712-45c8-92cc-6c543177c7b6",
	'');
INSERT INTO PE_PE
	VALUES ("a8cccf38-c82a-41ae-a2fe-06c40acb0dc3",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("8354b0db-57e3-4c10-a7d6-99caff5ff7e0",
	"00000000-0000-0000-0000-000000000000",
	'MapDataTypeAsPointer',
	'',
	'//
//============================================================================
// Map a user defined data type to a pointer.  This allows the system
// to pass arbitrarily shaped data around by simply pointing to it.
//============================================================================
component_name = param.component_name;
dt_name = param.dt_name;
pointer_type = param.pointer_type;
include_file = param.include_file;
component_name = T::r(s:component_name);
select any tm_pointer from instances of TM_POINTER where ( ( selected.Domain == component_name ) and ( selected.DT_name == dt_name ) );
if ( empty tm_pointer )
  create object instance tm_pointer of TM_POINTER;
end if;
tm_pointer.Domain = component_name;
tm_pointer.DT_name = dt_name;
tm_pointer.pointer_type = pointer_type;
tm_pointer.include_file = include_file;
T::print(s:"MapDataTypeAsPointer:  ${dt_name} in ${component_name} given ${pointer_type} mapping (${include_file}).");
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("86934601-1760-4ef7-b98e-0c08ab01e78c",
	"8354b0db-57e3-4c10-a7d6-99caff5ff7e0",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("f7417e17-b74b-4adc-bbc0-ac40c7d9c9bd",
	"8354b0db-57e3-4c10-a7d6-99caff5ff7e0",
	'dt_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"86934601-1760-4ef7-b98e-0c08ab01e78c",
	'');
INSERT INTO S_SPARM
	VALUES ("b78f37b7-4fcc-4c00-b8ca-da50145f7da0",
	"8354b0db-57e3-4c10-a7d6-99caff5ff7e0",
	'pointer_type',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"f7417e17-b74b-4adc-bbc0-ac40c7d9c9bd",
	'');
INSERT INTO S_SPARM
	VALUES ("eaf64ae6-96d4-4117-8e2b-a1eeed0d68e3",
	"8354b0db-57e3-4c10-a7d6-99caff5ff7e0",
	'include_file',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"b78f37b7-4fcc-4c00-b8ca-da50145f7da0",
	'');
INSERT INTO PE_PE
	VALUES ("8354b0db-57e3-4c10-a7d6-99caff5ff7e0",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("327334a1-6ef4-4bb4-944b-bdf1a9ff01b4",
	"00000000-0000-0000-0000-000000000000",
	'TagEnumeratorDiscreteValue',
	'',
	'//
//============================================================================
// Specifying Values for Enumerators
//
// To indicate to the model compiler that a user defined enumeration
// data type enumerator (defined in the BridgePoint Subsystem Partitioning
// Model (SPM) component data editor) shall have a value other than the default,
// use the following invocation:
//
// TagEnumeratorDiscreteValue( "component", "enumeration", "enumerator", "value"
//
// Where the input parameters are:
//   component - Registered component name.  Use "*" to indicate a system wide
//     enumeration data type (to be applied to all components containing
//     the user defined enumeration data type).
//   enumeration - name of the enumeration data type as known in the
//     application analysis
//   enumerator - name of the enumerator as known in the application analysis
//   value - a string containing the value to be assigned to the enumerator
//
// Examples:
//  Domain specific:
//   .invoke TagEnumeratorDiscreteValue( "MO", "tube_wattage", "low", "4" )
//   .invoke TagEnumeratorDiscreteValue( "MO", "tube_wattage", "med", "0x20" )
//  System Wide:
//   .invoke TagEnumeratorDiscreteValue( "*", "tube_wattage", "high", "0x40" )
//
//============================================================================
component_name = param.component_name;
enumeration = param.enumeration;
enumerator = param.enumerator;
value = param.value;
component_name = T::r(s:component_name);
select any tm_enumval from instances of TM_ENUMVAL where ( ( ( selected.Domain == component_name ) and ( selected.enumeration == enumeration ) ) and ( selected.enumerator == enumerator ) );
if ( empty tm_enumval )
  create object instance tm_enumval of TM_ENUMVAL;
end if;
tm_enumval.Domain = component_name;
tm_enumval.enumeration = enumeration;
tm_enumval.enumerator = enumerator;
tm_enumval.value = value;
T::print(s:"TagEnumeratorDiscreteValue:  ${enumeration}::${enumerator} in ${component_name} given discrete value ${value}.");
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("304f9073-764c-416e-ad1c-3d0c97504b80",
	"327334a1-6ef4-4bb4-944b-bdf1a9ff01b4",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("f968e680-e0c8-497b-a0a7-8c76208ddd0b",
	"327334a1-6ef4-4bb4-944b-bdf1a9ff01b4",
	'enumeration',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"304f9073-764c-416e-ad1c-3d0c97504b80",
	'');
INSERT INTO S_SPARM
	VALUES ("a5e783b9-aa71-4406-b57e-07513da7d755",
	"327334a1-6ef4-4bb4-944b-bdf1a9ff01b4",
	'enumerator',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"f968e680-e0c8-497b-a0a7-8c76208ddd0b",
	'');
INSERT INTO S_SPARM
	VALUES ("16bf1b4c-e662-449c-aae4-da5e30f5695b",
	"327334a1-6ef4-4bb4-944b-bdf1a9ff01b4",
	'value',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"a5e783b9-aa71-4406-b57e-07513da7d755",
	'');
INSERT INTO PE_PE
	VALUES ("327334a1-6ef4-4bb4-944b-bdf1a9ff01b4",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("6e234d6e-752d-4fd1-ae90-d6a16b4ebd5f",
	"00000000-0000-0000-0000-000000000000",
	'TagUninitializedEnumerationValue',
	'',
	'//
//============================================================================
// Specifying Value for the Default Un-Initialized Enumerator
//
// To indicate to the software architecture that the un-initialized enumerator
// of an enumeration (defined in the BridgePoint Subsystem Partitioning Model
// (SPM) component data editor) shall have a value other than the default,
// use the following invocation:
//
// TagUninitializedEnumerationValue( "component", "enumeration", "value" )
//
// Where the input parameters are:
//   component - Registered component name.  Use "*" to indicate a system wide
//     enumeration data type (to be applied to all components containing
//     the user defined enumeration data type).
//   enumeration - Name of the enumeration data type as known in the
//     application analysis. Use "*" to indicate ALL enumerations.
//   value - A string containing the value to be assigned to the uninitialized
//     enumerator.
//
// Examples:
//  Domain specific:
//   .invoke TagUninitializedEnumerationValue( "MO", "tube_wattage", "4" )
//  All Enumerations in Domain:
//   .invoke TagUninitializedEnumerationValue( "MO", "*", "40" )
//  System Wide:
//   .invoke TagUninitializedEnumerationValue( "*", "tube_wattage", "20" )
//  All Enumerations in All Domains:
//   .invoke TagUninitializedEnumerationValue( "*", "*", "100" )
//
//============================================================================
component_name = param.component_name;
enumeration = param.enumeration;
value = param.value;
component_name = T::r(s:component_name);
select any tm_enuminit from instances of TM_ENUMINIT where ( ( selected.Domain == component_name ) and ( selected.enumeration == enumeration ) );
if ( empty tm_enuminit )
  create object instance tm_enuminit of TM_ENUMINIT;
end if;
tm_enuminit.Domain = component_name;
tm_enuminit.enumeration = enumeration;
tm_enuminit.value = value;
T::print(s:"TagUninitializedEnumerationValue:  ${enumeration} in ${component_name} given default uninitialized value ${value}.");
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("aaa3dd39-56b1-4c25-8a8a-acb2eba34a19",
	"6e234d6e-752d-4fd1-ae90-d6a16b4ebd5f",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("b38a66eb-7fd4-474e-92db-63ff1dfd6a49",
	"6e234d6e-752d-4fd1-ae90-d6a16b4ebd5f",
	'enumeration',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"aaa3dd39-56b1-4c25-8a8a-acb2eba34a19",
	'');
INSERT INTO S_SPARM
	VALUES ("5cb0895f-dafb-4b3b-9fd8-384b6080ab70",
	"6e234d6e-752d-4fd1-ae90-d6a16b4ebd5f",
	'value',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"b38a66eb-7fd4-474e-92db-63ff1dfd6a49",
	'');
INSERT INTO PE_PE
	VALUES ("6e234d6e-752d-4fd1-ae90-d6a16b4ebd5f",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("eb4e458a-0d62-4fff-afba-038216003044",
	"00000000-0000-0000-0000-000000000000",
	'AssignDirectToUDTPackage',
	'',
	'//
//
//============================================================================
// Specifying "Direct" manipulation to "SystemC UDT Pacakage"
//
// to indicate that this UDT package should be generated using its name
// instead of core type
//============================================================================
package_name = param.package_name;
T::print(s:"AssignDirectToUDTPackage is not a supported marking function.");
T::exit(i:1);
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("9442ae6b-5fa4-4ad0-b8d5-e08b8da00031",
	"eb4e458a-0d62-4fff-afba-038216003044",
	'package_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("eb4e458a-0d62-4fff-afba-038216003044",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("01e90281-f50e-41ca-84d8-97e326b69287",
	"00000000-0000-0000-0000-000000000000",
	'specify_user_defined_enum_type_as_external_macro',
	'',
	'//
//============================================================================
//
//-- 002: 20140122 Add Start (saitou) 
dt_name = param.dt_name;
ext_name = param.ext_name;
initial_value = param.initial_value;
include_file = param.include_file;
//	.param string ext_event_name
//
select any s_dt from instances of S_DT where ( selected.Name == dt_name );
select one s_udt related by s_dt->S_UDT[R17];
select one s_edt related by s_dt->S_EDT[R17];
//-- 002: 20140604 Modified Start (nomura)
// enum�^�ɑ΂��Ă�ExternalMacro�w�肪�L��ɂȂ�悤�ɏC������B
if ( ( not_empty s_dt ) and ( not_empty s_udt ) )
  select any s_cdt from instances of S_CDT where ( selected.DT_ID == s_udt.CDT_DT_ID );
  if ( s_cdt.Core_Typ == 4 )
    create object instance tm_dtmacro of TM_DTMACRO;
    tm_dtmacro.component = "";
    tm_dtmacro.DT_name = dt_name;
    tm_dtmacro.IsExternalMacro = true;
    tm_dtmacro.genName = ext_name;
    tm_dtmacro.Include_File = include_file;
    tm_dtmacro.Initial_Value = initial_value;
    //
    T::print(s:"specify_user_defined_enum_type_as_external_macro - Data Type ''${dt_name}'' is specified as ''${ext_name}''(initial value=''${initial_value}'') in ${include_file}");
  else
    T::print(s:"specify_user_defined_enum_type_as_external_macro - Data Type ''${dt_name}'' is not external macro ( because CoreType is not string! )");
  end if;
elif ( ( not_empty s_dt ) and ( not_empty s_edt ) )
  create object instance tm_dtmacro of TM_DTMACRO;
  tm_dtmacro.component = "";
  tm_dtmacro.DT_name = dt_name;
  tm_dtmacro.IsExternalMacro = true;
  tm_dtmacro.genName = ext_name;
  tm_dtmacro.Include_File = include_file;
  tm_dtmacro.Initial_Value = initial_value;
  //
  T::print(s:"specify_user_defined_enum_type_as_external_macro - Data Type ''${dt_name}'' is specified as ''${ext_name}''(initial value=''${initial_value}'') in ${include_file}");
else
  T::print(s:"\n  specify_user_defined_enum_type_as_external_macro - Data Type ''${dt_name}'' does not exist");
end if;
//
//-- 002: 20140604 Modified End (nomura)
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("1d24d11d-dcd1-4b2f-a3a6-e67df7dd4ca3",
	"01e90281-f50e-41ca-84d8-97e326b69287",
	'dt_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("98316c71-cad0-4f1b-a0b5-660ada820c73",
	"01e90281-f50e-41ca-84d8-97e326b69287",
	'ext_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"1d24d11d-dcd1-4b2f-a3a6-e67df7dd4ca3",
	'');
INSERT INTO S_SPARM
	VALUES ("8b386f14-3c3d-4b9b-922b-92c551568ea1",
	"01e90281-f50e-41ca-84d8-97e326b69287",
	'initial_value',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"98316c71-cad0-4f1b-a0b5-660ada820c73",
	'');
INSERT INTO S_SPARM
	VALUES ("0404eff0-b6ff-488e-bbdc-ba223b94ff1c",
	"01e90281-f50e-41ca-84d8-97e326b69287",
	'include_file',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"8b386f14-3c3d-4b9b-922b-92c551568ea1",
	'');
INSERT INTO PE_PE
	VALUES ("01e90281-f50e-41ca-84d8-97e326b69287",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("8b474769-121e-4086-a2cf-5666914f90a0",
	"00000000-0000-0000-0000-000000000000",
	'specify_user_defined_type',
	'',
	'//
dt_name = param.dt_name;
ext_name = param.ext_name;
initial_value = param.initial_value;
include_file = param.include_file;
//
select any s_dt from instances of S_DT where ( selected.Name == dt_name );
if ( empty s_dt )
  T::print(s:"\n  specify_user_defined_type - Data Type ''${dt_name}'' does not exist");
else
  create object instance tm_dtmacro of TM_DTMACRO;
  tm_dtmacro.component = "";
  tm_dtmacro.DT_name = dt_name;
  tm_dtmacro.genName = ext_name;
  tm_dtmacro.Include_File = include_file;
  tm_dtmacro.Initial_Value = initial_value;
  T::print(s:"specify_user_defined_type - Data Type ''${dt_name}'' is specified as ''${ext_name}''(initial value=''${initial_value}'') in ${include_file}");
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("97e1b995-d973-4c7b-acee-7b39ca75820c",
	"8b474769-121e-4086-a2cf-5666914f90a0",
	'dt_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("a40d6af4-8351-4006-9eb8-341cbfffa90c",
	"8b474769-121e-4086-a2cf-5666914f90a0",
	'ext_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"97e1b995-d973-4c7b-acee-7b39ca75820c",
	'');
INSERT INTO S_SPARM
	VALUES ("80dff9f3-5d28-43c7-bd9f-f44d2ad1c2df",
	"8b474769-121e-4086-a2cf-5666914f90a0",
	'initial_value',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"a40d6af4-8351-4006-9eb8-341cbfffa90c",
	'');
INSERT INTO S_SPARM
	VALUES ("cbab5d2d-2761-47ea-beeb-530ef1ed410b",
	"8b474769-121e-4086-a2cf-5666914f90a0",
	'include_file',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"80dff9f3-5d28-43c7-bd9f-f44d2ad1c2df",
	'');
INSERT INTO PE_PE
	VALUES ("8b474769-121e-4086-a2cf-5666914f90a0",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("7b9e20d8-2081-4730-861d-a0c6f39f46c4",
	"00000000-0000-0000-0000-000000000000",
	'TagFunctionTranslationOff',
	'',
	'//============================================================================
// $RCSfile: m.domain.arc,v $
//
// Description:
// This archetype file contains the implementation functions for colors
// specified in the (user supplied/modified) domain.mark file.
//
// Notice:
// (C) Copyright 1998-2013 Mentor Graphics Corporation
//     All rights reserved.
//
// This document contains confidential and proprietary information and
// property of Mentor Graphics Corp.  No part of this document may be
// reproduced without the express written permission of Mentor Graphics Corp.
//============================================================================
//
//
//============================================================================
// Disable the translation of function processing semantics.
// The default is for all functions to be translated.
//============================================================================
function_name = param.function_name;
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkFunctionTranslationOff( component_name:te_c.Name, function_name:function_name );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("e94ad3b0-c35a-4dd5-b39c-1c96d143d206",
	"7b9e20d8-2081-4730-861d-a0c6f39f46c4",
	'function_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("7b9e20d8-2081-4730-861d-a0c6f39f46c4",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("a6d82210-e647-4a95-9288-97e1e21e9381",
	"00000000-0000-0000-0000-000000000000",
	'MarkFunctionTranslationOff',
	'',
	'component_name = param.component_name;
function_name = param.function_name;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  msg = "";
  if ( "*" == function_name )
    select many te_syncs related by te_c->TE_SYNC[R2084];
    for each te_sync in te_syncs
      te_sync.XlateSemantics = FALSE;
      msg = "Turned off translation of ${te_sync.Name} function semantics.";
    end for;
  else
    select any te_sync related by te_c->TE_SYNC[R2084] where ( selected.Name == function_name );
    if ( not_empty te_sync )
      te_sync.XlateSemantics = FALSE;
      msg = "Turned off translation of ${function_name} function semantics.";
    else
      msg = "ERROR:  Function (${function_name}) not found in component ${te_c.Name}.";
      msg = msg + "\n  => TagFunctionTranslationOff( ${function_name} )";
    end if;
  end if;
  T::print(s:"${msg}");
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("8508b901-f476-42f9-b882-9001b277308b",
	"a6d82210-e647-4a95-9288-97e1e21e9381",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("9d3df448-f073-4f89-a3bd-4d7009f70a7d",
	"a6d82210-e647-4a95-9288-97e1e21e9381",
	'function_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"8508b901-f476-42f9-b882-9001b277308b",
	'');
INSERT INTO PE_PE
	VALUES ("a6d82210-e647-4a95-9288-97e1e21e9381",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("9fea45f2-39f1-4a7b-bf7b-eaa9881fce7c",
	"00000000-0000-0000-0000-000000000000",
	'TagInitializationFunction',
	'',
	'//
//============================================================================
// Mark a function as being executed during the initialization sequence.
// All functions marked with this interface will be run during bring-up.
// Functions bearing input arguments are not allowed to be tagged as
// initialization functions.
//============================================================================
function_name = param.function_name;
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkInitializationFunction( component_name:te_c.Name, function_name:function_name );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("68cc2392-db69-4b01-81f6-16f077f57dd7",
	"9fea45f2-39f1-4a7b-bf7b-eaa9881fce7c",
	'function_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("9fea45f2-39f1-4a7b-bf7b-eaa9881fce7c",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("569f587e-d613-4713-9b0e-c925c6e26510",
	"00000000-0000-0000-0000-000000000000",
	'MarkInitializationFunction',
	'',
	'component_name = param.component_name;
function_name = param.function_name;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  msg = "";
  select any te_sync related by te_c->TE_SYNC[R2084] where ( selected.Name == function_name );
  if ( not_empty te_sync )
    select any te_parm related by te_sync->TE_ABA[R2010]->TE_PARM[R2062];
    if ( empty te_parm )
      te_sync.IsInitFunction = true;
      msg = "Function ${te_sync.Name} marked as initialization function.";
    else
      msg = "ERROR:  Initialization function (${function_name}) in component ${te_c.Name}";
      msg = msg + "\ntakes arguments.  This is not allowed at initialization.";
      msg = msg + "\n  => TagInitializationFunction( ${function_name} )";
    end if;
  else
    msg = "ERROR:  Initialization function (${function_name}) not found in component ${te_c.Name}.";
    msg = msg + "\n  => TagInitializationFunction( ${function_name} )";
  end if;
  T::print(s:"${msg}");
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("0866b9c8-3896-4f33-a6d9-f73ce431ff74",
	"569f587e-d613-4713-9b0e-c925c6e26510",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("4860605a-5272-4542-8a98-46309db3bf0f",
	"569f587e-d613-4713-9b0e-c925c6e26510",
	'function_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"0866b9c8-3896-4f33-a6d9-f73ce431ff74",
	'');
INSERT INTO PE_PE
	VALUES ("569f587e-d613-4713-9b0e-c925c6e26510",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("cbcbd9d9-6963-48be-81f5-7c9de3fc1923",
	"00000000-0000-0000-0000-000000000000",
	'TagExcludeObjectFromCodeGen',
	'',
	'//
//============================================================================
obj_key_letters = param.obj_key_letters;
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkExcludeObjectFromCodeGen( component_name:te_c.Name, obj_key_letters:obj_key_letters );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("93bc2bbb-b7d3-44e0-8995-03972bc6dd9f",
	"cbcbd9d9-6963-48be-81f5-7c9de3fc1923",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("cbcbd9d9-6963-48be-81f5-7c9de3fc1923",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("a902f258-b17f-4b06-8502-4b2acba181f7",
	"00000000-0000-0000-0000-000000000000",
	'MarkExcludeObjectFromCodeGen',
	'',
	'component_name = param.component_name;
obj_key_letters = param.obj_key_letters;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  msg = "";
  select any te_class related by te_c->TE_CLASS[R2064] where ( selected.Key_Lett == obj_key_letters );
  if ( not_empty te_class )
    te_class.ExcludeFromGen = true;
    msg = "Object ${te_class.Name} (${te_class.Key_Lett}) excluded from code generation.";
  else
    msg = "ERROR:  Class (${obj_key_letters}) not found in component ${te_c.Name}";
    msg = msg + "\n => TagExcludeObjectFromCodeGen( ${obj_key_letters} )";
  end if;
  T::print(s:"${msg}");
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("ffaee80b-6dae-45f5-8231-54be4ea90ad3",
	"a902f258-b17f-4b06-8502-4b2acba181f7",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("511a183e-a8fb-40fe-8f1c-09ef8e57ddcf",
	"a902f258-b17f-4b06-8502-4b2acba181f7",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"ffaee80b-6dae-45f5-8231-54be4ea90ad3",
	'');
INSERT INTO PE_PE
	VALUES ("a902f258-b17f-4b06-8502-4b2acba181f7",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("d60094a8-0272-474f-b4d0-00eceb7a9dcc",
	"00000000-0000-0000-0000-000000000000",
	'MarkExcludeSubsystemFromCodeGen',
	'',
	'//
//============================================================================
//-- 012:20140224 Add Start (saitou) 
component_name = param.component_name;
subsystem_name = param.subsystem_name;
//
component_name = T::r(s:component_name);
select many c_cs from instances of C_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many c_cs from instances of C_C;
end if;
for each c_c in c_cs
  select many ep_pkgs related by c_c->PE_PE[R8003]->EP_PKG[R8001];
  for each ep_pkg in ep_pkgs
    // �p�b�P�[�W���@�艺���ă`�F�b�N�B�񐶐��Ώۂ��͒��Ń`�F�b�N����̂ł����ł�false.
    ::ExcludePackageFromCodeGen( ep_pkg:ep_pkg, subsystem_name:subsystem_name, isExclude:false );
  end for;
end for;
//
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("6120ce10-4b7e-4cd8-a35a-3bf63fa5e6a6",
	"d60094a8-0272-474f-b4d0-00eceb7a9dcc",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("9e8af4f4-6062-42ef-b5e0-11affffefc9f",
	"d60094a8-0272-474f-b4d0-00eceb7a9dcc",
	'subsystem_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"6120ce10-4b7e-4cd8-a35a-3bf63fa5e6a6",
	'');
INSERT INTO PE_PE
	VALUES ("d60094a8-0272-474f-b4d0-00eceb7a9dcc",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("374c7d8e-b311-4b5f-a716-a3e1fa33112a",
	"00000000-0000-0000-0000-000000000000",
	'ExcludePackageFromCodeGen',
	'',
	'///////
// ExcludePackageFromCodeGen
//      ep_pkg : Package
//      subsystem_name : �񐶐��Ώۃp�b�P�[�W��
//      isExclude : �񐶐��Ώۂ��̃t���O
//                  -- �񐶐��Ώۃp�b�P�[�W�ȉ���true�ɂ���
//
ep_pkg = param.ep_pkg;
subsystem_name = param.subsystem_name;
isExclude = param.isExclude;
//
doExclude = isExclude;
//
// �p�b�P�[�W�����w�肳�ꂽ���̂ƈ�v�����ꍇ�ɔ񐶐��ΏۂƂ���
if ( ( "${ep_pkg.Name}" == "${subsystem_name}" ) or ( "*" == "${subsystem_name}" ) )
  doExclude = true;
end if;
//
if ( doExclude )
  T::print(s:"Exclude Package : ${ep_pkg.Name}");
  select many te_classes related by ep_pkg->PE_PE[R8000]->O_OBJ[R8001]->TE_CLASS[R2019];
  for each te_class in te_classes
    te_class.ExcludeFromGen = true;
  end for;
end if;
//
// ����Ɏq�p�b�P�[�W�ɂ������p��
select many child_ep_pkgs related by ep_pkg->PE_PE[R8000]->EP_PKG[R8001];
for each child_ep_pkg in child_ep_pkgs
  ::ExcludePackageFromCodeGen( ep_pkg:child_ep_pkg, subsystem_name:subsystem_name, isExclude:doExclude );
end for;
//
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("7366bb86-fceb-4d5d-add7-3e1b1addda63",
	"374c7d8e-b311-4b5f-a716-a3e1fa33112a",
	'ep_pkg',
	"bc235622-5914-4c46-87f7-e7209f83a876",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("bc235622-5914-4c46-87f7-e7209f83a876",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Package>',
	'',
	'',
	'../Instance Reference Data Types/Instance Reference Data Types.xtuml');
INSERT INTO S_SPARM
	VALUES ("aa5e6b8c-c163-472c-8e83-7029ce1c198f",
	"374c7d8e-b311-4b5f-a716-a3e1fa33112a",
	'subsystem_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"7366bb86-fceb-4d5d-add7-3e1b1addda63",
	'');
INSERT INTO S_SPARM
	VALUES ("bdd7b1fb-a1cf-428e-97f1-feca31152c61",
	"374c7d8e-b311-4b5f-a716-a3e1fa33112a",
	'isExclude',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"aa5e6b8c-c163-472c-8e83-7029ce1c198f",
	'');
INSERT INTO PE_PE
	VALUES ("374c7d8e-b311-4b5f-a716-a3e1fa33112a",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("7cdccead-9318-44f3-9781-47137037a07d",
	"00000000-0000-0000-0000-000000000000",
	'TagExcludeSubsystemFromCodeGen',
	'',
	'//-- 012:20140224 Add End (saitou) 
subsystem_name = param.subsystem_name;
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkExcludeSubsystemFromCodeGen( component_name:te_c.Name, subsystem_name:subsystem_name );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("04426a9b-2994-4eac-aec3-dbaa828c1712",
	"7cdccead-9318-44f3-9781-47137037a07d",
	'subsystem_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("7cdccead-9318-44f3-9781-47137037a07d",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("17be55c7-77ce-4bdd-b363-3cefde64fe08",
	"00000000-0000-0000-0000-000000000000",
	'MarkExcludeSubsystemFromCodeGen_ORG',
	'',
	'//-- 012:20140224 Modified Start (saitou) 
// �I���W�i���ŁB��肪����(����K�w�ɂ����Ή����Ă��Ȃ��I)�̂Ŏg�p���Ȃ��悤�ɖ��̕ύX�B�ꉞ�R�[�h�͎c���Ă����B
component_name = param.component_name;
subsystem_name = param.subsystem_name;
//-- 012:20140224 Modified Start (saitou) 
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  msg = "";
  select many ep_pkgs related by te_c->C_C[R2054]->PE_PE[R8003]->EP_PKG[R8001]->PE_PE[R8000]->EP_PKG[R8001] where ( selected.Name == subsystem_name );
  if ( not_empty ep_pkgs )
    select many te_classes related by ep_pkgs->PE_PE[R8000]->O_OBJ[R8001]->TE_CLASS[R2019];
    for each te_class in te_classes
      te_class.ExcludeFromGen = true;
    end for;
    msg = "All classes in subsystem ${subsystem_name} excluded from code generation.";
  else
    msg = "ERROR:  Subsystem ${subsystem_name} not found in component ${te_c.Name}.";
    msg = msg + "\n => TagExcludeSubsystemFromCodeGen( ${subsystem_name} )";
  end if;
  T::print(s:"${msg}");
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("b269925b-cd4f-4ef2-bb72-1f8aea114422",
	"17be55c7-77ce-4bdd-b363-3cefde64fe08",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("2336e3ec-747e-4a57-ab5e-002c01856b39",
	"17be55c7-77ce-4bdd-b363-3cefde64fe08",
	'subsystem_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"b269925b-cd4f-4ef2-bb72-1f8aea114422",
	'');
INSERT INTO PE_PE
	VALUES ("17be55c7-77ce-4bdd-b363-3cefde64fe08",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("de3e4f17-be67-486c-aac6-4d38df6a68c9",
	"00000000-0000-0000-0000-000000000000",
	'TagStateTransitionTracingOn',
	'',
	'//
//============================================================================
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkStateTransitionTracingOn( component_name:te_c.Name );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("de3e4f17-be67-486c-aac6-4d38df6a68c9",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("10cf8e74-389e-4e22-b6b4-96cb4af61f6d",
	"00000000-0000-0000-0000-000000000000",
	'MarkStateTransitionTracingOn',
	'',
	'component_name = param.component_name;
T::print(s:"Enabling state transition tracing for component(s) ${component_name}.");
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  te_c.StateTrace = true;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("326ec844-2cfd-4a30-af3f-ca91b01b94ce",
	"10cf8e74-389e-4e22-b6b4-96cb4af61f6d",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("10cf8e74-389e-4e22-b6b4-96cb4af61f6d",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("0d99527c-a7fb-428f-919a-ddb1d966b2c5",
	"00000000-0000-0000-0000-000000000000",
	'TagActionStatementTracingOn',
	'',
	'//
//============================================================================
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkActionStatementTracingOn( component_name:te_c.Name );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("0d99527c-a7fb-428f-919a-ddb1d966b2c5",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("04d86402-b657-452f-8e77-a873548166a0",
	"00000000-0000-0000-0000-000000000000",
	'MarkActionStatementTracingOn',
	'',
	'component_name = param.component_name;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  te_c.StmtTrace = true;
  T::print(s:"Action statement tracing enabled for component ${te_c.Name}.");
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("0c62df78-e313-4065-8895-82d5f6842858",
	"04d86402-b657-452f-8e77-a873548166a0",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("04d86402-b657-452f-8e77-a873548166a0",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("c2250068-a888-4aee-b00d-83d9ac472975",
	"00000000-0000-0000-0000-000000000000",
	'MarkMessageTracingOn',
	'',
	'//
//============================================================================
component_name = param.component_name;
port_name = param.port_name;
message_name = param.message_name;
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
select many te_pos related by te_cs->TE_PO[R2005] where ( selected.Name == port_name );
if ( ( "" == port_name ) or ( "*" == port_name ) )
  select many te_pos related by te_cs->TE_PO[R2005];
end if;
select many te_macts related by te_pos->TE_MACT[R2006] where ( selected.MessageName == message_name );
if ( ( "" == message_name ) or ( "*" == message_name ) )
  select many te_macts related by te_pos->TE_MACT[R2006];
end if;
for each te_mact in te_macts
  te_mact.trace = true;
end for;
if ( empty te_macts )
  T::print(s:"Warning:  No messages found to trace for ${component_name}::${port_name}::${message_name}.");
else
  T::print(s:"Message tracing enabled for ${component_name}::${port_name}::${message_name}.");
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("898715b7-e9e6-4466-b12d-68d026b9f0b9",
	"c2250068-a888-4aee-b00d-83d9ac472975",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("ac276bc6-e404-4abe-875b-1e7a8cef8d89",
	"c2250068-a888-4aee-b00d-83d9ac472975",
	'port_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"898715b7-e9e6-4466-b12d-68d026b9f0b9",
	'');
INSERT INTO S_SPARM
	VALUES ("d26e7691-664c-4daa-b221-9111fe32fd57",
	"c2250068-a888-4aee-b00d-83d9ac472975",
	'message_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"ac276bc6-e404-4abe-875b-1e7a8cef8d89",
	'');
INSERT INTO PE_PE
	VALUES ("c2250068-a888-4aee-b00d-83d9ac472975",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("0be690cd-16c8-4252-bb6d-8a6d8b7a133e",
	"00000000-0000-0000-0000-000000000000",
	'TagEmptyHandleDetectionOn',
	'',
	'//
//============================================================================
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkEmptyHandleDetectionOn( component_name:te_c.Name );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("0be690cd-16c8-4252-bb6d-8a6d8b7a133e",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("88f11872-501f-4686-b070-ef50de39cb6c",
	"00000000-0000-0000-0000-000000000000",
	'MarkEmptyHandleDetectionOn',
	'',
	'component_name = param.component_name;
T::print(s:"Enabling detection of empty handles for component(s) ${component_name}.");
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  te_c.DetectEmpty = true;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("53e36edb-79c5-463f-8fd5-65541c846e36",
	"88f11872-501f-4686-b070-ef50de39cb6c",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("88f11872-501f-4686-b070-ef50de39cb6c",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("56cc8e2e-5b25-4d09-926c-b2c0b428673e",
	"00000000-0000-0000-0000-000000000000",
	'TagFirstPassOptimizationsOff',
	'',
	'//
//============================================================================
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkFirstPassOptimizationsOff( component_name:te_c.Name );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("56cc8e2e-5b25-4d09-926c-b2c0b428673e",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("eabf9c75-0ec2-4f24-a25e-80663a22064f",
	"00000000-0000-0000-0000-000000000000",
	'MarkFirstPassOptimizationsOff',
	'',
	'component_name = param.component_name;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  te_c.OptDisabled = true;
  T::print(s:"Code optimizations DISABLED for component ${te_c.Name}");
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("673ba9a6-479f-45cd-bc6a-bebc2993f276",
	"eabf9c75-0ec2-4f24-a25e-80663a22064f",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("eabf9c75-0ec2-4f24-a25e-80663a22064f",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("21e289fe-7bac-4ef6-af2d-227a942d13a5",
	"00000000-0000-0000-0000-000000000000",
	'TagStateActionCommentBlocksEnabled',
	'',
	'//
//============================================================================
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkStateActionCommentBlocksEnabled( component_name:te_c.Name );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("21e289fe-7bac-4ef6-af2d-227a942d13a5",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("2fdb7959-2b07-4a86-ba0c-b4bef82b97a4",
	"00000000-0000-0000-0000-000000000000",
	'MarkStateActionCommentBlocksEnabled',
	'',
	'component_name = param.component_name;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  te_c.RawComments = true;
  T::print(s:"State action sematics will be included as comments for component ${te_c.Name}.");
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("2a3886bf-16fb-444e-99ed-b33cb5ca56b5",
	"2fdb7959-2b07-4a86-ba0c-b4bef82b97a4",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("2fdb7959-2b07-4a86-ba0c-b4bef82b97a4",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("3a5e5c59-0f52-436b-9365-a55e80806c7e",
	"00000000-0000-0000-0000-000000000000",
	'TagStateActionStatementCommentsDisabled',
	'',
	'//
//============================================================================
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkStateActionStatementCommentsDisabled( component_name:te_c.Name );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("3a5e5c59-0f52-436b-9365-a55e80806c7e",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("aa9c76f8-7428-45c1-94ad-7a0c04a5bbd4",
	"00000000-0000-0000-0000-000000000000",
	'MarkStateActionStatementCommentsDisabled',
	'',
	'component_name = param.component_name;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  te_c.CodeComments = false;
  T::print(s:"State action statement level comments disabled for component ${te_c.Name}");
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("5dc90790-44d9-4aea-aeed-5d30e5270099",
	"aa9c76f8-7428-45c1-94ad-7a0c04a5bbd4",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("aa9c76f8-7428-45c1-94ad-7a0c04a5bbd4",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("8b7230ba-c81e-423a-82fb-453d4efd3702",
	"00000000-0000-0000-0000-000000000000",
	'TagStateActionVariableNamesEnabled',
	'',
	'//
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("8b7230ba-c81e-423a-82fb-453d4efd3702",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("33a7aa2d-3449-4c40-87bd-265b8491f3f8",
	"00000000-0000-0000-0000-000000000000",
	'TagVerboseReflexivePhrasesEnabled',
	'',
	'//
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("33a7aa2d-3449-4c40-87bd-265b8491f3f8",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("6edf5939-2734-4db3-bbcf-1f9efcc64398",
	"00000000-0000-0000-0000-000000000000",
	'MarkPortWiring',
	'',
	'//
//
// Mark a port as having a component attached even though the component
// is not present in the model.
//
// .invoke MarkPortWiring( <home_component>, <home_port>, <foreign_component>, <foreign_port> )
// where:
//  <home_component> is the local component name.
//  <home_port> is the local port name.
//  <foreign_component> is the name of the component on the other side of
//                      the interface.
//  <foreign_port> is the name of the port on the other side of the interface.
//
//
home_component = param.home_component;
home_port = param.home_port;
foreign_component = param.foreign_component;
foreign_port = param.foreign_port;
select many te_cs from instances of TE_C where ( ( selected.Name == home_component ) and ( selected.included_in_build ) );
select many te_pos related by te_cs->TE_PO[R2005] where ( selected.Name == home_port );
::MarkPortWiringForPort( te_pos:te_pos, component:foreign_component, port:foreign_port );
select many te_cs from instances of TE_C where ( ( selected.Name == foreign_component ) and ( selected.included_in_build ) );
select many te_pos related by te_cs->TE_PO[R2005] where ( selected.Name == foreign_port );
::MarkPortWiringForPort( te_pos:te_pos, component:home_component, port:home_port );
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("fe63f237-c4f1-40ea-9bfb-90c38c92ee8d",
	"6edf5939-2734-4db3-bbcf-1f9efcc64398",
	'home_component',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("b446a350-de48-4792-b22a-91721e965327",
	"6edf5939-2734-4db3-bbcf-1f9efcc64398",
	'home_port',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"fe63f237-c4f1-40ea-9bfb-90c38c92ee8d",
	'');
INSERT INTO S_SPARM
	VALUES ("93e5414f-19b1-45c9-9f09-738cf9bcd01c",
	"6edf5939-2734-4db3-bbcf-1f9efcc64398",
	'foreign_component',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"b446a350-de48-4792-b22a-91721e965327",
	'');
INSERT INTO S_SPARM
	VALUES ("6a3d6d92-6050-4c45-a34b-bd2d204b341a",
	"6edf5939-2734-4db3-bbcf-1f9efcc64398",
	'foreign_port',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"93e5414f-19b1-45c9-9f09-738cf9bcd01c",
	'');
INSERT INTO PE_PE
	VALUES ("6edf5939-2734-4db3-bbcf-1f9efcc64398",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("ef348ef3-419c-4b01-9937-9d39da34801a",
	"00000000-0000-0000-0000-000000000000",
	'MarkPortWiringForPort',
	'',
	'//
te_pos = param.te_pos;
component = param.component;
port = param.port;
for each te_po in te_pos
  select many te_iirs related by te_po->TE_IIR[R2080];
  for each te_iir in te_iirs
    if ( te_po.Provision )
      select many sibling_te_iirs related by te_iir->TE_IIR[R2081.''provides or is delegated''];
      if ( empty sibling_te_iirs )
        create object instance sibling_te_iir of TE_IIR;
        sibling_te_iir.component_name = component;
        sibling_te_iir.port_name = port;
        sibling_te_iir.interface_name = te_po.InterfaceName;
        sibling_te_iir.polymorphic = false;
                                relate sibling_te_iir to te_iir across R2081.''requires or delegates'';
      end if;
    else
      select one sibling_te_iir related by te_iir->TE_IIR[R2081.''requires or delegates''];
      if ( empty sibling_te_iir )
        create object instance sibling_te_iir of TE_IIR;
        sibling_te_iir.component_name = component;
        sibling_te_iir.port_name = port;
        sibling_te_iir.interface_name = te_po.InterfaceName;
        sibling_te_iir.polymorphic = false;
                                relate sibling_te_iir to te_iir across R2081.''requires or delegates'';
      end if;
    end if;
  end for;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("0961e210-9ae3-4eaa-8fa9-67fd4426aa28",
	"ef348ef3-419c-4b01-9937-9d39da34801a",
	'te_pos',
	"dc54b007-00da-455e-b263-9baac45247c0",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("dc54b007-00da-455e-b263-9baac45247c0",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref_set<Extended Port>',
	'',
	'',
	'../Translation Extensions/Translation Extensions.xtuml');
INSERT INTO S_SPARM
	VALUES ("ff47b2df-b4e6-4677-9fe1-f15d7a561b66",
	"ef348ef3-419c-4b01-9937-9d39da34801a",
	'component',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"0961e210-9ae3-4eaa-8fa9-67fd4426aa28",
	'');
INSERT INTO S_SPARM
	VALUES ("5831f94c-e32e-4767-8f28-e1528ddac581",
	"ef348ef3-419c-4b01-9937-9d39da34801a",
	'port',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"ff47b2df-b4e6-4677-9fe1-f15d7a561b66",
	'');
INSERT INTO PE_PE
	VALUES ("ef348ef3-419c-4b01-9937-9d39da34801a",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("39295a1e-b798-4877-93ea-7a66ea3dbc62",
	"00000000-0000-0000-0000-000000000000",
	'TagDispatchFlavor',
	'',
	'//============================================================================
// $RCSfile: m.event.arc,v $
//
// Description:
// This archetype file contains the implementation functions for colors
// specified in the (user supplied/modified) event.clr file.
//
// Notice:
// (C) Copyright 1998-2013 Mentor Graphics Corporation
//     All rights reserved.
// Enhancements provided by TOYO Corporation.
//
// This document contains confidential and proprietary information and
// property of Mentor Graphics Corp.  No part of this document may be
// reproduced without the express written permission of Mentor Graphics Corp.
//============================================================================
//
//
//============================================================================
// Choose the type of dispatcher to run.  Zero is the default.
// Selecting 2 will provide a single system level event dispatcher.
//============================================================================
flavor = param.flavor;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("11a5ef1c-b992-451c-920c-8ef9962b3fd8",
	"39295a1e-b798-4877-93ea-7a66ea3dbc62",
	'flavor',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("39295a1e-b798-4877-93ea-7a66ea3dbc62",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("30747418-3d5b-4c1a-a54d-e1e0e148a30e",
	"00000000-0000-0000-0000-000000000000",
	'TagPriorityEvent',
	'',
	'//
//============================================================================
// Color event to higher than default priority.
//============================================================================
evt_label = param.evt_label;
priority_value = param.priority_value;
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkPriorityEvent( component_name:te_c.Name, evt_label:evt_label, priority_value:priority_value );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("a8ef7ded-47b9-4c85-833f-ffa109015be4",
	"30747418-3d5b-4c1a-a54d-e1e0e148a30e",
	'evt_label',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("7778f069-5aa3-4af6-b7dd-986876eef6e2",
	"30747418-3d5b-4c1a-a54d-e1e0e148a30e",
	'priority_value',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"a8ef7ded-47b9-4c85-833f-ffa109015be4",
	'');
INSERT INTO PE_PE
	VALUES ("30747418-3d5b-4c1a-a54d-e1e0e148a30e",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("866a2b2f-120f-498c-9f80-dc11b929fd3b",
	"00000000-0000-0000-0000-000000000000",
	'MarkPriorityEvent',
	'',
	'component_name = param.component_name;
evt_label = param.evt_label;
priority_value = param.priority_value;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  msg = "";
  //
  // Check for legal range on input priority.
  //
  if ( ( priority_value > 255 ) or ( priority_value < 0 ) )
    msg = "ERROR:  Priority ($t{priority_value}) out of legal range (0-255).";
  end if;
  //
  // Store the priority of the event in an attribute.
  //
  select any sm_evt related by te_c->TE_CLASS[R2064]->O_OBJ[R2019]->SM_ISM[R518]->SM_SM[R517]->SM_EVT[R502] where ( selected.Drv_Lbl == evt_label );
  if ( empty sm_evt )
    select any sm_evt related by te_c->TE_CLASS[R2064]->O_OBJ[R2019]->SM_ASM[R519]->SM_SM[R517]->SM_EVT[R502] where ( selected.Drv_Lbl == evt_label );
  end if;
  if ( not_empty sm_evt )
    //
    // We are not allowing prioritized polymorphic events... yet.
    //
    select one sm_pevt related by sm_evt->SM_PEVT[R525];
    if ( not_empty sm_pevt )
      msg = "ERROR:  Prioritized Polymorphic Event (${evt_label}) component ${te_c.Name}";
      msg = msg + "\nPriority Polys are not supported.";
    end if;
    select one te_evt related by sm_evt->TE_EVT[R2036];
    te_evt.Priority = priority_value;
    msg = "Event ${sm_evt.Drv_Lbl}:${sm_evt.Mning} marked as priority event.";
  else
    msg = "ERROR:  Event (${evt_label}) not found in component ${te_c.Name}";
  end if;
  msg = msg + " => TagPriorityEvent( ${evt_label}, $t{priority_value} )";
  T::print(s:"${msg}");
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("abbb3b8e-5443-44db-9d88-fed8a8024876",
	"866a2b2f-120f-498c-9f80-dc11b929fd3b",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("e49bed76-9f38-4277-a9c1-997f25e6e460",
	"866a2b2f-120f-498c-9f80-dc11b929fd3b",
	'evt_label',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"abbb3b8e-5443-44db-9d88-fed8a8024876",
	'');
INSERT INTO S_SPARM
	VALUES ("ecbc5fde-95bc-42d0-90b0-063555d09088",
	"866a2b2f-120f-498c-9f80-dc11b929fd3b",
	'priority_value',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"e49bed76-9f38-4277-a9c1-997f25e6e460",
	'');
INSERT INTO PE_PE
	VALUES ("866a2b2f-120f-498c-9f80-dc11b929fd3b",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("c7300824-c94f-4dae-939b-ee9026afe36e",
	"00000000-0000-0000-0000-000000000000",
	'EnableTasking',
	'',
	'//============================================================================
// $RCSfile: m.system.arc,v $
//
// Description:
// System level coloring functions are found here.
// Notice that the colors that would normally update TE_SYS are active.
//
// Notice:
// (C) Copyright 1998-2013 Mentor Graphics Corporation
//     All rights reserved.
// Enhancements provided by TOYO Corporation.
//
// This document contains confidential and proprietary information and
// property of Mentor Graphics Corp.  No part of this document may be
// reproduced without the express written permission of Mentor Graphics Corp.
//============================================================================
//
//
//============================================================================
// Enable tasking/threading.
//============================================================================
flavor = param.flavor;
serialize = param.serialize;
number_of_threads = param.number_of_threads;
//
T::print(s:"EnableTasking( ${flavor}, ${serialize}, $t{number_of_threads} )");
select any tm_thread from instances of TM_THREAD;
if ( empty tm_thread )
  create object instance tm_thread of TM_THREAD;
  tm_thread.extra_initialization = "";
end if;
tm_thread.number_of_threads = number_of_threads;
if ( T::l(s:serialize) == "serialize" )
  tm_thread.serialize = true;
else
  tm_thread.serialize = false;
end if;
if ( ( ( ( "Nucleus" == flavor ) or ( "POSIX" == flavor ) ) or ( ( "OSX" == flavor ) or ( "Windows" == flavor ) ) ) or ( ( "AUTOSAR" == flavor ) or ( "SystemC" == flavor ) ) )
  tm_thread.flavor = flavor;
  if ( "SystemC" == flavor )
    // SystemC uses a single thread inside each component.
    // So, no need for an array of threads.
    tm_thread.number_of_threads = 1;
    tm_thread.enabled = false;
  else
    tm_thread.enabled = true;
  end if;
else
  T::print(s:"ERROR:  system.mark:EnableTasking has incorrect tasking/threading type:${flavor}.\n");
  T::exit(i:100);
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("998cf7cc-3c6d-4cb5-8e90-f665740db27b",
	"c7300824-c94f-4dae-939b-ee9026afe36e",
	'flavor',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("b196854c-2a17-4ff3-a567-78a24dab5ea5",
	"c7300824-c94f-4dae-939b-ee9026afe36e",
	'serialize',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"998cf7cc-3c6d-4cb5-8e90-f665740db27b",
	'');
INSERT INTO S_SPARM
	VALUES ("b8838491-2c90-4fb3-82bf-74e13b71b55d",
	"c7300824-c94f-4dae-939b-ee9026afe36e",
	'number_of_threads',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"b196854c-2a17-4ff3-a567-78a24dab5ea5",
	'');
INSERT INTO PE_PE
	VALUES ("c7300824-c94f-4dae-939b-ee9026afe36e",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("ed55a8a6-2d12-4346-81fc-e82e25db398a",
	"00000000-0000-0000-0000-000000000000",
	'SetTaskPriority',
	'',
	'//
//============================================================================
// Establish task priority.
//============================================================================
task_number = param.task_number;
priority = param.priority;
T::print(s:"SetTaskPriority( $t{task_number}, ${priority} )");
select any tm_thread from instances of TM_THREAD;
if ( empty tm_thread )
  create object instance tm_thread of TM_THREAD;
end if;
tm_thread.extra_initialization = tm_thread.extra_initialization + "  xtUML_task_priorities[ $t{task_number} ] = ${priority};\n";
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("d8258619-10ef-44b2-8af9-0f52cdae9bb2",
	"ed55a8a6-2d12-4346-81fc-e82e25db398a",
	'task_number',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("89bce9e3-c785-4954-a4a7-a87cff7e522e",
	"ed55a8a6-2d12-4346-81fc-e82e25db398a",
	'priority',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"d8258619-10ef-44b2-8af9-0f52cdae9bb2",
	'');
INSERT INTO PE_PE
	VALUES ("ed55a8a6-2d12-4346-81fc-e82e25db398a",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("6ef3c23d-9297-4a81-9320-685592960a9d",
	"00000000-0000-0000-0000-000000000000",
	'TagMaximumStringLength',
	'',
	'//
//============================================================================
max_len = param.max_len;
r = ::TM_SYSTAG_select();
tm_systag = r;
tm_systag.MaxStringLen = max_len;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("841f0e42-37b3-49ba-a98a-f07dfb1edd03",
	"6ef3c23d-9297-4a81-9320-685592960a9d",
	'max_len',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("6ef3c23d-9297-4a81-9320-685592960a9d",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("26e3e9d8-b9bf-4407-abcd-1759cc475f86",
	"00000000-0000-0000-0000-000000000000",
	'TagMaximumRelationshipExtentSize',
	'',
	'//
//============================================================================
user_specified_size = param.user_specified_size;
r = ::TM_SYSTAG_select();
tm_systag = r;
tm_systag.MaxRelExtent = user_specified_size;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("621c4a2b-9719-487e-b20a-969831a56e2b",
	"26e3e9d8-b9bf-4407-abcd-1759cc475f86",
	'user_specified_size',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("26e3e9d8-b9bf-4407-abcd-1759cc475f86",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("cd4bae88-a44e-44cc-9c10-599e3b10bbc1",
	"00000000-0000-0000-0000-000000000000",
	'TagMaximumSelectionExtentSize',
	'',
	'//
//============================================================================
user_specified_size = param.user_specified_size;
r = ::TM_SYSTAG_select();
tm_systag = r;
tm_systag.MaxSelectExtent = user_specified_size;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("6c990140-3142-434e-a59e-1f944a85075c",
	"cd4bae88-a44e-44cc-9c10-599e3b10bbc1",
	'user_specified_size',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("cd4bae88-a44e-44cc-9c10-599e3b10bbc1",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("8dbbf7d4-3fb7-4c7c-a8b0-e64dd77c2b11",
	"00000000-0000-0000-0000-000000000000",
	'TagMaximumSelfDirectedEvents',
	'',
	'//
//============================================================================
user_specified_size = param.user_specified_size;
r = ::TM_SYSTAG_select();
tm_systag = r;
tm_systag.MaxSelfEvents = user_specified_size;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("93e2572d-f7fc-4d5f-a5ef-e2dfacc62d56",
	"8dbbf7d4-3fb7-4c7c-a8b0-e64dd77c2b11",
	'user_specified_size',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("8dbbf7d4-3fb7-4c7c-a8b0-e64dd77c2b11",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("073429bf-8734-4247-b363-662cbe4cd347",
	"00000000-0000-0000-0000-000000000000",
	'TagMaximumNonSelfDirectedEvents',
	'',
	'//
//============================================================================
user_specified_size = param.user_specified_size;
r = ::TM_SYSTAG_select();
tm_systag = r;
tm_systag.MaxNonSelfEvents = user_specified_size;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("935e9aab-0dc3-4948-ab01-9e023d036e63",
	"073429bf-8734-4247-b363-662cbe4cd347",
	'user_specified_size',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("073429bf-8734-4247-b363-662cbe4cd347",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("8189450e-e68c-4c9a-a024-5ad78136b827",
	"00000000-0000-0000-0000-000000000000",
	'TagMaximumPendingOoaTimers',
	'',
	'//
//============================================================================
user_specified_size = param.user_specified_size;
r = ::TM_SYSTAG_select();
tm_systag = r;
tm_systag.MaxTimers = user_specified_size;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("9995a1d3-e026-4a3a-8341-1cfc3c7f11ab",
	"8189450e-e68c-4c9a-a024-5ad78136b827",
	'user_specified_size',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("8189450e-e68c-4c9a-a024-5ad78136b827",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("8e40f12e-7fa4-4556-955a-90c3dfb0962f",
	"00000000-0000-0000-0000-000000000000",
	'TagMaximumInterleavedBridges',
	'',
	'//
//============================================================================
user_specified_size = param.user_specified_size;
r = ::TM_SYSTAG_select();
tm_systag = r;
tm_systag.MaxInterleavedBridges = user_specified_size;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("5e296c73-f646-4b77-945c-8e3664aaae1e",
	"8e40f12e-7fa4-4556-955a-90c3dfb0962f",
	'user_specified_size',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("8e40f12e-7fa4-4556-955a-90c3dfb0962f",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("ffdf9e7a-4ddf-4ff0-8427-f8cfec5e7744",
	"00000000-0000-0000-0000-000000000000",
	'TagInterleavedBridgeDataSize',
	'',
	'//
//============================================================================
user_specified_size = param.user_specified_size;
r = ::TM_SYSTAG_select();
tm_systag = r;
tm_systag.MaxInterleavedBridgeDataSize = user_specified_size;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("31031f7e-dc68-4d61-9dec-5445d3d14986",
	"ffdf9e7a-4ddf-4ff0-8427-f8cfec5e7744",
	'user_specified_size',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("ffdf9e7a-4ddf-4ff0-8427-f8cfec5e7744",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("57125749-0c38-4a10-8ecf-89ab35da5004",
	"00000000-0000-0000-0000-000000000000",
	'TagCollectionsFlavor',
	'',
	'//
//============================================================================
// Use doubly linked lists for collections.  This speeds up deletes.
//============================================================================
collections_flavor = param.collections_flavor;
r = ::TM_SYSTAG_select();
tm_systag = r;
tm_systag.CollectionsFlavor = collections_flavor;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("42f86fd2-d0cf-4918-ae14-000c1d50947f",
	"57125749-0c38-4a10-8ecf-89ab35da5004",
	'collections_flavor',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("57125749-0c38-4a10-8ecf-89ab35da5004",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("bfc69517-3ee2-4342-948f-5dc03ef9af19",
	"00000000-0000-0000-0000-000000000000",
	'MarkPersistenceCacheDepth',
	'',
	'//
//============================================================================
// Mark Depth of Persistence Cache Queue
//
// This color is used to specify the maximum number of instances and
// links that can be queued waiting to be flushed to non-volatile
// storage (NVS).  As instances and links become "dirty" they get
// queued to NVS.  When Persist::Commit is called this queue is flushed.
//
// MarkPersistenceCacheDepth( instance_depth, link_depth )
//
// Where the input parameter(s) are:
//   instance_depth = the integer depth of the linked list of instances
//   link_depth = the integer depth of the linked list of persistent links
//============================================================================
instance_depth = param.instance_depth;
link_depth = param.link_depth;
r = ::TM_SYSTAG_select();
tm_systag = r;
tm_systag.PersistInstanceCacheDepth = instance_depth;
tm_systag.PersistLinkCacheDepth = link_depth;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("1813859a-002f-4cd2-9d55-63bd65912a13",
	"bfc69517-3ee2-4342-948f-5dc03ef9af19",
	'instance_depth',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("7dbfc9ca-a88a-43d0-bf79-3e7420d156e0",
	"bfc69517-3ee2-4342-948f-5dc03ef9af19",
	'link_depth',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"1813859a-002f-4cd2-9d55-63bd65912a13",
	'');
INSERT INTO PE_PE
	VALUES ("bfc69517-3ee2-4342-948f-5dc03ef9af19",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("87ce69ce-ce34-4f62-bef7-0d6e612c1194",
	"00000000-0000-0000-0000-000000000000",
	'TagDynamicMemoryAllocationOn',
	'',
	'//
//============================================================================
units_to_allocate = param.units_to_allocate;
r = ::TM_SYSTAG_select();
tm_systag = r;
tm_systag.UnitsToDynamicallyAllocate = units_to_allocate;
if ( tm_systag.UnitsToDynamicallyAllocate < 1 )
  tm_systag.UnitsToDynamicallyAllocate = 1;
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("7a519d21-7121-4b75-948b-1e3499f78528",
	"87ce69ce-ce34-4f62-bef7-0d6e612c1194",
	'units_to_allocate',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("87ce69ce-ce34-4f62-bef7-0d6e612c1194",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("884e3086-8432-4d12-a529-a76db59e6779",
	"00000000-0000-0000-0000-000000000000",
	'TagInstanceLoading',
	'',
	'//
//============================================================================
r = ::TM_SYSTAG_select();
tm_systag = r;
tm_systag.InstanceLoading = true;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("884e3086-8432-4d12-a529-a76db59e6779",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("403acecd-7bb5-4fed-9766-c2940aa95262",
	"00000000-0000-0000-0000-000000000000",
	'VFBEnable',
	'',
	'//
//============================================================================
// Enable Virtual Function Bus (VFB) for AUTOSAR.
//============================================================================
r = ::TM_SYSTAG_select();
tm_systag = r;
tm_systag.VFB = true;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("403acecd-7bb5-4fed-9766-c2940aa95262",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("c32b79ae-17b5-40ea-8db9-43e5b301201e",
	"00000000-0000-0000-0000-000000000000",
	'TM_SYSTAG_select',
	'',
	'//
select any tm_systag from instances of TM_SYSTAG;
if ( empty tm_systag )
  create object instance tm_systag of TM_SYSTAG;
  tm_systag.MaxStringLen = 32;
  tm_systag.PersistInstanceCacheDepth = 128;
  tm_systag.PersistLinkCacheDepth = 128;
  tm_systag.SystemCPortsType = "sc_interface";
end if;
return tm_systag;
',
	"67a6ef0a-7a73-4370-9d87-d743c0801099",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("c32b79ae-17b5-40ea-8db9-43e5b301201e",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_DT_PROXY
	VALUES ("67a6ef0a-7a73-4370-9d87-d743c0801099",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<System Tags>',
	'',
	'',
	'../Translation Marking/Translation Marking.xtuml');
INSERT INTO S_SYNC
	VALUES ("a39b269a-f3ac-4909-922e-26b6eb78c556",
	"00000000-0000-0000-0000-000000000000",
	'MarkSystemConfigurationPackage',
	'',
	'//
//============================================================================
// Mark a package as containing the system configuration.  Code will be
// generated for components contained in this package (and referred to
// from this package).
//============================================================================
package_name = param.package_name;
select any tm_build from instances of TM_BUILD;
if ( empty tm_build )
  create object instance tm_build of TM_BUILD;
else
  T::print(s:"Warning:  Re-marking system configuration.  Last configuration marked will be built.");
end if;
tm_build.package_to_build = package_name;
tm_build.package_obj_name = package_name + "_sys";
tm_build.package_inst_name = package_name + "_top";
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("6eb036cc-c2ef-49c2-95e8-2c2e8eab4b9f",
	"a39b269a-f3ac-4909-922e-26b6eb78c556",
	'package_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("a39b269a-f3ac-4909-922e-26b6eb78c556",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("ff6e2892-001d-45c1-b8b9-282678499217",
	"00000000-0000-0000-0000-000000000000",
	'MarkSystemCPortType',
	'',
	'//
//============================================================================
// Enable Channel binding instead of Signal Binding.
//============================================================================
port_type = param.port_type;
r = ::TM_SYSTAG_select();
tm_systag = r;
if ( ( ( port_type == "TLM" ) or ( port_type == "BitLevelSignals" ) ) or ( port_type == "sc_interface" ) )
  tm_systag.SystemCPortsType = port_type;
else
  T::print(s:"Warning:  Unrecognized SystemC Port Type(${port_type}). Please choose either TLM, BitLevelSignals or sc_interface. Default configuration will be used.");
  tm_systag.SystemCPortsType = "sc_interface";
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("c27b1321-c0d8-4977-a04d-e6868ce710e8",
	"ff6e2892-001d-45c1-b8b9-282678499217",
	'port_type',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("ff6e2892-001d-45c1-b8b9-282678499217",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("dbaab8fc-0a30-4e2e-8c30-1cea49ecccb3",
	"00000000-0000-0000-0000-000000000000",
	'MarkAllPortsPolymorphic',
	'',
	'//
//============================================================================
// Force all ports to be polymorphic (where a component implements the same 
// interface going in the same direction more than once). 
//============================================================================
r = ::TM_SYSTAG_select();
tm_systag = r;
tm_systag.AllPortsPoly = true;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("dbaab8fc-0a30-4e2e-8c30-1cea49ecccb3",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("67f694b5-9484-41e5-ac51-28e271131843",
	"00000000-0000-0000-0000-000000000000",
	'mark_all',
	'',
	'//
pass = param.pass;
f = param.f;
p1 = param.p1;
p2 = param.p2;
p3 = param.p3;
p4 = param.p4;
p5 = param.p5;
if ( "1" == pass )
  // bridge
  if ( "WireSynchServiceOoaBridge" == f )
    // WireSynchServiceOoaBridge("initiant","ee_key_letters","recipient")
    ::WireSynchServiceOoaBridge( initiant:p1, ee_key_letters:p2, recipient:p3 );
  elif ( "WireRealizeExternalEntity" == f )
    // WireRealizeExternalEntity("a","b","c","d","e")
    ::WireRealizeExternalEntity( a:p1, b:p2, c:p3, d:p4, e:p5 );
  elif ( "WireRealizedExternalEntity" == f )
    // WireRealizedExternalEntity("a","b","c","d","e")
    ::WireRealizedExternalEntity( a:p1, b:p2, c:p3, d:p4, e:p5 );
  elif ( "TagSyncServiceSafeForInterrupts" == f )
    // TagSyncServiceSafeForInterrupts("component_name","function_name")
    ::TagSyncServiceSafeForInterrupts( component_name:p1, function_name:p2 );
    // datatype
  elif ( "TagDataTypePrecision" == f )
    // TagDataTypePrecision("component_name","dt_name","tagged_name","initial_value")
    ::TagDataTypePrecision( component_name:p1, dt_name:p2, tagged_name:p3, initial_value:p4 );
  elif ( "MapDataTypeAsPointer" == f )
    // MapDataTypeAsPointer("component_name","dt_name","pointer_type","include_file")
    ::MapDataTypeAsPointer( component_name:p1, dt_name:p2, pointer_type:p3, include_file:p4 );
  elif ( "TagEnumeratorDiscreteValue" == f )
    // TagEnumeratorDiscreteValue("component_name","enumeration","enumerator","value")
    ::TagEnumeratorDiscreteValue( component_name:p1, enumeration:p2, enumerator:p3, value:p4 );
  elif ( "TagUninitializedEnumerationValue" == f )
    // TagUninitializedEnumerationValue("component_name","enumeration","value")
    ::TagUninitializedEnumerationValue( component_name:p1, enumeration:p2, value:p3 );
  elif ( "AssignDirectToUDTPackage" == f )
    // AssignDirectToUDTPackage("package_name")
    ::AssignDirectToUDTPackage( package_name:p1 );
    // system
  elif ( "EnableTasking" == f )
    // EnableTasking("flavor","serialize","number_of_threads":integer)
    r = ::T_atoi( s:p3 );
    i3 = r;
    ::EnableTasking( flavor:p1, serialize:p2, number_of_threads:i3 );
  elif ( "SetTaskPriority" == f )
    // SetTaskPriority("task_number":integer"priority")
    r = ::T_atoi( s:p1 );
    i1 = r;
    ::SetTaskPriority( task_number:i1, priority:p2 );
  elif ( "TagMaximumStringLength" == f )
    // TagMaximumStringLength("max_len":integer)
    r = ::T_atoi( s:p1 );
    i1 = r;
    ::TagMaximumStringLength( max_len:i1 );
  elif ( "TagMaximumRelationshipExtentSize" == f )
    // TagMaximumRelationshipExtentSize("user_specified_size":integer)
    r = ::T_atoi( s:p1 );
    i1 = r;
    ::TagMaximumRelationshipExtentSize( user_specified_size:i1 );
  elif ( "TagMaximumSelectionExtentSize" == f )
    // TagMaximumSelectionExtentSize("user_specified_size":integer)
    r = ::T_atoi( s:p1 );
    i1 = r;
    ::TagMaximumSelectionExtentSize( user_specified_size:i1 );
  elif ( "TagMaximumSelfDirectedEvents" == f )
    // TagMaximumSelfDirectedEvents("user_specified_size":integer)
    r = ::T_atoi( s:p1 );
    i1 = r;
    ::TagMaximumSelfDirectedEvents( user_specified_size:i1 );
  elif ( "TagMaximumNonSelfDirectedEvents" == f )
    // TagMaximumNonSelfDirectedEvents("user_specified_size":integer)
    r = ::T_atoi( s:p1 );
    i1 = r;
    ::TagMaximumNonSelfDirectedEvents( user_specified_size:i1 );
  elif ( "TagMaximumPendingOoaTimers" == f )
    // TagMaximumPendingOoaTimers("user_specified_size":integer)
    r = ::T_atoi( s:p1 );
    i1 = r;
    ::TagMaximumPendingOoaTimers( user_specified_size:i1 );
  elif ( "TagMaximumInterleavedBridges" == f )
    // TagMaximumInterleavedBridges("user_specified_size":integer)
    r = ::T_atoi( s:p1 );
    i1 = r;
    ::TagMaximumInterleavedBridges( user_specified_size:i1 );
  elif ( "TagInterleavedBridgeDataSize" == f )
    // TagInterleavedBridgeDataSize("user_specified_size":integer)
    r = ::T_atoi( s:p1 );
    i1 = r;
    ::TagInterleavedBridgeDataSize( user_specified_size:i1 );
  elif ( "TagCollectionsFlavor" == f )
    // TagCollectionsFlavor("collections_flavor":integer)
    r = ::T_atoi( s:p1 );
    i1 = r;
    ::TagCollectionsFlavor( collections_flavor:i1 );
  elif ( "MarkPersistenceCacheDepth" == f )
    // MarkPersistenceCacheDepth("instance_depth":integer"link_depth":integer)
    r = ::T_atoi( s:p1 );
    i1 = r;
    r = ::T_atoi( s:p2 );
    i2 = r;
    ::MarkPersistenceCacheDepth( instance_depth:i1, link_depth:i2 );
  elif ( "TagDynamicMemoryAllocationOn" == f )
    // TagDynamicMemoryAllocationOn("units_to_allocate":integer)
    r = ::T_atoi( s:p1 );
    i1 = r;
    ::TagDynamicMemoryAllocationOn( units_to_allocate:i1 );
  elif ( "TagInstanceLoading" == f )
    ::TagInstanceLoading();
  elif ( "VFBEnable" == f )
    ::VFBEnable();
  elif ( "MarkSystemConfigurationPackage" == f )
    // MarkSystemConfigurationPackage("package_name")
    ::MarkSystemConfigurationPackage( package_name:p1 );
  elif ( "MarkSystemCPortType" == f )
    // MarkSystemCPortType("port_type")
    ::MarkSystemCPortType( port_type:p1 );
  elif ( "MarkAllPortsPolymorphic" == f )
    ::MarkAllPortsPolymorphic();
    // component
  elif ( "MarkAsChannel" == f )
    // MarkAsChannel("package_name","component_name","inc_file")
    ::MarkAsChannel( package_name:p1, component_name:p2, inc_file:p3 );
  elif ( "MarkComponentAsChannel" == f )
    // MarkComponentAsChannel("package_name","component_name","inc_file")
    ::MarkComponentAsChannel( package_name:p1, component_name:p2, inc_file:p3 );
  elif ( "MarkComponentWithTemplate" == f )
    // MarkComponentWithTemplate("package_name","component_name")
    ::MarkComponentWithTemplate( package_name:p1, component_name:p2 );
  elif ( "MarkInterfaceWithTemplate" == f )
    // MarkInterfaceWithTemplate("package_name","interface_name")
    ::MarkInterfaceWithTemplate( package_name:p1, interface_name:p2 );
  elif ( "AddTemplateParameter" == f )
    // AddTemplateParameter("package_name","component_name","type_name","variable_name","default_value")
    ::AddTemplateParameter( package_name:p1, component_name:p2, type_name:p3, variable_name:p4, default_value:p5 );
  elif ( "SetTemplateParameter" == f )
    // SetTemplateParameter("package_name","instance","variable_name","value")
    ::SetTemplateParameter( package_name:p1, instance:p2, variable_name:p3, value:p4 );
  elif ( "SetTPV" == f )
    // CDS - not supported here
    // SetTPV("package_name","parent_component","component","classifier_name","port","variable_name","value")
    ::SetTPV( package_name:p1, parent_component:p2, component:p3, classifier_name:p4, port:p5, variable_name:"", value:"" );
  elif ( "MarkInterfacePrefix" == f )
    // MarkInterfacePrefix("provided_port","required_port","channel")
    ::MarkInterfacePrefix( provided_port:p1, required_port:p2, channel:p3 );
  elif ( "MarkComponentAsRealized" == f )
    // MarkComponentAsRealized("package_name","component_name","inc_file")
    ::MarkComponentAsRealized( package_name:p1, component_name:p2, inc_file:p3 );
    //-- 010:20140212 Add Start (nomura)
  elif ( "MarkDomainEventMaxNumber" == f )
    // MarkDomainEventMaxNumber("component_name","internalEventNum","externalEventNum")
    // not defined .invoke MarkDomainEventMaxNumber(p1,p2,p3)
  elif ( "SetDomainRelationExtentMaxNumber" == f )
    // SetDomainRelationExtentMaxNumber("component_name", "RelationExtentMaxNo")
    r = ::T_atoi( s:p2 );
    i2 = r;
    ::SetDomainRelationExtentMaxNumber( domainName:p1, maxRelationExtents:i2 );
  elif ( "SetDomainSelectionNodeMaxNumber" == f )
    // SetDomainSelectionNodeMaxNumber("component_name", "SelectionNodeMaxNo")
    r = ::T_atoi( s:p2 );
    i2 = r;
    ::SetDomainSelectionNodeMaxNumber( domainName:p1, maxSelectionNode:i2 );
  elif ( "TagUseFacadeMaxDef" == f )
    // TagUseFacadeMaxDef()
    ::TagUseFacadeMaxDef(domainName:p1);
  elif ( "SetDomainFacadeMutexLockUse" == f )
    // SetDomainFacadeMutexLockUse("component_name")
    ::SetDomainFacadeMutexLockUse( domainName:p1 );
    //-- 010:20140212 Add Start (nomura)
  else
    // not in this pass
  end if;
else
  // class
  if ( "TagSystemObjectDefaultExtentSize" == f )
    // TagSystemObjectDefaultExtentSize("extent_size":integer)
    r = ::T_atoi( s:p1 );
    i1 = r;
    ::TagSystemObjectDefaultExtentSize( extent_size:i1 );
  elif ( "MarkSystemObjectDefaultExtentSize" == f )
    // MarkSystemObjectDefaultExtentSize("extent_size":integer)
    r = ::T_atoi( s:p1 );
    i1 = r;
    ::MarkSystemObjectDefaultExtentSize( extent_size:i1 );
  elif ( "TagObjectExtentSize" == f )
    // TagObjectExtentSize("obj_key_letters","extent_size":integer)
    r = ::T_atoi( s:p2 );
    i2 = r;
    ::TagObjectExtentSize( obj_key_letters:p1, extent_size:i2 );
  elif ( "MarkObjectExtentSize" == f )
    // MarkObjectExtentSize("component_name","obj_key_letters","extent_size":integer)
    r = ::T_atoi( s:p3 );
    i3 = r;
    ::MarkObjectExtentSize( component_name:p1, obj_key_letters:p2, extent_size:i3 );
  elif ( "TagTransformerGeneration" == f )
    // TagTransformerGeneration("obj_key_letters","transformer_name")
    ::TagTransformerGeneration( obj_key_letters:p1, transformer_name:p2 );
  elif ( "TagClassOperationTranslationOff" == f )
    // TagClassOperationTranslationOff("obj_key_letters","op_name")
    ::TagClassOperationTranslationOff( obj_key_letters:p1, op_name:p2 );
  elif ( "MarkClassOperationTranslationOff" == f )
    // MarkClassOperationTranslationOff("component_name","obj_key_letters","op_name")
    ::MarkClassOperationTranslationOff( component_name:p1, obj_key_letters:p2, op_name:p3 );
  elif ( "TagObjectTraceOff" == f )
    // TagObjectTraceOff("obj_key_letters")
    ::TagObjectTraceOff( obj_key_letters:p1 );
  elif ( "MarkObjectTraceOff" == f )
    // MarkObjectTraceOff("component_name","obj_key_letters")
    ::MarkObjectTraceOff( component_name:p1, obj_key_letters:p2 );
  elif ( "TagObjectTraceOn" == f )
    // TagObjectTraceOn("obj_key_letters")
    ::TagObjectTraceOn( obj_key_letters:p1 );
  elif ( "MarkObjectTraceOn" == f )
    // MarkObjectTraceOn("component_name","obj_key_letters")
    ::MarkObjectTraceOn( component_name:p1, obj_key_letters:p2 );
  elif ( "TagPEIsDefinedInData" == f )
    // TagPEIsDefinedInData("ss_prefix","obj_key_letters")
    ::TagPEIsDefinedInData( ss_prefix:p1, obj_key_letters:p2 );
  elif ( "MarkPEIsDefinedInData" == f )
    // MarkPEIsDefinedInData("component_name","ss_prefix","obj_key_letters")
    ::MarkPEIsDefinedInData( component_name:p1, ss_prefix:p2, obj_key_letters:p3 );
  elif ( "TagStaticInstancePopulation" == f )
    // TagStaticInstancePopulation("ss_prefix","obj_key_letters")
    ::TagStaticInstancePopulation( ss_prefix:p1, obj_key_letters:p2 );
  elif ( "MarkStaticInstancePopulation" == f )
    // MarkStaticInstancePopulation("component_name","ss_prefix","obj_key_letters")
    ::MarkStaticInstancePopulation( component_name:p1, ss_prefix:p2, obj_key_letters:p3 );
  elif ( "TagReadOnly" == f )
    // TagReadOnly("ss_prefix","obj_key_letters")
    ::TagReadOnly( ss_prefix:p1, obj_key_letters:p2 );
  elif ( "MarkReadOnly" == f )
    // MarkReadOnly("component_name","ss_prefix","obj_key_letters")
    ::MarkReadOnly( component_name:p1, ss_prefix:p2, obj_key_letters:p3 );
  elif ( "TagPersistentClass" == f )
    // TagPersistentClass("ss_prefix","obj_key_letters")
    ::TagPersistentClass( ss_prefix:p1, obj_key_letters:p2 );
  elif ( "MarkPersistentClass" == f )
    // MarkPersistentClass("component_name","ss_prefix","obj_key_letters")
    ::MarkPersistentClass( component_name:p1, ss_prefix:p2, obj_key_letters:p3 );
  elif ( "TagNonPersistentClass" == f )
    // TagNonPersistentClass("ss_prefix","obj_key_letters")
    ::TagNonPersistentClass( ss_prefix:p1, obj_key_letters:p2 );
  elif ( "MarkNonPersistentClass" == f )
    // MarkNonPersistentClass("component_name","ss_prefix","obj_key_letters")
    ::MarkNonPersistentClass( component_name:p1, ss_prefix:p2, obj_key_letters:p3 );
  elif ( "MapClassToTask" == f )
    // MapClassToTask("ss_prefix","obj_key_letters","task":integer)
    r = ::T_atoi( s:p3 );
    i3 = r;
    ::MapClassToTask( ss_prefix:p1, obj_key_letters:p2, task:i3 );
  elif ( "MarkClassToTask" == f )
    // MarkClassToTask("component_name","ss_prefix","obj_key_letters","task":integer)
    r = ::T_atoi( s:p4 );
    i4 = r;
    ::MarkClassToTask( component_name:p1, ss_prefix:p2, obj_key_letters:p3, task:i4 );
    // domain
  elif ( "TagFunctionTranslationOff" == f )
    // TagFunctionTranslationOff("function_name")
    ::TagFunctionTranslationOff( function_name:p1 );
  elif ( "MarkFunctionTranslationOff" == f )
    // MarkFunctionTranslationOff("component_name","function_name")
    ::MarkFunctionTranslationOff( component_name:p1, function_name:p2 );
  elif ( "TagInitializationFunction" == f )
    // TagInitializationFunction("function_name")
    ::TagInitializationFunction( function_name:p1 );
  elif ( "MarkInitializationFunction" == f )
    // MarkInitializationFunction("component_name","function_name")
    ::MarkInitializationFunction( component_name:p1, function_name:p2 );
  elif ( "TagExcludeObjectFromCodeGen" == f )
    // TagExcludeObjectFromCodeGen("obj_key_letters")
    ::TagExcludeObjectFromCodeGen( obj_key_letters:p1 );
  elif ( "MarkExcludeObjectFromCodeGen" == f )
    // MarkExcludeObjectFromCodeGen("component_name","obj_key_letters")
    ::MarkExcludeObjectFromCodeGen( component_name:p1, obj_key_letters:p2 );
  elif ( "TagExcludeSubsystemFromCodeGen" == f )
    // TagExcludeSubsystemFromCodeGen("subsystem_name")
    ::TagExcludeSubsystemFromCodeGen( subsystem_name:p1 );
  elif ( "MarkExcludeSubsystemFromCodeGen" == f )
    // MarkExcludeSubsystemFromCodeGen("component_name","subsystem_name")
    ::MarkExcludeSubsystemFromCodeGen( component_name:p1, subsystem_name:p2 );
  elif ( "TagStateTransitionTracingOn" == f )
    ::TagStateTransitionTracingOn();
  elif ( "MarkStateTransitionTracingOn" == f )
    // MarkStateTransitionTracingOn("component_name")
    ::MarkStateTransitionTracingOn( component_name:p1 );
  elif ( "TagActionStatementTracingOn" == f )
    ::TagActionStatementTracingOn();
  elif ( "MarkActionStatementTracingOn" == f )
    // MarkActionStatementTracingOn("component_name")
    ::MarkActionStatementTracingOn( component_name:p1 );
  elif ( "MarkMessageTracingOn" == f )
    // MarkMessageTracingOn("component_name","port_name","message_name")
    ::MarkMessageTracingOn( component_name:p1, port_name:p2, message_name:p3 );
  elif ( "TagEmptyHandleDetectionOn" == f )
    ::TagEmptyHandleDetectionOn();
  elif ( "MarkEmptyHandleDetectionOn" == f )
    // MarkEmptyHandleDetectionOn("component_name")
    ::MarkEmptyHandleDetectionOn( component_name:p1 );
  elif ( "TagFirstPassOptimizationsOff" == f )
    ::TagFirstPassOptimizationsOff();
  elif ( "MarkFirstPassOptimizationsOff" == f )
    // MarkFirstPassOptimizationsOff("component_name")
    ::MarkFirstPassOptimizationsOff( component_name:p1 );
  elif ( "TagStateActionCommentBlocksEnabled" == f )
    ::TagStateActionCommentBlocksEnabled();
  elif ( "MarkStateActionCommentBlocksEnabled" == f )
    // MarkStateActionCommentBlocksEnabled("component_name")
    ::MarkStateActionCommentBlocksEnabled( component_name:p1 );
  elif ( "TagStateActionStatementCommentsDisabled" == f )
    ::TagStateActionStatementCommentsDisabled();
  elif ( "MarkStateActionStatementCommentsDisabled" == f )
    // MarkStateActionStatementCommentsDisabled("component_name")
    ::MarkStateActionStatementCommentsDisabled( component_name:p1 );
  elif ( "TagStateActionVariableNamesEnabled" == f )
    ::TagStateActionVariableNamesEnabled();
  elif ( "TagVerboseReflexivePhrasesEnabled" == f )
    ::TagVerboseReflexivePhrasesEnabled();
  elif ( "MarkPortWiring" == f )
    // MarkPortWiring("home_component","home_port","foreign_component","foreign_port")
    ::MarkPortWiring( home_component:p1, home_port:p2, foreign_component:p3, foreign_port:p4 );
  elif ( "TagDispatchFlavor" == f )
    // TagDispatchFlavor("flavor":integer)
    r = ::T_atoi( s:p1 );
    i1 = r;
    ::TagDispatchFlavor( flavor:i1 );
    // event
  elif ( "TagPriorityEvent" == f )
    // TagPriorityEvent("evt_label","priority_value":integer)
    r = ::T_atoi( s:p2 );
    i2 = r;
    ::TagPriorityEvent( evt_label:p1, priority_value:i2 );
  elif ( "MarkPriorityEvent" == f )
    // MarkPriorityEvent("component_name","evt_label","priority_value":integer)
    r = ::T_atoi( s:p3 );
    i3 = r;
    ::MarkPriorityEvent( component_name:p1, evt_label:p2, priority_value:i3 );
  else
    // not in this pass
  end if;
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("ba392a6d-29b3-43f4-8135-3647f4ca0794",
	"67f694b5-9484-41e5-ac51-28e271131843",
	'pass',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("3d2e5072-f076-4b5a-aa8e-9a62d035c6bf",
	"67f694b5-9484-41e5-ac51-28e271131843",
	'f',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"ba392a6d-29b3-43f4-8135-3647f4ca0794",
	'');
INSERT INTO S_SPARM
	VALUES ("f127f150-1391-4574-be00-95f7d78da6bb",
	"67f694b5-9484-41e5-ac51-28e271131843",
	'p1',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"3d2e5072-f076-4b5a-aa8e-9a62d035c6bf",
	'');
INSERT INTO S_SPARM
	VALUES ("808ee9ce-01f2-46d8-8d58-1f86483d393a",
	"67f694b5-9484-41e5-ac51-28e271131843",
	'p2',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"f127f150-1391-4574-be00-95f7d78da6bb",
	'');
INSERT INTO S_SPARM
	VALUES ("85070926-b181-432f-92bf-a6e96290335d",
	"67f694b5-9484-41e5-ac51-28e271131843",
	'p3',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"808ee9ce-01f2-46d8-8d58-1f86483d393a",
	'');
INSERT INTO S_SPARM
	VALUES ("5de03653-d434-4830-9dbc-2018fd619066",
	"67f694b5-9484-41e5-ac51-28e271131843",
	'p4',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"85070926-b181-432f-92bf-a6e96290335d",
	'');
INSERT INTO S_SPARM
	VALUES ("71042c06-8b5b-4ebd-a610-a64766a1b5d6",
	"67f694b5-9484-41e5-ac51-28e271131843",
	'p5',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"5de03653-d434-4830-9dbc-2018fd619066",
	'');
INSERT INTO PE_PE
	VALUES ("67f694b5-9484-41e5-ac51-28e271131843",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("22fe2190-ceea-4d01-9ead-78b8cf2cf040",
	"00000000-0000-0000-0000-000000000000",
	'T_atoi',
	'',
	'//
return 0;
',
	"ba5eda7a-def5-0000-0000-000000000002",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("27f57edd-e179-4871-86a0-4d83255ac418",
	"22fe2190-ceea-4d01-9ead-78b8cf2cf040",
	's',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("22fe2190-ceea-4d01-9ead-78b8cf2cf040",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO PE_PE
	VALUES ("42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	1,
	"efb614c1-5af5-40ee-92c8-706430a99db3",
	"00000000-0000-0000-0000-000000000000",
	7);
INSERT INTO EP_PKG_PROXY
	VALUES ("efb614c1-5af5-40ee-92c8-706430a99db3",
	"00000000-0000-0000-0000-000000000000",
	"d9bc5487-4193-4817-be1c-6c3f3339aebf",
	'ooaofooa',
	'========================================================================

File:          $RCSfile: ooaofooa.xtuml,v $
Version:   $Revision: 1.127 $
Modified:  $Date: 2006/09/26 15:10:20 $

(c) Copyright 2004-2012 by Mentor Graphics Corp. All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Mentor Graphics Corp. and is not for external distribution.
========================================================================

This is the application domain for the Tiger project.

The processing in this model describes the activities
for model capture.



',
	0,
	'../ooaofooa.xtuml');
INSERT INTO S_SYS_PROXY
	VALUES ("d9bc5487-4193-4817-be1c-6c3f3339aebf",
	'com.mentor.nucleus.bp.core',
	1,
	'../../../../com.mentor.nucleus.bp.core.xtuml');

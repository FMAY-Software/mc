-- BP 7.1.6 content: Package syschar: 3 persistence-version: 7.1.6

INSERT INTO EP_PKG
	VALUES ("42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	"d9bc5487-4193-4817-be1c-6c3f3339aebf",
	'afunmark',
	'',
	0);
INSERT INTO GD_MD
	VALUES ("51de99c8-8ec6-4559-8bc5-024d0f98afc3",
	112,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	108,
	0,
	0,
	1,
	1,
	1,
	12,
	1,
	0,
	0,
	0,
	0,
	0,
	'',
	'com.mentor.nucleus.bp.core::components::ooaofooa::ooaofooa::afunmark');
INSERT INTO DIM_DIA
	VALUES ("51de99c8-8ec6-4559-8bc5-024d0f98afc3",
	'',
	1.000000,
	4000.000000,
	3000.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_SYNC
	VALUES ("d2eb8320-959a-4a22-bd45-64f6a2c685e4",
	"00000000-0000-0000-0000-000000000000",
	'WireSynchServiceOoaBridge',
	'',
	'//============================================================================
// $RCSfile: m.bridge.arc,v $
//
// Description:
// This archetype file contains the implementation functions for colors
// specified in the (user supplied/modified) bridge.clr file.
//
// Notice:
// (C) Copyright 1998-2013 Mentor Graphics Corporation
//     All rights reserved.
//
// This document contains confidential and proprietary information and
// property of Mentor Graphics Corp.  No part of this document may be
// reproduced without the express written permission of Mentor Graphics Corp.
//============================================================================
//
//============================================================================
initiant = param.initiant;
ee_key_letters = param.ee_key_letters;
recipient = param.recipient;
T::print(s:"Note:  WireSynchServiceOoaBridge is no longer supported.  Use components and interfaces.");
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("d9cdc351-6f8d-46ca-8ea8-249895082ffa",
	"d2eb8320-959a-4a22-bd45-64f6a2c685e4",
	'initiant',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("aa04ae80-a823-4af8-86f3-9f4093392386",
	"d2eb8320-959a-4a22-bd45-64f6a2c685e4",
	'ee_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"d9cdc351-6f8d-46ca-8ea8-249895082ffa",
	'');
INSERT INTO S_SPARM
	VALUES ("2f09b80a-f86b-4528-bfe6-b35e982441e8",
	"d2eb8320-959a-4a22-bd45-64f6a2c685e4",
	'recipient',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"aa04ae80-a823-4af8-86f3-9f4093392386",
	'');
INSERT INTO PE_PE
	VALUES ("d2eb8320-959a-4a22-bd45-64f6a2c685e4",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("b9f3ed6a-db23-4310-9097-0372660de962",
	"00000000-0000-0000-0000-000000000000",
	'WireRealizeExternalEntity',
	'',
	'//
//============================================================================
a = param.a;
b = param.b;
c = param.c;
d = param.d;
e = param.e;
T::print(s:"Note:  WireRealizeExternalEntity is no longer supported.  Use components and interfaces.");
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("00df3115-5a44-4ad1-8139-96e7004b1926",
	"b9f3ed6a-db23-4310-9097-0372660de962",
	'a',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("47d1c2c3-0fe7-45f8-92c8-c0ee8b2d7626",
	"b9f3ed6a-db23-4310-9097-0372660de962",
	'b',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00df3115-5a44-4ad1-8139-96e7004b1926",
	'');
INSERT INTO S_SPARM
	VALUES ("ce34f10b-e842-4c3b-ac32-1154631af17b",
	"b9f3ed6a-db23-4310-9097-0372660de962",
	'c',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"47d1c2c3-0fe7-45f8-92c8-c0ee8b2d7626",
	'');
INSERT INTO S_SPARM
	VALUES ("b858dd88-4651-48f6-95a7-e1a6ae47fa01",
	"b9f3ed6a-db23-4310-9097-0372660de962",
	'd',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"ce34f10b-e842-4c3b-ac32-1154631af17b",
	'');
INSERT INTO S_SPARM
	VALUES ("60517e7f-257f-42d1-8fe4-640434eb42cc",
	"b9f3ed6a-db23-4310-9097-0372660de962",
	'e',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"b858dd88-4651-48f6-95a7-e1a6ae47fa01",
	'');
INSERT INTO PE_PE
	VALUES ("b9f3ed6a-db23-4310-9097-0372660de962",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("2f71cf3c-d4e5-49db-8a09-e0e9a9010c5b",
	"00000000-0000-0000-0000-000000000000",
	'WireRealizedExternalEntity',
	'',
	'//
//============================================================================
a = param.a;
b = param.b;
c = param.c;
d = param.d;
e = param.e;
T::print(s:"Note:  WireRealizeExternalEntity is no longer supported.  Use components and interfaces.");
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("0dc5e14f-101c-4c51-a3e0-251a27447bab",
	"2f71cf3c-d4e5-49db-8a09-e0e9a9010c5b",
	'a',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("1400a03d-7f07-47f8-a793-3e3d596ff968",
	"2f71cf3c-d4e5-49db-8a09-e0e9a9010c5b",
	'b',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"0dc5e14f-101c-4c51-a3e0-251a27447bab",
	'');
INSERT INTO S_SPARM
	VALUES ("cf0b77e7-c162-4189-9777-901584c3b748",
	"2f71cf3c-d4e5-49db-8a09-e0e9a9010c5b",
	'c',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"1400a03d-7f07-47f8-a793-3e3d596ff968",
	'');
INSERT INTO S_SPARM
	VALUES ("2c6438d4-b8a9-41d8-81a6-9ad23c99ec38",
	"2f71cf3c-d4e5-49db-8a09-e0e9a9010c5b",
	'd',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"cf0b77e7-c162-4189-9777-901584c3b748",
	'');
INSERT INTO S_SPARM
	VALUES ("0dd26de2-139c-4d61-8d26-85358377ac1d",
	"2f71cf3c-d4e5-49db-8a09-e0e9a9010c5b",
	'e',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"2c6438d4-b8a9-41d8-81a6-9ad23c99ec38",
	'');
INSERT INTO PE_PE
	VALUES ("2f71cf3c-d4e5-49db-8a09-e0e9a9010c5b",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("c24b2f0f-b89f-4141-8356-21da1edba515",
	"00000000-0000-0000-0000-000000000000",
	'TagSyncServiceSafeForInterrupts',
	'',
	'//
//
//============================================================================
// Mark a function (synchronous service) as being safe for 
// interrupt service routine (ISR) invocation.  This is also useful
// for task communication and other multi-context situations.
//============================================================================
component_name = param.component_name;
function_name = param.function_name;
component_name = T::r(s:component_name);
select any tm_sync from instances of TM_SYNC where ( ( selected.RegisteredDomain == component_name ) and ( selected.Name == function_name ) );
if ( empty tm_sync )
  create object instance tm_sync of TM_SYNC;
  tm_sync.RegisteredDomain = component_name;
  tm_sync.Name = function_name;
end if;
tm_sync.IsSafeForInterrupts = true;
T::print(s:"Function ${function_name} in component ${component_name} marked as safe for interrupt invocation.");
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("3a85f7ed-8383-4ac6-8c16-3a5cb3c67386",
	"c24b2f0f-b89f-4141-8356-21da1edba515",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("dabbcbf8-138e-44e0-a44e-31bb4366d35d",
	"c24b2f0f-b89f-4141-8356-21da1edba515",
	'function_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"3a85f7ed-8383-4ac6-8c16-3a5cb3c67386",
	'');
INSERT INTO PE_PE
	VALUES ("c24b2f0f-b89f-4141-8356-21da1edba515",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("d76cab53-585b-4949-8c46-ee9c9ba6b3b4",
	"00000000-0000-0000-0000-000000000000",
	'TagBridgeCallNotGenerate',
	'',
	'//
//
//============================================================================
//-- 004: 20140122 Add Start (saitou) 
dom_name = param.dom_name;
ee_name = param.ee_name;
//
select many te_cs from instances of TE_C;
if ( dom_name != "*" )
  select many te_cs from instances of TE_C where ( selected.Name == dom_name );
end if;
for each te_c in te_cs
  select any te_ee from instances of TE_EE where ( ( selected.Key_Lett == ee_name ) and ( selected.te_cID == te_c.ID ) );
  if ( not_empty te_ee )
    te_ee.Included = false;
    T::print(s:"TagBridgeCallNotGenerate() : ${ee_name}");
    select many s_brgs related by te_ee->S_EE[R2020]->S_BRG[R19];
    for each s_brg in s_brgs
      select one te_brg related by s_brg->TE_BRG[R2025];
      if ( not_empty te_brg )
        te_brg.NotGenerateInvocation = true;
      end if;
    end for;
  else
    T::print(s:"TagBridgeCallNotGenerate() ${ee_name} is not found.");
  end if;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("85eb3d29-8189-4f1f-a005-9be613d6a396",
	"d76cab53-585b-4949-8c46-ee9c9ba6b3b4",
	'dom_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("87f1139f-3e3b-4be6-beb5-33afe496b576",
	"d76cab53-585b-4949-8c46-ee9c9ba6b3b4",
	'ee_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"85eb3d29-8189-4f1f-a005-9be613d6a396",
	'');
INSERT INTO PE_PE
	VALUES ("d76cab53-585b-4949-8c46-ee9c9ba6b3b4",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("24ed444d-fd8e-4094-b01d-c7e4b4247373",
	"00000000-0000-0000-0000-000000000000",
	'port_realize_EE',
	'',
	'//-- 004: 20140122 Add End (saitou) 
//-- 009: 20140205 Add Start (saitou)
dom_name = param.dom_name;
port_name = param.port_name;
ee_name = param.ee_name;
//
select many te_cs from instances of TE_C;
if ( dom_name != "*" )
  select many te_cs from instances of TE_C where ( selected.Name == dom_name );
end if;
//
for each te_c in te_cs
  select any te_po from instances of TE_PO where ( ( selected.Name == port_name ) and ( selected.te_cID == te_c.ID ) );
  select any te_ee from instances of TE_EE where ( ( selected.Key_Lett == ee_name ) and ( selected.te_cID == te_c.ID ) );
  if ( ( not_empty te_po ) and ( not_empty te_ee ) )
    te_po.realizeEE_ID = te_ee.EE_ID;
    T::print(s:"port_realize_EE() : port(${te_po.Name}) realize EE(${te_ee.Key_Lett})");
  end if;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("4a24313d-9d25-496c-b5f5-0245d21e86f2",
	"24ed444d-fd8e-4094-b01d-c7e4b4247373",
	'dom_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("3237866f-3da0-47b5-9aa0-663c65ca374b",
	"24ed444d-fd8e-4094-b01d-c7e4b4247373",
	'port_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"4a24313d-9d25-496c-b5f5-0245d21e86f2",
	'');
INSERT INTO S_SPARM
	VALUES ("ec21f939-c340-4027-bf0c-f954af2135e0",
	"24ed444d-fd8e-4094-b01d-c7e4b4247373",
	'ee_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"3237866f-3da0-47b5-9aa0-663c65ca374b",
	'');
INSERT INTO PE_PE
	VALUES ("24ed444d-fd8e-4094-b01d-c7e4b4247373",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("cb7e08a4-228c-4d99-8060-0dbe908fdea6",
	"00000000-0000-0000-0000-000000000000",
	'mark_ee_as_realized',
	'',
	'//-- 009: 20140205 Add End (saitou)
//-- 014: 20140225 Add Start (saitou) 
dom_name = param.dom_name;
ee_name = param.ee_name;
prefix = param.prefix;
include_file = param.include_file;
//
select many te_cs from instances of TE_C;
if ( dom_name != "*" )
  select many te_cs from instances of TE_C where ( selected.Name == dom_name );
end if;
for each te_c in te_cs
  select any te_ee from instances of TE_EE where ( ( selected.Key_Lett == ee_name ) and ( selected.te_cID == te_c.ID ) );
  if ( not_empty te_ee )
    T::print(s:"mark_ee_as_realized() : ${ee_name} : [${te_ee.RegisteredName}] -> [${prefix}] : ${include_file}");
    te_ee.RegisteredName = "${prefix}";
    te_ee.Include_File = "${include_file}";
    select many s_brgs related by te_ee->S_EE[R2020]->S_BRG[R19];
    for each s_brg in s_brgs
      select one te_brg related by s_brg->TE_BRG[R2025];
      //-- 010:20140311 Modified Start (nomura)
      r = ::fx_is_exist_real_func( te_ee:te_ee );
      isExistRealFunc = r;
      if ( ( not_empty te_brg ) and ( isExistRealFunc == false ) )
        //-- 010:20140307 Modified End (nomura)
        brgprefix = te_ee.RegisteredName + "_";
        te_brg.GeneratedName = brgprefix + s_brg.Name;
      end if;
    end for;
  else
    T::print(s:"mark_ee_as_realized() ${ee_name} is not found.");
  end if;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("3f292372-4315-4187-ad05-1ecd4b8c82e4",
	"cb7e08a4-228c-4d99-8060-0dbe908fdea6",
	'dom_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("6c47f668-9d1b-4551-af40-9d8657e429bd",
	"cb7e08a4-228c-4d99-8060-0dbe908fdea6",
	'ee_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"3f292372-4315-4187-ad05-1ecd4b8c82e4",
	'');
INSERT INTO S_SPARM
	VALUES ("8b090833-5002-4b51-bcbb-978cb7852b34",
	"cb7e08a4-228c-4d99-8060-0dbe908fdea6",
	'prefix',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"6c47f668-9d1b-4551-af40-9d8657e429bd",
	'');
INSERT INTO S_SPARM
	VALUES ("3e204372-0b62-4b3e-a97a-cb1c06e2c795",
	"cb7e08a4-228c-4d99-8060-0dbe908fdea6",
	'include_file',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"8b090833-5002-4b51-bcbb-978cb7852b34",
	'');
INSERT INTO PE_PE
	VALUES ("cb7e08a4-228c-4d99-8060-0dbe908fdea6",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("4e245deb-5c2c-4acb-8334-9bdc509359cd",
	"00000000-0000-0000-0000-000000000000",
	'TagSystemObjectDefaultExtentSize',
	'',
	'//============================================================================
// $RCSfile: m.class.arc,v $
//
// Description:
// This archetype file contains the implementation functions for colors
// specified in the (user supplied/modified) object.clr file.
//
// Notice:
// (C) Copyright 1998-2013 Mentor Graphics Corporation
//     All rights reserved.
// Enhancements provided by TOYO Corporation.
//
// This document contains confidential and proprietary information and
// property of Mentor Graphics Corp.  No part of this document may be
// reproduced without the express written permission of Mentor Graphics Corp.
//============================================================================
//
//============================================================================
// Set default extension for entire component.
//============================================================================
extent_size = param.extent_size;
::MarkSystemObjectDefaultExtentSize( extent_size:extent_size );
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("7b7d49f7-bbb5-43b8-b8a3-f52b21e72090",
	"4e245deb-5c2c-4acb-8334-9bdc509359cd",
	'extent_size',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("4e245deb-5c2c-4acb-8334-9bdc509359cd",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("bc5d8ee6-1c23-4d60-bb46-e9edfe15cffb",
	"00000000-0000-0000-0000-000000000000",
	'MarkSystemObjectDefaultExtentSize',
	'',
	'extent_size = param.extent_size;
select many te_classes from instances of TE_CLASS;
for each te_class in te_classes
  te_class.MaxExtentSize = extent_size;
end for;
T::print(s:"Class default extent size is $t{extent_size} for _all_ classes.");
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("05a66ae6-7175-4d37-800e-f63c1f7099b2",
	"bc5d8ee6-1c23-4d60-bb46-e9edfe15cffb",
	'extent_size',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("bc5d8ee6-1c23-4d60-bb46-e9edfe15cffb",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("7e45b3b8-d8a7-40c2-b2af-0054d2fb6e1e",
	"00000000-0000-0000-0000-000000000000",
	'TagObjectExtentSize',
	'',
	'//
//============================================================================
obj_key_letters = param.obj_key_letters;
extent_size = param.extent_size;
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkObjectExtentSize( component_name:te_c.Name, obj_key_letters:obj_key_letters, extent_size:extent_size );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("52c2c3a3-bb49-4491-86b0-10c665e59c52",
	"7e45b3b8-d8a7-40c2-b2af-0054d2fb6e1e",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("29f93199-4007-467a-9900-60455908c87b",
	"7e45b3b8-d8a7-40c2-b2af-0054d2fb6e1e",
	'extent_size',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"52c2c3a3-bb49-4491-86b0-10c665e59c52",
	'');
INSERT INTO PE_PE
	VALUES ("7e45b3b8-d8a7-40c2-b2af-0054d2fb6e1e",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("7e04aab1-5dd0-4fbe-884d-328414b0d343",
	"00000000-0000-0000-0000-000000000000",
	'MarkObjectExtentSize',
	'',
	'component_name = param.component_name;
obj_key_letters = param.obj_key_letters;
extent_size = param.extent_size;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  select any te_class related by te_c->TE_CLASS[R2064] where ( selected.Key_Lett == obj_key_letters );
  if ( not_empty te_class )
    te_class.MaxExtentSize = extent_size;
    T::print(s:"Class ''${te_class.Name}'' (${te_class.Key_Lett}) extent size is $t{extent_size}");
  else
    T::print(s:"ERROR:  Class (${obj_key_letters}) not found in component ''${te_c.Name}''.");
    T::print(s:"      => MarkObjectExtentSize( ${obj_key_letters}, $t{extent_size} )");
  end if;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("fd33ced4-db89-4f13-a1ff-5be1c64df51d",
	"7e04aab1-5dd0-4fbe-884d-328414b0d343",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("85035a1d-7fd3-45e4-975f-ab998684cd87",
	"7e04aab1-5dd0-4fbe-884d-328414b0d343",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"fd33ced4-db89-4f13-a1ff-5be1c64df51d",
	'');
INSERT INTO S_SPARM
	VALUES ("409a4007-7b16-49b0-ba57-733056a3d552",
	"7e04aab1-5dd0-4fbe-884d-328414b0d343",
	'extent_size',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"85035a1d-7fd3-45e4-975f-ab998684cd87",
	'');
INSERT INTO PE_PE
	VALUES ("7e04aab1-5dd0-4fbe-884d-328414b0d343",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("df2fbb1d-e4b2-474d-86dd-056356df7faa",
	"00000000-0000-0000-0000-000000000000",
	'TagTransformerGeneration',
	'',
	'//
//============================================================================
// This function was used in previous versions of MC-3020 to enable
// the generation of code from actions in transformers (operations).
// This function is deprecated in favor of translating operations by
// default.  Translation may be disabled with MarkClassOperationTranslationOff.
//============================================================================
obj_key_letters = param.obj_key_letters;
transformer_name = param.transformer_name;
T::print(s:"Note:  TagTransformerGeneration is no longer used.  Please use");
T::print(s:"MarkClassOperationTranslationOff to control semantic translation.");
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("41016684-dc69-4e38-b791-5b4e7d2d745c",
	"df2fbb1d-e4b2-474d-86dd-056356df7faa",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("39d1bbbf-d145-45ce-a3e5-b658d242c474",
	"df2fbb1d-e4b2-474d-86dd-056356df7faa",
	'transformer_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"41016684-dc69-4e38-b791-5b4e7d2d745c",
	'');
INSERT INTO PE_PE
	VALUES ("df2fbb1d-e4b2-474d-86dd-056356df7faa",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("f4d91335-e658-4abf-bc4c-6f0838762355",
	"00000000-0000-0000-0000-000000000000",
	'TagClassOperationTranslationOff',
	'',
	'//
//============================================================================
// Disable the translation of class operation processing semantics.
// The default is for all operations to be translated.
//============================================================================
obj_key_letters = param.obj_key_letters;
op_name = param.op_name;
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkClassOperationTranslationOff( component_name:te_c.Name, obj_key_letters:obj_key_letters, op_name:op_name );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("1aa1d30a-d8c4-47b5-98da-4f57bda6dc83",
	"f4d91335-e658-4abf-bc4c-6f0838762355",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("ed33d293-c2bc-4d7d-8cd4-e3123c3ae178",
	"f4d91335-e658-4abf-bc4c-6f0838762355",
	'op_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"1aa1d30a-d8c4-47b5-98da-4f57bda6dc83",
	'');
INSERT INTO PE_PE
	VALUES ("f4d91335-e658-4abf-bc4c-6f0838762355",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("28c088ed-d804-4397-9a80-f330d613ebbe",
	"00000000-0000-0000-0000-000000000000",
	'MarkClassOperationTranslationOff',
	'',
	'component_name = param.component_name;
obj_key_letters = param.obj_key_letters;
op_name = param.op_name;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  msg = "";
  select many te_classes related by te_c->TE_CLASS[R2064] where ( false );
  if ( "*" == obj_key_letters )
    select many te_classes related by te_c->TE_CLASS[R2064];
  else
    select many te_classes related by te_c->TE_CLASS[R2064] where ( selected.Key_Lett == obj_key_letters );
  end if;
  if ( empty te_classes )
    msg = "ERROR:  Class ${obj_key_letters} not found in component.";
    msg = msg + "\n => MarkClassOperationTranslationOff( ${obj_key_letters}, ${op_name} )";
  end if;
  for each te_class in te_classes
    if ( "*" == op_name )
      select many te_tfrs related by te_class->O_OBJ[R2019]->O_TFR[R115]->TE_TFR[R2024];
      if ( not_empty te_tfrs )
        for each te_tfr in te_tfrs
          te_tfr.XlateSemantics = false;
        end for;
        msg = "Class ${te_class.Name} (${te_class.Key_Lett}) all operation semantics disabled.";
      end if;
    else
      select any o_tfr related by te_class->O_OBJ[R2019]->O_TFR[R115] where ( selected.Name == op_name );
      if ( not_empty o_tfr )
        select one te_tfr related by o_tfr->TE_TFR[R2024];
        te_tfr.XlateSemantics = false;
        msg = "Class Operation ${te_class.Name} ${te_class.Key_Lett}::${te_tfr.Name} semantics disabled.";
      else
        msg = "ERROR:  Class Operation ${te_class.Name} ${te_class.Key_Lett}::${op_name} is not defined.";
        msg = msg + "\n  => MarkClassOperationTranslationOff( ${obj_key_letters}, ${op_name} )";
      end if;
    end if;
  end for;
  if ( msg != "" )
    T::print(s:"${msg}");
  end if;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("91f66a4c-be96-4d62-89e4-b5a8a5de3c5b",
	"28c088ed-d804-4397-9a80-f330d613ebbe",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("8dff18d4-3abc-46d8-89e2-ec51c6345ca9",
	"28c088ed-d804-4397-9a80-f330d613ebbe",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"91f66a4c-be96-4d62-89e4-b5a8a5de3c5b",
	'');
INSERT INTO S_SPARM
	VALUES ("e2d17fec-e687-46bb-b0cb-c1bc90e8bbed",
	"28c088ed-d804-4397-9a80-f330d613ebbe",
	'op_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"8dff18d4-3abc-46d8-89e2-ec51c6345ca9",
	'');
INSERT INTO PE_PE
	VALUES ("28c088ed-d804-4397-9a80-f330d613ebbe",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("3ca13f1b-db5d-45fd-b133-cb7202017f7a",
	"00000000-0000-0000-0000-000000000000",
	'TagObjectTraceOff',
	'',
	'//
//============================================================================
obj_key_letters = param.obj_key_letters;
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkObjectTraceOff( component_name:te_c.Name, obj_key_letters:obj_key_letters );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("28878a91-9134-44c7-94b2-1a79ced25601",
	"3ca13f1b-db5d-45fd-b133-cb7202017f7a",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("3ca13f1b-db5d-45fd-b133-cb7202017f7a",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("a5f8b04f-96b9-41b5-b02a-f49ad81715ad",
	"00000000-0000-0000-0000-000000000000",
	'MarkObjectTraceOff',
	'',
	'component_name = param.component_name;
obj_key_letters = param.obj_key_letters;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  msg = "";
  if ( "*" == obj_key_letters )
    select many te_classes related by te_c->TE_CLASS[R2064];
    for each te_class in te_classes
      te_class.IsTrace = false;
    end for;
    msg = "Class tracing for all is disabled in component ${te_c.Name}.";
  else
    select any te_class related by te_c->TE_CLASS[R2064] where ( selected.Key_Lett == obj_key_letters );
    if ( not_empty te_class )
      te_class.IsTrace = false;
      msg = "Class ${te_class.Name} (${te_class.Key_Lett}) tracing is disabled.";
    else
      msg = "ERROR:  Class (${obj_key_letters}) not found in component ${te_c.Name}.";
      msg = msg + "\n => MarkObjectTraceOff( ${obj_key_letters} )";
    end if;
  end if;
  if ( "" != msg )
    T::print(s:"${msg}");
  end if;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("5be446ea-6540-4be1-acab-e4b79e7bf251",
	"a5f8b04f-96b9-41b5-b02a-f49ad81715ad",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("b647f4bf-f32f-49f1-a8cd-727979f246f5",
	"a5f8b04f-96b9-41b5-b02a-f49ad81715ad",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"5be446ea-6540-4be1-acab-e4b79e7bf251",
	'');
INSERT INTO PE_PE
	VALUES ("a5f8b04f-96b9-41b5-b02a-f49ad81715ad",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("fcc43fa4-4986-4b26-9649-c00b16930c08",
	"00000000-0000-0000-0000-000000000000",
	'TagObjectTraceOn',
	'',
	'//
//============================================================================
obj_key_letters = param.obj_key_letters;
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkObjectTraceOn( component_name:te_c.Name, obj_key_letters:obj_key_letters );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("7fc36358-9665-4b79-a938-e6d25dc15c50",
	"fcc43fa4-4986-4b26-9649-c00b16930c08",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("fcc43fa4-4986-4b26-9649-c00b16930c08",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("1e061a16-c549-4e46-8774-b719491bdd11",
	"00000000-0000-0000-0000-000000000000",
	'MarkObjectTraceOn',
	'',
	'component_name = param.component_name;
obj_key_letters = param.obj_key_letters;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  msg = "";
  if ( "*" == obj_key_letters )
    select many te_classes related by te_c->TE_CLASS[R2064];
    for each te_class in te_classes
      te_class.IsTrace = true;
    end for;
    msg = "Class tracing for all is enabled in component ${te_c.Name}.";
  else
    select any te_class related by te_c->TE_CLASS[R2064] where ( selected.Key_Lett == obj_key_letters );
    if ( not_empty te_class )
      te_class.IsTrace = true;
      msg = "Class ${te_class.Name} (${te_class.Key_Lett}) tracing is enabled.";
    else
      msg = "ERROR:  Class (${obj_key_letters}) not found in component ${te_c.Name}.";
      msg = msg + "\n => MarkObjectTraceOn( ${obj_key_letters} )";
    end if;
  end if;
  if ( "" != msg )
    T::print(s:"${msg}");
  end if;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("733e0679-6a2c-4e14-b78e-e21017dcd29e",
	"1e061a16-c549-4e46-8774-b719491bdd11",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("1d5c4d22-dd3a-495a-b4cb-73ce831360bb",
	"1e061a16-c549-4e46-8774-b719491bdd11",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"733e0679-6a2c-4e14-b78e-e21017dcd29e",
	'');
INSERT INTO PE_PE
	VALUES ("1e061a16-c549-4e46-8774-b719491bdd11",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("75f57829-717d-42bd-8a6e-a92c4c136df1",
	"00000000-0000-0000-0000-000000000000",
	'TagPEIsDefinedInData',
	'',
	'//
//============================================================================
// Identify this class as having preexisting instances defined
// in data.
//============================================================================
ss_prefix = param.ss_prefix;
obj_key_letters = param.obj_key_letters;
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkPEIsDefinedInData( component_name:te_c.Name, ss_prefix:ss_prefix, obj_key_letters:obj_key_letters );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("2d8f6162-b7c7-4911-b9da-a98c8da3f5d7",
	"75f57829-717d-42bd-8a6e-a92c4c136df1",
	'ss_prefix',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("da32a8a1-5198-4024-b97d-c698301cb939",
	"75f57829-717d-42bd-8a6e-a92c4c136df1",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"2d8f6162-b7c7-4911-b9da-a98c8da3f5d7",
	'');
INSERT INTO PE_PE
	VALUES ("75f57829-717d-42bd-8a6e-a92c4c136df1",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("7253a4d8-7053-4ca7-8490-edbaaaec95a3",
	"00000000-0000-0000-0000-000000000000",
	'MarkPEIsDefinedInData',
	'',
	'component_name = param.component_name;
ss_prefix = param.ss_prefix;
obj_key_letters = param.obj_key_letters;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  msg = "";
  // Get set into scope.
  select many te_classes related by te_c->TE_CLASS[R2064] where ( false );
  // Check for an explicit object.
  // Check for an explicit subsystem.
  // Check a star in the subsystem and component.
  // Otherwise, generate a coloring error.
  if ( ( "*" == ss_prefix ) and ( "*" == obj_key_letters ) )
    select many te_classes related by te_c->TE_CLASS[R2064];
  elif ( "" == ss_prefix )
    select many te_classes related by te_c->TE_CLASS[R2064] where ( selected.Key_Lett == obj_key_letters );
  elif ( "*" == obj_key_letters )
    select any s_ss from instances of S_SS where ( selected.Name == ss_prefix );
    select many te_classes related by s_ss->O_OBJ[R2]->TE_CLASS[R2019] where ( selected.Key_Lett == obj_key_letters );
  else
    msg = msg + "ERROR:  MarkPEIsDefinedInData( ${ss_prefix}, ${obj_key_letters} ) in component ${te_c.Name}\n";
  end if;
  for each te_class in te_classes
    te_class.PEIsDefinedInData = true;
    msg = msg + "Class ${te_class.Name} (${te_class.Key_Lett}) in component ${te_c.Name} marked to enable PEIs in data.\n";
  end for;
  if ( "" != msg )
    T::print(s:"${msg}");
  end if;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("22955879-5e6a-46b8-a9db-2a2dee2daf16",
	"7253a4d8-7053-4ca7-8490-edbaaaec95a3",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("7d93929f-28f8-4a57-be41-575d1785bb50",
	"7253a4d8-7053-4ca7-8490-edbaaaec95a3",
	'ss_prefix',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"22955879-5e6a-46b8-a9db-2a2dee2daf16",
	'');
INSERT INTO S_SPARM
	VALUES ("16351909-a9be-41e2-b898-06d7646c94d0",
	"7253a4d8-7053-4ca7-8490-edbaaaec95a3",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"7d93929f-28f8-4a57-be41-575d1785bb50",
	'');
INSERT INTO PE_PE
	VALUES ("7253a4d8-7053-4ca7-8490-edbaaaec95a3",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("e08a0f8f-76b0-414b-b131-2b87021d9bba",
	"00000000-0000-0000-0000-000000000000",
	'TagStaticInstancePopulation',
	'',
	'//
//============================================================================
// Identify this class as having a static instance population.
// That is, after initialization is complete, instances are neither
// created nor destroyed.
//============================================================================
ss_prefix = param.ss_prefix;
obj_key_letters = param.obj_key_letters;
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkStaticInstancePopulation( component_name:te_c.Name, ss_prefix:ss_prefix, obj_key_letters:obj_key_letters );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("bec4dea0-8b9e-401f-93e5-a8280136f0fe",
	"e08a0f8f-76b0-414b-b131-2b87021d9bba",
	'ss_prefix',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("6050d331-bd26-42d7-a67a-3b861256c538",
	"e08a0f8f-76b0-414b-b131-2b87021d9bba",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"bec4dea0-8b9e-401f-93e5-a8280136f0fe",
	'');
INSERT INTO PE_PE
	VALUES ("e08a0f8f-76b0-414b-b131-2b87021d9bba",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("18aaa9c8-7665-46df-beb9-6d6cab8e19ec",
	"00000000-0000-0000-0000-000000000000",
	'MarkStaticInstancePopulation',
	'',
	'component_name = param.component_name;
ss_prefix = param.ss_prefix;
obj_key_letters = param.obj_key_letters;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  msg = "";
  // Get set into scope.
  select many te_classes related by te_c->TE_CLASS[R2064] where ( false );
  // Check for an explicit object.
  // Check for an explicit subsystem.
  // Check a star in the subsystem and component.
  // Otherwise, generate a coloring error.
  if ( ( "*" == ss_prefix ) and ( "*" == obj_key_letters ) )
    select many te_classes related by te_c->TE_CLASS[R2064];
  elif ( "" == ss_prefix )
    select many te_classes related by te_c->TE_CLASS[R2064] where ( selected.Key_Lett == obj_key_letters );
  elif ( "*" == obj_key_letters )
    select any s_ss from instances of S_SS where ( selected.Name == ss_prefix );
    select many te_classes related by s_ss->O_OBJ[R2]->TE_CLASS[R2019] where ( selected.Key_Lett == obj_key_letters );
  else
    msg = msg + "ERROR:  MarkStaticInstancePopulation( ${ss_prefix}, ${obj_key_letters} ) in component ${te_c.Name}\n";
  end if;
  for each te_class in te_classes
    te_class.IsFixedPopulation = true;
    msg = msg + "Class ${te_class.Name} (${te_class.Key_Lett}) in component ${te_c.Name} marked as\n";
    msg = msg + "as having a static instance population.\n";
  end for;
  if ( "" != msg )
    T::print(s:"${msg}");
  end if;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("b7b8076b-037d-4e96-bde7-b0880e6c03d6",
	"18aaa9c8-7665-46df-beb9-6d6cab8e19ec",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("c9872e60-3822-4a2e-9ea7-202c67660d0a",
	"18aaa9c8-7665-46df-beb9-6d6cab8e19ec",
	'ss_prefix',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"b7b8076b-037d-4e96-bde7-b0880e6c03d6",
	'');
INSERT INTO S_SPARM
	VALUES ("7e9f3d69-5b1c-489e-986e-bdafd40bbc04",
	"18aaa9c8-7665-46df-beb9-6d6cab8e19ec",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"c9872e60-3822-4a2e-9ea7-202c67660d0a",
	'');
INSERT INTO PE_PE
	VALUES ("18aaa9c8-7665-46df-beb9-6d6cab8e19ec",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("1037f528-57ec-409b-9c64-a2382582b083",
	"00000000-0000-0000-0000-000000000000",
	'TagReadOnly',
	'',
	'//
//============================================================================
// Mark object as read only.
//============================================================================
ss_prefix = param.ss_prefix;
obj_key_letters = param.obj_key_letters;
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkReadOnly( component_name:te_c.Name, ss_prefix:ss_prefix, obj_key_letters:obj_key_letters );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("d1e0c1ef-9c7f-4647-b878-11407eb07983",
	"1037f528-57ec-409b-9c64-a2382582b083",
	'ss_prefix',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("62e91bfd-eba0-4abf-abe4-9fd72cd48fb2",
	"1037f528-57ec-409b-9c64-a2382582b083",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"d1e0c1ef-9c7f-4647-b878-11407eb07983",
	'');
INSERT INTO PE_PE
	VALUES ("1037f528-57ec-409b-9c64-a2382582b083",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("d028ac71-caab-46b3-b013-db62610334ba",
	"00000000-0000-0000-0000-000000000000",
	'MarkReadOnly',
	'',
	'component_name = param.component_name;
ss_prefix = param.ss_prefix;
obj_key_letters = param.obj_key_letters;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  msg = "";
  // Get set into scope.
  select many te_classes related by te_c->TE_CLASS[R2064] where ( false );
  // Check for an explicit object.
  // Check for an explicit subsystem.
  // Check a star in the subsystem and component.
  // Otherwise, generate a coloring error.
  if ( ( "*" == ss_prefix ) and ( "*" == obj_key_letters ) )
    select many te_classes related by te_c->TE_CLASS[R2064];
  elif ( "" == ss_prefix )
    select many te_classes related by te_c->TE_CLASS[R2064] where ( selected.Key_Lett == obj_key_letters );
  elif ( "*" == obj_key_letters )
    select any s_ss from instances of S_SS where ( selected.Name == ss_prefix );
    select many te_classes related by s_ss->O_OBJ[R2]->TE_CLASS[R2019] where ( selected.Key_Lett == obj_key_letters );
  else
    msg = msg + "ERROR:  MarkReadOnly( ${ss_prefix}, ${obj_key_letters} ) in component ${te_c.Name}\n";
  end if;
  for each te_class in te_classes
    te_class.IsReadOnly = true;
    msg = msg + "Class ${te_class.Name} (${te_class.Key_Lett}) in component ${te_c.Name} marked as read only.\n";
  end for;
  if ( "" != msg )
    T::print(s:"${msg}");
  end if;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("3c32f5a5-ce85-4ac4-8511-7b2633350ccb",
	"d028ac71-caab-46b3-b013-db62610334ba",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("f015af9f-00f0-4dfa-9256-76a1532627b2",
	"d028ac71-caab-46b3-b013-db62610334ba",
	'ss_prefix',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"3c32f5a5-ce85-4ac4-8511-7b2633350ccb",
	'');
INSERT INTO S_SPARM
	VALUES ("7258cc08-16cc-484c-86c3-91029c1e738c",
	"d028ac71-caab-46b3-b013-db62610334ba",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"f015af9f-00f0-4dfa-9256-76a1532627b2",
	'');
INSERT INTO PE_PE
	VALUES ("d028ac71-caab-46b3-b013-db62610334ba",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("f787360c-b19c-4ef1-9e8f-c6416412a84b",
	"00000000-0000-0000-0000-000000000000",
	'TagPersistentClass',
	'',
	'//
//============================================================================
// Enable persistent storage of the specified class or classes.
//============================================================================
ss_prefix = param.ss_prefix;
obj_key_letters = param.obj_key_letters;
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkPersistentClass( component_name:te_c.Name, ss_prefix:ss_prefix, obj_key_letters:obj_key_letters );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("46a32d91-9c20-49e4-8983-b71d48a265b3",
	"f787360c-b19c-4ef1-9e8f-c6416412a84b",
	'ss_prefix',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("3fe93e7e-25bd-479c-a015-e6082ff0739d",
	"f787360c-b19c-4ef1-9e8f-c6416412a84b",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"46a32d91-9c20-49e4-8983-b71d48a265b3",
	'');
INSERT INTO PE_PE
	VALUES ("f787360c-b19c-4ef1-9e8f-c6416412a84b",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("45af90c8-e423-4b36-8350-39a50f808f02",
	"00000000-0000-0000-0000-000000000000",
	'MarkPersistentClass',
	'',
	'component_name = param.component_name;
ss_prefix = param.ss_prefix;
obj_key_letters = param.obj_key_letters;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  msg = "";
  // Get set into scope.
  select many te_classes related by te_c->TE_CLASS[R2064] where ( false );
  // Check for an explicit object.
  // Check for an explicit subsystem.
  // Check a star in the subsystem and component.
  // Otherwise, generate a coloring error.
  if ( ( "*" == ss_prefix ) and ( "*" == obj_key_letters ) )
    select many te_classes related by te_c->TE_CLASS[R2064];
  elif ( "" == ss_prefix )
    select many te_classes related by te_c->TE_CLASS[R2064] where ( selected.Key_Lett == obj_key_letters );
  elif ( "*" == obj_key_letters )
    select any s_ss from instances of S_SS where ( selected.Name == ss_prefix );
    select many te_classes related by s_ss->O_OBJ[R2]->TE_CLASS[R2019] where ( selected.Key_Lett == obj_key_letters );
  else
    msg = msg + "ERROR:  MarkPersistentClass( ${ss_prefix}, ${obj_key_letters} ) in component ${te_c.Name}\n";
  end if;
  for each te_class in te_classes
    te_class.Persistent = true;
    msg = msg + "Class ${te_class.Name} (${te_class.Key_Lett}) in component ${te_c.Name} marked as persistent.\n";
  end for;
  if ( "" != msg )
    T::print(s:"${msg}");
  end if;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("9fd1e825-dc79-44c2-9fcc-c52a62537dc6",
	"45af90c8-e423-4b36-8350-39a50f808f02",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("2ea40dc3-c9b9-464b-8c8d-99281a21b182",
	"45af90c8-e423-4b36-8350-39a50f808f02",
	'ss_prefix',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"9fd1e825-dc79-44c2-9fcc-c52a62537dc6",
	'');
INSERT INTO S_SPARM
	VALUES ("815632c2-7c85-417e-8b61-1ed7bb7095b8",
	"45af90c8-e423-4b36-8350-39a50f808f02",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"2ea40dc3-c9b9-464b-8c8d-99281a21b182",
	'');
INSERT INTO PE_PE
	VALUES ("45af90c8-e423-4b36-8350-39a50f808f02",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("1197312b-2d3d-4048-a286-edee041e1ecb",
	"00000000-0000-0000-0000-000000000000",
	'TagNonPersistentClass',
	'',
	'//
//============================================================================
// Disable persistent storage of the specified class or classes.
// This interface is meant to undo what the MarkPersistent interface
// does.  This way the user can tag all classes persistent and then
// unmark a few (rather than explicitly mark a whole bunch).
//============================================================================
ss_prefix = param.ss_prefix;
obj_key_letters = param.obj_key_letters;
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkNonPersistentClass( component_name:te_c.Name, ss_prefix:ss_prefix, obj_key_letters:obj_key_letters );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("534424e8-e771-45ab-9915-c0d887cf5799",
	"1197312b-2d3d-4048-a286-edee041e1ecb",
	'ss_prefix',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("698855a9-c211-47f1-adf4-8d48d3e732ec",
	"1197312b-2d3d-4048-a286-edee041e1ecb",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"534424e8-e771-45ab-9915-c0d887cf5799",
	'');
INSERT INTO PE_PE
	VALUES ("1197312b-2d3d-4048-a286-edee041e1ecb",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("04a648dc-28e5-4108-b3c3-123e245706f8",
	"00000000-0000-0000-0000-000000000000",
	'MarkNonPersistentClass',
	'',
	'component_name = param.component_name;
ss_prefix = param.ss_prefix;
obj_key_letters = param.obj_key_letters;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  msg = "";
  // Get set into scope.
  select many te_classes related by te_c->TE_CLASS[R2064] where ( false );
  // Check for an explicit object.
  // Check for an explicit subsystem.
  // Check a star in the subsystem and component.
  // Otherwise, generate a coloring error.
  if ( ( "*" == ss_prefix ) and ( "*" == obj_key_letters ) )
    select many te_classes related by te_c->TE_CLASS[R2064];
  elif ( "" == ss_prefix )
    select many te_classes related by te_c->TE_CLASS[R2064] where ( selected.Key_Lett == obj_key_letters );
  elif ( "*" == obj_key_letters )
    select any s_ss from instances of S_SS where ( selected.Name == ss_prefix );
    select many te_classes related by s_ss->O_OBJ[R2]->TE_CLASS[R2019] where ( selected.Key_Lett == obj_key_letters );
  else
    msg = msg + "ERROR:  MarkNonPersistentClass( ${ss_prefix}, ${obj_key_letters} ) in component ${te_c.Name}\n";
  end if;
  for each te_class in te_classes
    te_class.Persistent = false;
    msg = msg + "Class ${te_class.Name} (${te_class.Key_Lett}) in component ${te_c.Name} marked as not persistent.\n";
  end for;
  if ( "" != msg )
    T::print(s:"${msg}");
  end if;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("599171ee-1d78-44c8-901b-c07251fb4ffc",
	"04a648dc-28e5-4108-b3c3-123e245706f8",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("27578643-2c13-4425-9525-1ec486c900ea",
	"04a648dc-28e5-4108-b3c3-123e245706f8",
	'ss_prefix',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"599171ee-1d78-44c8-901b-c07251fb4ffc",
	'');
INSERT INTO S_SPARM
	VALUES ("801b2269-0704-4e46-a555-6bb7af5040f7",
	"04a648dc-28e5-4108-b3c3-123e245706f8",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"27578643-2c13-4425-9525-1ec486c900ea",
	'');
INSERT INTO PE_PE
	VALUES ("04a648dc-28e5-4108-b3c3-123e245706f8",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("b5c0f034-a1d9-4d4b-8e74-0879c5e98d80",
	"00000000-0000-0000-0000-000000000000",
	'MapClassToTask',
	'',
	'//
//============================================================================
// Map classes to tasks based upon user marking.  With this interface
// an individual class, subsystem or component can be mapped to the
// specified task.
//============================================================================
ss_prefix = param.ss_prefix;
obj_key_letters = param.obj_key_letters;
task = param.task;
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkClassToTask( component_name:te_c.Name, ss_prefix:ss_prefix, obj_key_letters:obj_key_letters, task:task );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("28d99838-d589-419b-a150-1286eccff301",
	"b5c0f034-a1d9-4d4b-8e74-0879c5e98d80",
	'ss_prefix',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("62773509-9b98-4e72-afaf-5576f568f99d",
	"b5c0f034-a1d9-4d4b-8e74-0879c5e98d80",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"28d99838-d589-419b-a150-1286eccff301",
	'');
INSERT INTO S_SPARM
	VALUES ("e18a4d44-370d-41d9-9271-7da130c1e035",
	"b5c0f034-a1d9-4d4b-8e74-0879c5e98d80",
	'task',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"62773509-9b98-4e72-afaf-5576f568f99d",
	'');
INSERT INTO PE_PE
	VALUES ("b5c0f034-a1d9-4d4b-8e74-0879c5e98d80",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("06bb3596-c3e7-4fa6-8bf4-b73401f1965d",
	"00000000-0000-0000-0000-000000000000",
	'MarkClassToTask',
	'',
	'component_name = param.component_name;
ss_prefix = param.ss_prefix;
obj_key_letters = param.obj_key_letters;
task = param.task;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  // Get set into scope.
  select many te_classes related by te_c->TE_CLASS[R2064] where ( false );
  // Check for an explicit object.
  // Check for an explicit subsystem.
  // Check a star in the subsystem and component.
  // Otherwise, generate a coloring error.
  if ( ( "*" == ss_prefix ) and ( "*" == obj_key_letters ) )
    select many te_classes related by te_c->TE_CLASS[R2064];
  elif ( "" == ss_prefix )
    select many te_classes related by te_c->TE_CLASS[R2064] where ( selected.Key_Lett == obj_key_letters );
  elif ( "*" == obj_key_letters )
    select any s_ss from instances of S_SS where ( selected.Name == ss_prefix );
    select many te_classes related by s_ss->O_OBJ[R2]->TE_CLASS[R2019] where ( selected.Key_Lett == obj_key_letters );
  else
    T::print(s:"ERROR:  MapClassToTask( ${ss_prefix}, ${obj_key_letters}, $t{task} ) in component ${te_c.Name}\n");
  end if;
  for each te_class in te_classes
    te_class.Task = task;
  end for;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("2820116d-da77-4e46-ad79-dc2d5c295740",
	"06bb3596-c3e7-4fa6-8bf4-b73401f1965d",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("8e163f27-4583-4ec2-9b82-4cdb55118f8f",
	"06bb3596-c3e7-4fa6-8bf4-b73401f1965d",
	'ss_prefix',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"2820116d-da77-4e46-ad79-dc2d5c295740",
	'');
INSERT INTO S_SPARM
	VALUES ("3cbd75cf-63fc-492a-a646-f074663f669c",
	"06bb3596-c3e7-4fa6-8bf4-b73401f1965d",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"8e163f27-4583-4ec2-9b82-4cdb55118f8f",
	'');
INSERT INTO S_SPARM
	VALUES ("7fce3efa-b21d-43e9-aea2-633f6036be72",
	"06bb3596-c3e7-4fa6-8bf4-b73401f1965d",
	'task',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"3cbd75cf-63fc-492a-a646-f074663f669c",
	'');
INSERT INTO PE_PE
	VALUES ("06bb3596-c3e7-4fa6-8bf4-b73401f1965d",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("e0384e9c-1a97-47ad-a364-ab5df8e21a2f",
	"00000000-0000-0000-0000-000000000000",
	'MarkAsChannel',
	'',
	'//============================================================================
// $RCSfile: m.component.arc,v $
//
// Description:
// Component level marking functions are found here.
//
// Notice:
// (C) Copyright 1998-2013 Mentor Graphics Corporation
//     All rights reserved.
//
// This document contains confidential and proprietary information and
// property of Mentor Graphics Corp.  No part of this document may be
// reproduced without the express written permission of Mentor Graphics Corp.
//============================================================================
//
//
//============================================================================
// Mark components as channels using package name and/or component
// name as the selection criteria.
//============================================================================
package_name = param.package_name;
component_name = param.component_name;
inc_file = param.inc_file;
::MarkComponentAsChannel( package_name:package_name, component_name:component_name, inc_file:inc_file );
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("ba52b68a-36aa-4bd6-92cb-c6f70bc832b3",
	"e0384e9c-1a97-47ad-a364-ab5df8e21a2f",
	'package_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("6fbc825a-e31e-4a4b-a3b6-44082cd3c1e9",
	"e0384e9c-1a97-47ad-a364-ab5df8e21a2f",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"ba52b68a-36aa-4bd6-92cb-c6f70bc832b3",
	'');
INSERT INTO S_SPARM
	VALUES ("1d46b9fc-6427-4d46-85ee-3e67f465055f",
	"e0384e9c-1a97-47ad-a364-ab5df8e21a2f",
	'inc_file',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"6fbc825a-e31e-4a4b-a3b6-44082cd3c1e9",
	'');
INSERT INTO PE_PE
	VALUES ("e0384e9c-1a97-47ad-a364-ab5df8e21a2f",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("c27acb8e-96e4-4550-b420-8ca33ed7cf74",
	"00000000-0000-0000-0000-000000000000",
	'MarkComponentAsChannel',
	'',
	'package_name = param.package_name;
component_name = param.component_name;
inc_file = param.inc_file;
select many c_cs from instances of C_C where ( false );
if ( ( ( "" == package_name ) and ( "" == component_name ) ) or ( ( "*" == package_name ) and ( "*" == component_name ) ) )
  // all components
  select many c_cs from instances of C_C;
elif ( ( "" == package_name ) or ( "*" == package_name ) )
  // matches without respect to package
  select many c_cs from instances of C_C where ( selected.Name == component_name );
elif ( ( "" == component_name ) or ( "*" == component_name ) )
  // all components in packages with given name
  select many ep_pkgs from instances of EP_PKG where ( selected.Name == package_name );
  select many c_cs related by ep_pkgs->PE_PE[R8000]->C_C[R8001];
else
  // particular component in particular package(s)
  select many ep_pkgs from instances of EP_PKG where ( selected.Name == package_name );
  select many c_cs related by ep_pkgs->PE_PE[R8000]->C_C[R8001] where ( selected.Name == component_name );
end if;
select many te_cs related by c_cs->TE_C[R2054];
if ( empty te_cs )
  T::print(s:"WARNING:  MarkComponentAsChannel - Could not find component ${package_name}::${component_name}.");
end if;
for each te_c in te_cs
  select one tm_c related by te_c->TM_C[R2804];
  if ( empty tm_c )
    create object instance tm_c of TM_C;
    tm_c.Package = package_name;
    tm_c.Name = component_name;
    relate te_c to tm_c across R2804;
  end if;
  tm_c.isChannel = true;
  tm_c.include_file = inc_file;
  // Now that we have marked this component as a channel modify the message names
  select many te_macts related by te_c->TE_MACT[R2002];
  for each te_mact in te_macts
    select one te_aba related by te_mact->TE_ABA[R2010];
    te_mact.GeneratedName = te_mact.MessageName;
    te_mact.GeneratedName = T::r(s:te_mact.GeneratedName);
    te_aba.GeneratedName = te_mact.GeneratedName;
  end for;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("0d0ff3b1-167f-4dab-a82c-5821f87b6f0f",
	"c27acb8e-96e4-4550-b420-8ca33ed7cf74",
	'package_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("8d8c90e8-bb85-4b5e-a1fe-a23e1fbf7472",
	"c27acb8e-96e4-4550-b420-8ca33ed7cf74",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"0d0ff3b1-167f-4dab-a82c-5821f87b6f0f",
	'');
INSERT INTO S_SPARM
	VALUES ("47425e9e-4005-4eac-8a88-6c2db070891a",
	"c27acb8e-96e4-4550-b420-8ca33ed7cf74",
	'inc_file',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"8d8c90e8-bb85-4b5e-a1fe-a23e1fbf7472",
	'');
INSERT INTO PE_PE
	VALUES ("c27acb8e-96e4-4550-b420-8ca33ed7cf74",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("ce9fb8df-7e94-4fe0-9e3c-d2291ceb8e0d",
	"00000000-0000-0000-0000-000000000000",
	'MarkComponentWithTemplate',
	'',
	'//
//============================================================================
// Mark a component that has a C++ template.
//============================================================================
package_name = param.package_name;
component_name = param.component_name;
select many c_cs from instances of C_C where ( false );
if ( ( ( "" == package_name ) and ( "" == component_name ) ) or ( ( "*" == package_name ) and ( "*" == component_name ) ) )
  // all components
  select many c_cs from instances of C_C;
elif ( ( "" == package_name ) or ( "*" == package_name ) )
  // matches without respect to package
  select many c_cs from instances of C_C where ( selected.Name == component_name );
elif ( ( "" == component_name ) or ( "*" == component_name ) )
  // all components in packages with given name
  select many ep_pkgs from instances of EP_PKG where ( selected.Name == package_name );
  select many c_cs related by ep_pkgs->PE_PE[R8000]->C_C[R8001];
else
  // particular component in particular package(s)
  select many ep_pkgs from instances of EP_PKG where ( selected.Name == package_name );
  select many c_cs related by ep_pkgs->PE_PE[R8000]->C_C[R8001] where ( selected.Name == component_name );
end if;
select many te_cs related by c_cs->TE_C[R2054];
if ( empty te_cs )
  T::print(s:"WARNING:  MarkComponentWithTemplate - Could not find component ${package_name}::${component_name}.");
end if;
for each te_c in te_cs
  select one tm_c related by te_c->TM_C[R2804];
  if ( empty tm_c )
    create object instance tm_c of TM_C;
    tm_c.Package = package_name;
    tm_c.Name = component_name;
    tm_c.isChannel = false;
    tm_c.include_file = "";
  end if;
  if ( not_empty te_c )
    relate te_c to tm_c across R2804;
  end if;
  // Make the new template the current one for follow-on markings.
  select many tm_templates from instances of TM_TEMPLATE;
  for each tm_template in tm_templates
    tm_template.current = false;
  end for;
  create object instance tm_template of TM_TEMPLATE;
  tm_template.current = true;
  relate tm_template to tm_c across R2800;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("d44c4dbe-b3f3-41cc-ae6d-76bc1d86f36a",
	"ce9fb8df-7e94-4fe0-9e3c-d2291ceb8e0d",
	'package_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("1676a286-8ebe-4213-9246-b7b64e269a01",
	"ce9fb8df-7e94-4fe0-9e3c-d2291ceb8e0d",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"d44c4dbe-b3f3-41cc-ae6d-76bc1d86f36a",
	'');
INSERT INTO PE_PE
	VALUES ("ce9fb8df-7e94-4fe0-9e3c-d2291ceb8e0d",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("789bbbed-8014-41af-bca3-2cc8b1df929a",
	"00000000-0000-0000-0000-000000000000",
	'MarkInterfaceWithTemplate',
	'',
	'//
//============================================================================
// Mark an interface that has a C++ template.
//============================================================================
package_name = param.package_name;
interface_name = param.interface_name;
select any c_i from instances of C_I where ( false );
if ( ( "" == package_name ) or ( "*" == package_name ) )
  select any c_i from instances of C_I where ( selected.Name == interface_name );
else
  select many ep_pkgs from instances of EP_PKG where ( selected.Name == package_name );
  select any c_i related by ep_pkgs->PE_PE[R8000]->C_I[R8001] where ( selected.Name == interface_name );
end if;
if ( empty c_i )
  T::print(s:"WARNING:  MarkInterfaceWithTemplate - Could not find interface ${package_name}::${interface_name}.");
end if;
create object instance tm_if of TM_IF;
tm_if.Package = package_name;
tm_if.Name = interface_name;
relate tm_if to c_i across R2807;
// Make the new template the current one for follow-on markings.
select many tm_templates from instances of TM_TEMPLATE;
for each tm_template in tm_templates
  tm_template.current = false;
end for;
create object instance tm_template of TM_TEMPLATE;
tm_template.current = true;
relate tm_template to tm_if across R2802;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("5828086d-6630-47b2-aa39-702f7c130f7b",
	"789bbbed-8014-41af-bca3-2cc8b1df929a",
	'package_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("fc08372c-382b-4c02-ac56-4de3a0c18eca",
	"789bbbed-8014-41af-bca3-2cc8b1df929a",
	'interface_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"5828086d-6630-47b2-aa39-702f7c130f7b",
	'');
INSERT INTO PE_PE
	VALUES ("789bbbed-8014-41af-bca3-2cc8b1df929a",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("e8af11b7-d963-49e3-a11e-2b958a53745e",
	"00000000-0000-0000-0000-000000000000",
	'AddTemplateParameter',
	'',
	'//
//============================================================================
// Add a template parameter to a C++ template.
// The template is located based upon the associated component.
//============================================================================
package_name = param.package_name;
component_name = param.component_name;
type_name = param.type_name;
variable_name = param.variable_name;
default_value = param.default_value;
select any tm_template from instances of TM_TEMPLATE where ( selected.current );
select any tm_c from instances of TM_C where ( ( selected.Package == package_name ) and ( selected.Name == component_name ) );
if ( ( "" == package_name ) or ( "*" == package_name ) )
  select any tm_c from instances of TM_C where ( selected.Name == component_name );
  if ( empty tm_c )
    select one tm_c related by tm_template->TM_C[R2800];
  end if;
end if;
if ( empty tm_c )
  select any tm_if from instances of TM_IF where ( ( selected.Package == package_name ) and ( selected.Name == component_name ) );
  if ( ( "" == package_name ) or ( "*" == package_name ) )
    select any tm_if from instances of TM_IF where ( selected.Name == component_name );
    if ( empty tm_if )
      select one tm_if related by tm_template->TM_IF[R2802];
    end if;
  end if;
  if ( empty tm_if )
    T::print(s:"ERROR:  AddTemplateParameter - Could not find element (component or interface) ${package_name}::${component_name}.");
  else
    select one tm_template related by tm_if->TM_TEMPLATE[R2802];
  end if;
else
  select one tm_template related by tm_c->TM_TEMPLATE[R2800];
end if;
if ( not_empty tm_template )
  create object instance tm_tp of TM_TP;
  relate tm_tp to tm_template across R2801;
  tm_tp.typename = type_name;
  tm_tp.Name = variable_name;
  tm_tp.DefaultValue = default_value;
else
  T::print(s:"ERROR:  AddTemplateParameter - Could not find template for element ${package_name}::${component_name}.");
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("7fb209e0-66e5-41ae-8f20-5bb48be66ce1",
	"e8af11b7-d963-49e3-a11e-2b958a53745e",
	'package_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("f0956f73-b3ac-4c39-91d2-8838ce3fa994",
	"e8af11b7-d963-49e3-a11e-2b958a53745e",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"7fb209e0-66e5-41ae-8f20-5bb48be66ce1",
	'');
INSERT INTO S_SPARM
	VALUES ("051fd73e-c969-4623-b341-7bc489f1e3a8",
	"e8af11b7-d963-49e3-a11e-2b958a53745e",
	'type_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"f0956f73-b3ac-4c39-91d2-8838ce3fa994",
	'');
INSERT INTO S_SPARM
	VALUES ("ea09ea1d-7ece-4687-9504-588ef7bc8e2b",
	"e8af11b7-d963-49e3-a11e-2b958a53745e",
	'variable_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"051fd73e-c969-4623-b341-7bc489f1e3a8",
	'');
INSERT INTO S_SPARM
	VALUES ("c61d7e13-032c-4084-af95-6ac07210f4de",
	"e8af11b7-d963-49e3-a11e-2b958a53745e",
	'default_value',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"ea09ea1d-7ece-4687-9504-588ef7bc8e2b",
	'');
INSERT INTO PE_PE
	VALUES ("e8af11b7-d963-49e3-a11e-2b958a53745e",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("7ece34e6-2222-4997-ad0d-896dc6448121",
	"00000000-0000-0000-0000-000000000000",
	'SetTemplateParameter',
	'',
	'//
//============================================================================
// Set the template parameter for an instance of a component or interface
// class.  The template is navigated based upon the associated package
// and instance.
//============================================================================
package_name = param.package_name;
instance = param.instance;
variable_name = param.variable_name;
value = param.value;
// Base selection upon the template that most recently got created.
select any tm_template from instances of TM_TEMPLATE where ( selected.current );
select one tm_c related by tm_template->TM_C[R2800];
select one tm_if related by tm_template->TM_IF[R2802];
select any tm_tp related by tm_template->TM_TP[R2801] where ( selected.Name == variable_name );
if ( ( ( "" == package_name ) or ( "" == instance ) ) or ( ( "" == variable_name ) or ( "" == value ) ) )
  T::print(s:"ERROR:  SetTemplateParameter -  Must provide valid strings for all arguments. ${package_name}::${instance}.${variable_name} to value ${value}.");
else
  select any ep_pkg from instances of EP_PKG where ( selected.Name == package_name );
  if ( empty ep_pkg )
    T::print(s:"ERROR:  SetTemplateParameter -  Package, ${package_name}, not found for ${package_name}::${instance}.${variable_name} to value ${value}.");
  end if;
  if ( not_empty tm_tp )
    if ( not_empty tm_c )
      select any te_ci related by ep_pkg->PE_PE[R8000]->CL_IC[R8001]->TE_CI[R2009] where ( selected.ClassifierName == instance );
      if ( empty te_ci )
        select any te_ci related by ep_pkg->PE_PE[R8000]->C_C[R8001]->CL_IC[R4205]->TE_CI[R2009] where ( selected.ClassifierName == instance );
      end if;
      if ( not_empty te_ci )
        create object instance tm_tpv of TM_TPV;
        tm_tpv.instance = instance;
        tm_tpv.value = value;
        relate tm_tpv to tm_tp across R2808;
        relate tm_tpv to te_ci across R2805;
              else
        T::print(s:"ERROR:  SetTemplateParameter - no component instance for ${package_name}::${instance} with name ${variable_name}.");
      end if;
    elif ( not_empty tm_if )
      select many te_iirs related by ep_pkg->PE_PE[R8000]->CL_IC[R8001]->CL_IIR[R4700]->TE_IIR[R2013] where ( ( selected.port_name == instance ) and ( selected.interface_name == tm_if.Name ) );
      for each te_iir in te_iirs
        create object instance tm_tpv of TM_TPV;
        tm_tpv.instance = instance;
        tm_tpv.value = value;
        relate tm_tpv to tm_tp across R2808;
        relate tm_tpv to te_iir across R2806;
              end for;
      select many te_iirs related by ep_pkg->PE_PE[R8000]->C_C[R8001]->CL_IC[R4205]->CL_IIR[R4700]->TE_IIR[R2013] where ( ( selected.port_name == instance ) and ( selected.interface_name == tm_if.Name ) );
      for each te_iir in te_iirs
        create object instance tm_tpv of TM_TPV;
        tm_tpv.instance = instance;
        tm_tpv.value = value;
        relate tm_tpv to tm_tp across R2808;
        relate tm_tpv to te_iir across R2806;
              end for;
      select many te_iirs related by ep_pkg->PE_PE[R8000]->C_C[R8001]->C_PO[R4010]->C_IR[R4016]->TE_IIR[R2046] where ( ( selected.port_name == instance ) and ( selected.interface_name == tm_if.Name ) );
      for each te_iir in te_iirs
        create object instance tm_tpv of TM_TPV;
        tm_tpv.instance = instance;
        tm_tpv.value = value;
        relate tm_tpv to tm_tp across R2808;
        relate tm_tpv to te_iir across R2806;
              end for;
    else
      T::print(s:"ERROR:  SetTemplateParameter - Found a template parameter for a template that is orphaned.");
    end if;
  else
    T::print(s:"WARNING:  SetTemplateParameter - Did NOT find template parameter for package ${package_name}::${instance} with name ${variable_name}.");
  end if;
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("01c5a695-d8ba-4a59-a179-740d32f16530",
	"7ece34e6-2222-4997-ad0d-896dc6448121",
	'package_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("dc6d47a9-8090-4937-bfec-1ed069ce9da5",
	"7ece34e6-2222-4997-ad0d-896dc6448121",
	'instance',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"01c5a695-d8ba-4a59-a179-740d32f16530",
	'');
INSERT INTO S_SPARM
	VALUES ("4223d4da-32c2-44d4-af00-78bef9717be1",
	"7ece34e6-2222-4997-ad0d-896dc6448121",
	'variable_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"dc6d47a9-8090-4937-bfec-1ed069ce9da5",
	'');
INSERT INTO S_SPARM
	VALUES ("68c3aa4a-f8df-4806-a53c-eea763880a2f",
	"7ece34e6-2222-4997-ad0d-896dc6448121",
	'value',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"4223d4da-32c2-44d4-af00-78bef9717be1",
	'');
INSERT INTO PE_PE
	VALUES ("7ece34e6-2222-4997-ad0d-896dc6448121",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("ea146d28-06eb-433f-8e41-4fdeebb1f88c",
	"00000000-0000-0000-0000-000000000000",
	'SetTPV',
	'',
	'//
//============================================================================
// Set Template Parameter Value
//   Once components and interfaces have been marked with C++ templates
//   and all template parameters added, the template parameter values can
//   be set and associated with the appropriate component and interface
//   instances (component references and ports).
//   Set the template parameter for an instance of a component or interface
//   class.  The template is navigated based upon the associated package
//   and instance.
//============================================================================
package_name = param.package_name;
parent_component = param.parent_component;
component = param.component;
classifier_name = param.classifier_name;
port = param.port;
variable_name = param.variable_name;
value = param.value;
trace = "${package_name}::${parent_component}::${component}:${classifier_name}.${variable_name} value ${value} (and port ${port})";
if ( ( ( "" == package_name ) or ( "" == component ) ) or ( ( "" == classifier_name ) or ( ( ( "" == variable_name ) or ( "" == value ) ) ) ) )
  T::print(s:"ERROR:  SetTPV - Must provide valid strings for all arguments except the optional port, ${package_name}::${parent_component}::${component}:${classifier_name}.${variable_name} to value ${value} (and port ${port}).");
else
  select any ep_pkg from instances of EP_PKG where ( selected.Name == package_name );
  if ( empty ep_pkg )
    T::print(s:"ERROR:  SetTPV -  Package, ${package_name}, not found for ${package_name}::${parent_component}::${component}:${classifier_name}.${variable_name} to value ${value}.");
  end if;
  select many te_cis related by ep_pkg->PE_PE[R8000]->CL_IC[R8001]->TE_CI[R2009] where ( ( selected.Name == component ) and ( selected.ClassifierName == classifier_name ) );
  if ( "" != parent_component )
    select many c_cs related by ep_pkg->PE_PE[R8000]->C_C[R8001] where ( selected.Name == parent_component );
    select many te_cis related by c_cs->CL_IC[R4205]->TE_CI[R2009] where ( ( selected.Name == component ) and ( selected.ClassifierName == classifier_name ) );
  else
    if ( empty te_cis )
      select many te_cis related by ep_pkg->PE_PE[R8000]->C_C[R8001]->CL_IC[R4205]->TE_CI[R2009] where ( ( selected.Name == component ) and ( selected.ClassifierName == classifier_name ) );
    end if;
  end if;
  te_cis_count = cardinality te_cis;
  if ( te_cis_count > 1 )
    T::print(s:"WARNING:  SetTPV - More than one instantiation found for ${package_name}::${parent_component}::${component}:${classifier_name}.${variable_name} to value ${value}.");
    T::print(s:"                   All instantiations will be marked to receive the same template parameter value.");
  elif ( 0 == te_cis_count )
    T::print(s:"ERROR:  SetTPV - Component instance not found for ${package_name}::${parent_component}::${component}:${classifier_name}.");
  end if;
  if ( "" == port )
    // We are setting values for component templates.
    for each te_ci in te_cis
      select one tm_template related by te_ci->TE_C[R2008]->TM_C[R2804]->TM_TEMPLATE[R2800];
      select any tm_tp related by tm_template->TM_TP[R2801] where ( selected.Name == variable_name );
      if ( not_empty tm_tp )
        // Create the template parameter value and link it in.
        create object instance tm_tpv of TM_TPV;
        tm_tpv.instance = component;
        tm_tpv.value = value;
        relate tm_tpv to tm_tp across R2808;
        relate tm_tpv to te_ci across R2805;
              else
        T::print(s:"WARNING:  SetTPV - Template parameter not found for ${package_name}::${parent_component}::${component}:${classifier_name}.");
      end if;
    end for;
  else
    // We are setting a value for an interface template.
    for each te_ci in te_cis
      select any te_iir related by te_ci->CL_IC[R2009]->CL_IIR[R4700]->TE_IIR[R2013] where ( selected.port_name == port );
      ::SetTPV_for_channel_connection( te_iir:te_iir, variable_name:variable_name, value:value, trace:trace, flavor:0 );
    end for;
  end if;
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("ffb428b4-0b84-44e0-9d73-1c468bc6b733",
	"ea146d28-06eb-433f-8e41-4fdeebb1f88c",
	'package_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("56c8c6a8-9b2e-4946-b2b5-88b08e436d2d",
	"ea146d28-06eb-433f-8e41-4fdeebb1f88c",
	'parent_component',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"ffb428b4-0b84-44e0-9d73-1c468bc6b733",
	'');
INSERT INTO S_SPARM
	VALUES ("891f9513-3d78-47d1-9fa9-293106c82f00",
	"ea146d28-06eb-433f-8e41-4fdeebb1f88c",
	'component',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"56c8c6a8-9b2e-4946-b2b5-88b08e436d2d",
	'');
INSERT INTO S_SPARM
	VALUES ("d648bdea-bea8-48ad-bc8a-fbb6d0accbc6",
	"ea146d28-06eb-433f-8e41-4fdeebb1f88c",
	'classifier_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"891f9513-3d78-47d1-9fa9-293106c82f00",
	'');
INSERT INTO S_SPARM
	VALUES ("a9c9d450-162e-4e23-8e10-83bf76f3ee67",
	"ea146d28-06eb-433f-8e41-4fdeebb1f88c",
	'port',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"d648bdea-bea8-48ad-bc8a-fbb6d0accbc6",
	'');
INSERT INTO S_SPARM
	VALUES ("ebeea8ce-1c15-442a-848c-04dfdbe457d8",
	"ea146d28-06eb-433f-8e41-4fdeebb1f88c",
	'variable_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"a9c9d450-162e-4e23-8e10-83bf76f3ee67",
	'');
INSERT INTO S_SPARM
	VALUES ("7f92cf15-bed0-440f-bb94-6c119d4688a2",
	"ea146d28-06eb-433f-8e41-4fdeebb1f88c",
	'value',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"ebeea8ce-1c15-442a-848c-04dfdbe457d8",
	'');
INSERT INTO PE_PE
	VALUES ("ea146d28-06eb-433f-8e41-4fdeebb1f88c",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("04286a93-afd4-4d3d-bcf8-0800fc46e5cc",
	"00000000-0000-0000-0000-000000000000",
	'SetTPV_for_channel_connection',
	'',
	'//
// Rules
// Always start from IIR.
// On a first call, first try to cross a satisfaction from IIR.
// It is only possible to go upward on a delegation on the first call.
// After the first call, it is O.K. to cross a satisfaction after crossing
// a delegation.
// After traversing to an imported interface reference, consider marking
// the associated interface reference.  (Mark both.)
// Gather all the delegated_te_iirs into a collection and then loop through.
// This is necessary for delegations only.
// Be smart and look for only the right types in the right direction.
te_iir = param.te_iir;
variable_name = param.variable_name;
value = param.value;
trace = param.trace;
flavor = param.flavor;
select many delegated_te_iirs from instances of TE_IIR where ( false );
// flavors:  0:firstcall, 1:coming from satisfaction, 2:coming from delegation
select any tm_tp related by te_iir->C_IR[R2046]->C_I[R4012]->TM_IF[R2807]->TM_TEMPLATE[R2802]->TM_TP[R2801] where ( selected.Name == variable_name );
if ( empty tm_tp )
  select any tm_tp related by te_iir->CL_IIR[R2013]->C_IR[R4701]->C_I[R4012]->TM_IF[R2807]->TM_TEMPLATE[R2802]->TM_TP[R2801] where ( selected.Name == variable_name );
  if ( empty tm_tp )
    T::print(s:"WARNING:  SetTPV - Template parameter not found for ${trace}.");
  end if;
end if;
// Determine whether we have an interface reference for a component marked
// as a channel.  Process channel interface references on first call only.
select one tm_c related by te_iir->TE_PO[R2080]->TE_C[R2005]->TM_C[R2804];
isChannel = false;
if ( not_empty tm_c )
  isChannel = tm_c.isChannel;
end if;
// See if this template parameter already has a value for this reference.
select any tm_tpv related by te_iir->TM_TPV[R2806] where ( ( selected.instance == te_iir.interface_name ) and ( selected.tm_tpID == tm_tp.ID ) );
// If isChannel, then skip unless it is the first call.
if ( ( ( ( empty tm_tpv ) and ( not_empty tm_tp ) ) and ( not isChannel ) ) or ( 0 == flavor ) )
  //.select one te_c related by te_iir->TE_PO[R2080]->TE_C[R2005]
  //.print "${trace} ${te_iir.port_name} ${te_c.Name}"
  create object instance tm_tpv of TM_TPV;
  tm_tpv.instance = te_iir.interface_name;
  tm_tpv.value = value;
  relate tm_tpv to tm_tp across R2808;
  relate tm_tpv to te_iir across R2806;
    //
  // Find a satisfaction or delegation.  Recursively apply the same template parameter value to the connections.
  select one satisfied_te_iir related by te_iir->TE_IIR[R2081.''requires or delegates''] where ( false );
  if ( ( 0 == flavor ) or ( 2 == flavor ) )
    // iir to iir
    // Search from imported reference across satisfaction to imported reference provision to requirement.
    select many satisfied_te_iirs related by te_iir->CL_IIR[R2013]->CL_IP[R4703]->CL_IPINS[R4705]->C_SF[R4705]->CL_IR[R4706]->CL_IIR[R4703]->TE_IIR[R2013];
    if ( not_empty satisfied_te_iirs )
      for each satisfied_te_iir in satisfied_te_iirs
        ::SetTPV_for_channel_connection( te_iir:satisfied_te_iir, variable_name:variable_name, value:value, trace:" 1${trace}", flavor:1 );
      end for;
    else
      // Search from imported reference across satisfaction to imported reference requirement to provision.
      select one satisfied_te_iir related by te_iir->CL_IIR[R2013]->CL_IR[R4703]->C_SF[R4706]->CL_IPINS[R4705]->CL_IP[R4705]->CL_IIR[R4703]->TE_IIR[R2013];
      if ( not_empty satisfied_te_iir )
        ::SetTPV_for_channel_connection( te_iir:satisfied_te_iir, variable_name:variable_name, value:value, trace:" 2${trace}", flavor:1 );
      else
        // mixed iir and ir
        // Search from imported reference across satisfaction to reference imported provision to requirement.
        select many satisfied_te_iirs related by te_iir->CL_IIR[R2013]->CL_IP[R4703]->CL_IPINS[R4705]->C_SF[R4705]->C_R[R4002]->C_IR[R4009]->TE_IIR[R2046];
        if ( not_empty satisfied_te_iirs )
          for each satisfied_te_iir in satisfied_te_iirs
            ::SetTPV_for_channel_connection( te_iir:satisfied_te_iir, variable_name:variable_name, value:value, trace:" 3${trace}", flavor:1 );
          end for;
        else
          // Search from imported reference across satisfaction to reference imported requirement to provision.
          select one satisfied_te_iir related by te_iir->CL_IIR[R2013]->CL_IR[R4703]->C_SF[R4706]->C_P[R4002]->C_IR[R4009]->TE_IIR[R2046];
          if ( not_empty satisfied_te_iir )
            ::SetTPV_for_channel_connection( te_iir:satisfied_te_iir, variable_name:variable_name, value:value, trace:" 4${trace}", flavor:1 );
          else
            // Search from reference across satisfaction to reference provision to requirement.
            select any satisfied_te_iir related by te_iir->C_IR[R2046]->C_P[R4009]->C_SF[R4002]->C_R[R4002]->C_IR[R4009]->TE_IIR[R2046];
            if ( not_empty satisfied_te_iir )
              ::SetTPV_for_channel_connection( te_iir:satisfied_te_iir, variable_name:variable_name, value:value, trace:" 4a${trace}", flavor:1 );
            else
              // Search from reference across satisfaction to reference requirement to provision.
              select any satisfied_te_iir related by te_iir->C_IR[R2046]->C_R[R4009]->C_SF[R4002]->C_P[R4002]->C_IR[R4009]->TE_IIR[R2046];
              if ( not_empty satisfied_te_iir )
                ::SetTPV_for_channel_connection( te_iir:satisfied_te_iir, variable_name:variable_name, value:value, trace:" 4b${trace}", flavor:1 );
              else
                // Search from reference across satisfaction to imported reference imported provision to requirement.
                // CDS should not find these, because we already go the other mixed direction?
                //.select one satisfied_te_iir related by te_iir->C_IR[R2046]->C_P[R4009]->C_SF[R4002]->CL_IR[R4706]->CL_IIR[R4703]->TE_IIR[R2013]
                if ( not_empty satisfied_te_iir )
                  ::SetTPV_for_channel_connection( te_iir:satisfied_te_iir, variable_name:variable_name, value:value, trace:" 5${trace}", flavor:1 );
                else
                  // Search from reference across satisfaction to imported reference imported requirement to provision.
                  // CDS should not find these, because we already go the other mixed direction?
                  //.select one satisfied_te_iir related by te_iir->C_IR[R2046]->C_R[R4009]->C_SF[R4002]->CL_IPINS[R4705]->CL_IP[R4705]->CL_IIR[R4703]->TE_IIR[R2013]
                  if ( not_empty satisfied_te_iir )
                    ::SetTPV_for_channel_connection( te_iir:satisfied_te_iir, variable_name:variable_name, value:value, trace:" 6${trace}", flavor:1 );
                  end if;
                end if;
              end if;
            end if;
          end if;
        end if;
      end if;
    end if;
  end if;
  // delegation
  if ( empty satisfied_te_iir )
    select one delegated_te_iir related by satisfied_te_iir->TE_IIR[R2081.''requires or delegates''] where ( false );
    // IIR IR DG  RID IR
    select any delegated_te_iir related by te_iir->CL_IIR[R2013]->C_DG[R4704]->C_RID[R4013]->C_IR[R4013]->TE_IIR[R2046];
    if ( not_empty delegated_te_iir )
      delegated_te_iirs = delegated_te_iirs;
      trace = "7a " + trace;
    end if;
    select any delegated_te_iir related by te_iir->CL_IIR[R2013]->C_IR[R4701]->C_RID[R4013]->C_DG[R4013]->CL_IIR[R4704]->TE_IIR[R2013];
    if ( not_empty delegated_te_iir )
      delegated_te_iirs = delegated_te_iirs;
      trace = "7b " + trace;
    end if;
    //     IR DG  RID IR
    select any delegated_te_iir related by te_iir->C_IR[R2046]->C_DG[R4014]->C_RID[R4013]->C_IR[R4013]->TE_IIR[R2046];
    if ( not_empty delegated_te_iir )
      delegated_te_iirs = delegated_te_iirs;
      trace = "8a " + trace;
    end if;
    //     IR RID DG  IR
    select any delegated_te_iir related by te_iir->C_IR[R2046]->C_RID[R4013]->C_DG[R4013]->C_IR[R4014]->TE_IIR[R2046];
    if ( not_empty delegated_te_iir )
      delegated_te_iirs = delegated_te_iirs;
      trace = "8b " + trace;
    end if;
    // IIR IR DG  RID IR
    select any delegated_te_iir related by te_iir->CL_IIR[R2013]->C_IR[R4701]->C_DG[R4014]->C_RID[R4013]->C_IR[R4013]->TE_IIR[R2046];
    if ( not_empty delegated_te_iir )
      delegated_te_iirs = delegated_te_iirs;
      trace = "8c " + trace;
    end if;
    //     IR DG  RID IR IIR
    select any delegated_te_iir related by te_iir->C_IR[R2046]->C_DG[R4014]->C_RID[R4013]->C_IR[R4013]->CL_IIR[R4701]->TE_IIR[R2013];
    if ( not_empty delegated_te_iir )
      delegated_te_iirs = delegated_te_iirs;
      trace = "8d " + trace;
    end if;
    // IIR IR RID DG  IR
    select many more_delegated_te_iirs related by te_iir->CL_IIR[R2013]->C_IR[R4701]->C_RID[R4013]->C_DG[R4013]->C_IR[R4014]->TE_IIR[R2046];
    if ( not_empty more_delegated_te_iirs )
      delegated_te_iirs = delegated_te_iirs;
      trace = "8e " + trace;
    end if;
    //     IR RID DG  IR IIR
    select many more_delegated_te_iirs related by te_iir->C_IR[R2046]->C_RID[R4013]->C_DG[R4013]->C_IR[R4014]->CL_IIR[R4701]->TE_IIR[R2013];
    if ( not_empty more_delegated_te_iirs )
      delegated_te_iirs = delegated_te_iirs;
      trace = "8f " + trace;
    end if;
    // IIR IR DG  RID IR IIR
    select any delegated_te_iir related by te_iir->CL_IIR[R2013]->C_IR[R4701]->C_DG[R4014]->C_RID[R4013]->C_IR[R4013]->CL_IIR[R4701]->TE_IIR[R2013];
    if ( not_empty delegated_te_iir )
      delegated_te_iirs = delegated_te_iirs;
      trace = "8g " + trace;
    end if;
    // IIR IR RID DG  IR IIR
    select many more_delegated_te_iirs related by te_iir->CL_IIR[R2013]->C_IR[R4701]->C_RID[R4013]->C_DG[R4013]->C_IR[R4014]->CL_IIR[R4701]->TE_IIR[R2013];
    if ( not_empty more_delegated_te_iirs )
      delegated_te_iirs = delegated_te_iirs;
      trace = "8h " + trace;
    end if;
    select any delegated_te_iir related by te_iir->CL_IIR[R2013]->C_IR[R4701]->C_RID[R4013]->C_DG[R4013]->C_IR[R4014]->TE_IIR[R2046];
    if ( not_empty delegated_te_iir )
      delegated_te_iirs = delegated_te_iirs;
      trace = "B " + trace;
    end if;
    for each delegated_te_iir in delegated_te_iirs
      ::SetTPV_for_channel_connection( te_iir:delegated_te_iir, variable_name:variable_name, value:value, trace:"${trace}", flavor:2 );
    end for;
  end if;
else
  if ( empty tm_tp )
    T::print(s:"SetTPV:  warning - no variable ${te_iir.port_name} ${te_iir.interface_name}");
  end if;
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("58106f50-eacd-404b-9afc-7e771c2232d3",
	"04286a93-afd4-4d3d-bcf8-0800fc46e5cc",
	'te_iir',
	"149ddb67-8f06-43ce-87d4-ecd7ebdd1dd4",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("149ddb67-8f06-43ce-87d4-ecd7ebdd1dd4",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Interface Instance>',
	'',
	'',
	'../Translation Extensions/Translation Extensions.xtuml');
INSERT INTO S_SPARM
	VALUES ("9d051a48-44b1-4876-8c39-8fae2eed214a",
	"04286a93-afd4-4d3d-bcf8-0800fc46e5cc",
	'variable_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"58106f50-eacd-404b-9afc-7e771c2232d3",
	'');
INSERT INTO S_SPARM
	VALUES ("090c1386-daa2-4db2-8ee3-6e9fbfdfb709",
	"04286a93-afd4-4d3d-bcf8-0800fc46e5cc",
	'value',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"9d051a48-44b1-4876-8c39-8fae2eed214a",
	'');
INSERT INTO S_SPARM
	VALUES ("a95a058e-a37e-4092-bc79-c574915018b0",
	"04286a93-afd4-4d3d-bcf8-0800fc46e5cc",
	'trace',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"090c1386-daa2-4db2-8ee3-6e9fbfdfb709",
	'');
INSERT INTO S_SPARM
	VALUES ("bdf2f11f-5784-456a-bd0d-f00a83c35d2c",
	"04286a93-afd4-4d3d-bcf8-0800fc46e5cc",
	'flavor',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"a95a058e-a37e-4092-bc79-c574915018b0",
	'');
INSERT INTO PE_PE
	VALUES ("04286a93-afd4-4d3d-bcf8-0800fc46e5cc",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("9a1b2170-4729-458c-82e5-d23ac3a0764c",
	"00000000-0000-0000-0000-000000000000",
	'MarkInterfacePrefix',
	'',
	'//
//============================================================================
// Mark the prefixes for the interface naming.
//============================================================================
provided_port = param.provided_port;
required_port = param.required_port;
channel = param.channel;
select any te_prefix from instances of TE_PREFIX;
te_prefix.provided_port = provided_port;
te_prefix.required_port = required_port;
te_prefix.channel = channel;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("6b05a1c2-ee81-48d7-b4fb-5656c89b3e97",
	"9a1b2170-4729-458c-82e5-d23ac3a0764c",
	'provided_port',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("aedfe918-7fba-4493-b2ed-6a42ef2de7a5",
	"9a1b2170-4729-458c-82e5-d23ac3a0764c",
	'required_port',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"6b05a1c2-ee81-48d7-b4fb-5656c89b3e97",
	'');
INSERT INTO S_SPARM
	VALUES ("b635b146-0cc6-49da-8241-5537f1c09eed",
	"9a1b2170-4729-458c-82e5-d23ac3a0764c",
	'channel',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"aedfe918-7fba-4493-b2ed-6a42ef2de7a5",
	'');
INSERT INTO PE_PE
	VALUES ("9a1b2170-4729-458c-82e5-d23ac3a0764c",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("9f0ab425-3a92-4997-ba94-0b1d6d8a87b5",
	"00000000-0000-0000-0000-000000000000",
	'MarkComponentAsRealized',
	'',
	'//
//============================================================================
// Mark components as realized using package name and/or component
// name as the selection criteria.
//============================================================================
package_name = param.package_name;
component_name = param.component_name;
inc_file = param.inc_file;
select many c_cs from instances of C_C where ( false );
if ( ( ( "" == package_name ) and ( "" == component_name ) ) or ( ( "*" == package_name ) and ( "*" == component_name ) ) )
  // all components
  select many c_cs from instances of C_C;
elif ( ( "" == package_name ) or ( "*" == package_name ) )
  // matches without respect to package
  select many c_cs from instances of C_C where ( selected.Name == component_name );
elif ( ( "" == component_name ) or ( "*" == component_name ) )
  // all components in packages with given name
  select many ep_pkgs from instances of EP_PKG where ( selected.Name == package_name );
  select many c_cs related by ep_pkgs->PE_PE[R8000]->C_C[R8001];
else
  // particular component in particular package(s)
  select many ep_pkgs from instances of EP_PKG where ( selected.Name == package_name );
  select many c_cs related by ep_pkgs->PE_PE[R8000]->C_C[R8001] where ( selected.Name == component_name );
end if;
if ( empty c_cs )
  T::print(s:"WARNING:  MarkComponentAsRealized - Could not find component ${package_name}::${component_name}.");
end if;
for each c_c in c_cs
  select any tm_c from instances of TM_C where ( ( selected.Name == component_name ) and ( selected.Package == package_name ) );
  if ( empty tm_c )
    create object instance tm_c of TM_C;
    tm_c.Package = package_name;
    tm_c.Name = component_name;
  end if;
  tm_c.isRealized = true;
  tm_c.include_file = inc_file;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("03094ed1-2fb9-44c6-a9b5-6d5a998fadbc",
	"9f0ab425-3a92-4997-ba94-0b1d6d8a87b5",
	'package_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("917dd0cf-1bf0-4b6b-a457-1622d2102968",
	"9f0ab425-3a92-4997-ba94-0b1d6d8a87b5",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"03094ed1-2fb9-44c6-a9b5-6d5a998fadbc",
	'');
INSERT INTO S_SPARM
	VALUES ("707032e2-848a-44ea-aa14-032d3064d904",
	"9f0ab425-3a92-4997-ba94-0b1d6d8a87b5",
	'inc_file',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"917dd0cf-1bf0-4b6b-a457-1622d2102968",
	'');
INSERT INTO PE_PE
	VALUES ("9f0ab425-3a92-4997-ba94-0b1d6d8a87b5",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("ad9386b4-3712-4ef1-becf-672963cc8490",
	"00000000-0000-0000-0000-000000000000",
	'TagDataTypePrecision',
	'',
	'//============================================================================
// $RCSfile: m.datatype.arc,v $
//
// Description:
// This archetype file contains the implementation functions for marks
// specified in the (user supplied/modified) datatype.clr file.
//
// Notice:
// (C) Copyright 1998-2013 Mentor Graphics Corporation
//     All rights reserved.
//
// This document contains confidential and proprietary information and
// property of Mentor Graphics Corp.  No part of this document may be
// reproduced without the express written permission of Mentor Graphics Corp.
//============================================================================
//
//============================================================================
component_name = param.component_name;
dt_name = param.dt_name;
tagged_name = param.tagged_name;
initial_value = param.initial_value;
component_name = T::r(s:component_name);
select any tm_precision from instances of TM_PRECISION where ( ( selected.Domain == component_name ) and ( selected.DT_name == dt_name ) );
if ( empty tm_precision )
  create object instance tm_precision of TM_PRECISION;
end if;
tm_precision.Domain = component_name;
tm_precision.DT_name = dt_name;
tm_precision.xName = tagged_name;
tm_precision.initial_value = initial_value;
T::print(s:"TagDataTypePrecision:  ${dt_name} in ${component_name} given ${tagged_name} precision with ${initial_value}.");
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("49182dce-0501-4946-bac2-67c7e8f09bbe",
	"ad9386b4-3712-4ef1-becf-672963cc8490",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("f1e9dee9-d0c0-4d4f-ac78-ddf1efc8183f",
	"ad9386b4-3712-4ef1-becf-672963cc8490",
	'dt_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"49182dce-0501-4946-bac2-67c7e8f09bbe",
	'');
INSERT INTO S_SPARM
	VALUES ("a054abbc-feac-44dc-ad02-bec002d158ce",
	"ad9386b4-3712-4ef1-becf-672963cc8490",
	'tagged_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"f1e9dee9-d0c0-4d4f-ac78-ddf1efc8183f",
	'');
INSERT INTO S_SPARM
	VALUES ("b2cbb18a-5c96-4ca4-a973-da1596c20aee",
	"ad9386b4-3712-4ef1-becf-672963cc8490",
	'initial_value',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"a054abbc-feac-44dc-ad02-bec002d158ce",
	'');
INSERT INTO PE_PE
	VALUES ("ad9386b4-3712-4ef1-becf-672963cc8490",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("1fb5fb9f-e978-41e1-849a-c428bc061bbf",
	"00000000-0000-0000-0000-000000000000",
	'MapDataTypeAsPointer',
	'',
	'//
//============================================================================
// Map a user defined data type to a pointer.  This allows the system
// to pass arbitrarily shaped data around by simply pointing to it.
//============================================================================
component_name = param.component_name;
dt_name = param.dt_name;
pointer_type = param.pointer_type;
include_file = param.include_file;
component_name = T::r(s:component_name);
select any tm_pointer from instances of TM_POINTER where ( ( selected.Domain == component_name ) and ( selected.DT_name == dt_name ) );
if ( empty tm_pointer )
  create object instance tm_pointer of TM_POINTER;
end if;
tm_pointer.Domain = component_name;
tm_pointer.DT_name = dt_name;
tm_pointer.pointer_type = pointer_type;
tm_pointer.include_file = include_file;
T::print(s:"MapDataTypeAsPointer:  ${dt_name} in ${component_name} given ${pointer_type} mapping (${include_file}).");
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("3af8ada7-d74e-4fa3-9ef6-0542d991738c",
	"1fb5fb9f-e978-41e1-849a-c428bc061bbf",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("6c7ee0fb-1781-4c93-95cb-093fada14e21",
	"1fb5fb9f-e978-41e1-849a-c428bc061bbf",
	'dt_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"3af8ada7-d74e-4fa3-9ef6-0542d991738c",
	'');
INSERT INTO S_SPARM
	VALUES ("0dddf17d-53cf-4dcf-9145-0f02a683534c",
	"1fb5fb9f-e978-41e1-849a-c428bc061bbf",
	'pointer_type',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"6c7ee0fb-1781-4c93-95cb-093fada14e21",
	'');
INSERT INTO S_SPARM
	VALUES ("8508a335-5d88-4695-9975-90d0f1ccc639",
	"1fb5fb9f-e978-41e1-849a-c428bc061bbf",
	'include_file',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"0dddf17d-53cf-4dcf-9145-0f02a683534c",
	'');
INSERT INTO PE_PE
	VALUES ("1fb5fb9f-e978-41e1-849a-c428bc061bbf",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("c02a89b8-4dc3-4dd2-9f39-6996f7996ada",
	"00000000-0000-0000-0000-000000000000",
	'TagEnumeratorDiscreteValue',
	'',
	'//
//============================================================================
// Specifying Values for Enumerators
//
// To indicate to the model compiler that a user defined enumeration
// data type enumerator (defined in the BridgePoint Subsystem Partitioning
// Model (SPM) component data editor) shall have a value other than the default,
// use the following invocation:
//
// TagEnumeratorDiscreteValue( "component", "enumeration", "enumerator", "value"
//
// Where the input parameters are:
//   component - Registered component name.  Use "*" to indicate a system wide
//     enumeration data type (to be applied to all components containing
//     the user defined enumeration data type).
//   enumeration - name of the enumeration data type as known in the
//     application analysis
//   enumerator - name of the enumerator as known in the application analysis
//   value - a string containing the value to be assigned to the enumerator
//
// Examples:
//  Domain specific:
//   .invoke TagEnumeratorDiscreteValue( "MO", "tube_wattage", "low", "4" )
//   .invoke TagEnumeratorDiscreteValue( "MO", "tube_wattage", "med", "0x20" )
//  System Wide:
//   .invoke TagEnumeratorDiscreteValue( "*", "tube_wattage", "high", "0x40" )
//
//============================================================================
component_name = param.component_name;
enumeration = param.enumeration;
enumerator = param.enumerator;
value = param.value;
component_name = T::r(s:component_name);
select any tm_enumval from instances of TM_ENUMVAL where ( ( ( selected.Domain == component_name ) and ( selected.enumeration == enumeration ) ) and ( selected.enumerator == enumerator ) );
if ( empty tm_enumval )
  create object instance tm_enumval of TM_ENUMVAL;
end if;
tm_enumval.Domain = component_name;
tm_enumval.enumeration = enumeration;
tm_enumval.enumerator = enumerator;
tm_enumval.value = value;
T::print(s:"TagEnumeratorDiscreteValue:  ${enumeration}::${enumerator} in ${component_name} given discrete value ${value}.");
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("356cd830-7aec-4e73-8292-e944eb12e9f1",
	"c02a89b8-4dc3-4dd2-9f39-6996f7996ada",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("2f2e8346-0982-42f4-832b-f1c69480efd7",
	"c02a89b8-4dc3-4dd2-9f39-6996f7996ada",
	'enumeration',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"356cd830-7aec-4e73-8292-e944eb12e9f1",
	'');
INSERT INTO S_SPARM
	VALUES ("4ff277f5-f5ec-4674-a5a6-234200914198",
	"c02a89b8-4dc3-4dd2-9f39-6996f7996ada",
	'enumerator',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"2f2e8346-0982-42f4-832b-f1c69480efd7",
	'');
INSERT INTO S_SPARM
	VALUES ("6e853f55-1917-46a7-bc2e-2b9ad39689eb",
	"c02a89b8-4dc3-4dd2-9f39-6996f7996ada",
	'value',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"4ff277f5-f5ec-4674-a5a6-234200914198",
	'');
INSERT INTO PE_PE
	VALUES ("c02a89b8-4dc3-4dd2-9f39-6996f7996ada",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("100e0ee1-b516-41e6-96ce-d5e7daccbdd8",
	"00000000-0000-0000-0000-000000000000",
	'TagUninitializedEnumerationValue',
	'',
	'//
//============================================================================
// Specifying Value for the Default Un-Initialized Enumerator
//
// To indicate to the software architecture that the un-initialized enumerator
// of an enumeration (defined in the BridgePoint Subsystem Partitioning Model
// (SPM) component data editor) shall have a value other than the default,
// use the following invocation:
//
// TagUninitializedEnumerationValue( "component", "enumeration", "value" )
//
// Where the input parameters are:
//   component - Registered component name.  Use "*" to indicate a system wide
//     enumeration data type (to be applied to all components containing
//     the user defined enumeration data type).
//   enumeration - Name of the enumeration data type as known in the
//     application analysis. Use "*" to indicate ALL enumerations.
//   value - A string containing the value to be assigned to the uninitialized
//     enumerator.
//
// Examples:
//  Domain specific:
//   .invoke TagUninitializedEnumerationValue( "MO", "tube_wattage", "4" )
//  All Enumerations in Domain:
//   .invoke TagUninitializedEnumerationValue( "MO", "*", "40" )
//  System Wide:
//   .invoke TagUninitializedEnumerationValue( "*", "tube_wattage", "20" )
//  All Enumerations in All Domains:
//   .invoke TagUninitializedEnumerationValue( "*", "*", "100" )
//
//============================================================================
component_name = param.component_name;
enumeration = param.enumeration;
value = param.value;
component_name = T::r(s:component_name);
select any tm_enuminit from instances of TM_ENUMINIT where ( ( selected.Domain == component_name ) and ( selected.enumeration == enumeration ) );
if ( empty tm_enuminit )
  create object instance tm_enuminit of TM_ENUMINIT;
end if;
tm_enuminit.Domain = component_name;
tm_enuminit.enumeration = enumeration;
tm_enuminit.value = value;
T::print(s:"TagUninitializedEnumerationValue:  ${enumeration} in ${component_name} given default uninitialized value ${value}.");
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("e13c0097-e88d-44ed-b832-e64c3d980198",
	"100e0ee1-b516-41e6-96ce-d5e7daccbdd8",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("68745da2-db20-4d97-a1ec-17ab392f23b5",
	"100e0ee1-b516-41e6-96ce-d5e7daccbdd8",
	'enumeration',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"e13c0097-e88d-44ed-b832-e64c3d980198",
	'');
INSERT INTO S_SPARM
	VALUES ("3ea240b2-c0c9-4dd8-9583-e3621e84beac",
	"100e0ee1-b516-41e6-96ce-d5e7daccbdd8",
	'value',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"68745da2-db20-4d97-a1ec-17ab392f23b5",
	'');
INSERT INTO PE_PE
	VALUES ("100e0ee1-b516-41e6-96ce-d5e7daccbdd8",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("b0c815a1-2e98-4254-8e11-e4011e9c2794",
	"00000000-0000-0000-0000-000000000000",
	'AssignDirectToUDTPackage',
	'',
	'//
//
//============================================================================
// Specifying "Direct" manipulation to "SystemC UDT Pacakage"
//
// to indicate that this UDT package should be generated using its name
// instead of core type
//============================================================================
package_name = param.package_name;
T::print(s:"AssignDirectToUDTPackage is not a supported marking function.");
T::exit(i:1);
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("a5c2e934-588a-4f9b-8db0-ac57c086d246",
	"b0c815a1-2e98-4254-8e11-e4011e9c2794",
	'package_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("b0c815a1-2e98-4254-8e11-e4011e9c2794",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("b8f8b191-dd63-49bf-abdc-ddc5d3d3c3ab",
	"00000000-0000-0000-0000-000000000000",
	'specify_user_defined_enum_type_as_external_macro',
	'',
	'//
//============================================================================
//
//-- 002: 20140122 Add Start (saitou) 
dt_name = param.dt_name;
ext_name = param.ext_name;
initial_value = param.initial_value;
include_file = param.include_file;
//	.param string ext_event_name
//
select any s_dt from instances of S_DT where ( selected.Name == dt_name );
select one s_udt related by s_dt->S_UDT[R17];
if ( ( empty s_dt ) or ( empty s_udt ) )
  T::print(s:"\n  specify_user_defined_enum_type_as_external_macro - Data Type ''${dt_name}'' does not exist");
else
  select any s_cdt from instances of S_CDT where ( selected.DT_ID == s_udt.CDT_DT_ID );
  if ( s_cdt.Core_Typ == 4 )
    create object instance tm_dtmacro of TM_DTMACRO;
    tm_dtmacro.component = "";
    tm_dtmacro.DT_name = dt_name;
    tm_dtmacro.IsExternalMacro = true;
    tm_dtmacro.genName = ext_name;
    tm_dtmacro.Include_File = include_file;
    tm_dtmacro.Initial_Value = initial_value;
    //
    T::print(s:"specify_user_defined_enum_type_as_external_macro - Data Type ''${dt_name}'' is specified as ''${ext_name}''(initial value=''${initial_value}'') in ${include_file}");
  else
    T::print(s:"specify_user_defined_enum_type_as_external_macro - Data Type ''${dt_name}'' is not external macro ( because CoreType is not string! )");
  end if;
end if;
//
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("d0322884-04db-4c01-ae2c-4cfc4325fd6f",
	"b8f8b191-dd63-49bf-abdc-ddc5d3d3c3ab",
	'dt_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("2a23fe51-d2a4-43eb-8a22-eccceb8bda4b",
	"b8f8b191-dd63-49bf-abdc-ddc5d3d3c3ab",
	'ext_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"d0322884-04db-4c01-ae2c-4cfc4325fd6f",
	'');
INSERT INTO S_SPARM
	VALUES ("f3ae9da9-3224-48cd-a3d5-17c155530ef6",
	"b8f8b191-dd63-49bf-abdc-ddc5d3d3c3ab",
	'initial_value',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"2a23fe51-d2a4-43eb-8a22-eccceb8bda4b",
	'');
INSERT INTO S_SPARM
	VALUES ("9fe56774-1255-4d83-8e5b-f4b733f92a52",
	"b8f8b191-dd63-49bf-abdc-ddc5d3d3c3ab",
	'include_file',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"f3ae9da9-3224-48cd-a3d5-17c155530ef6",
	'');
INSERT INTO PE_PE
	VALUES ("b8f8b191-dd63-49bf-abdc-ddc5d3d3c3ab",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("15d094d0-19e9-462f-812d-9946252b4607",
	"00000000-0000-0000-0000-000000000000",
	'specify_user_defined_type',
	'',
	'//
dt_name = param.dt_name;
ext_name = param.ext_name;
initial_value = param.initial_value;
include_file = param.include_file;
//
select any s_dt from instances of S_DT where ( selected.Name == dt_name );
if ( empty s_dt )
  T::print(s:"\n  specify_user_defined_type - Data Type ''${dt_name}'' does not exist");
else
  create object instance tm_dtmacro of TM_DTMACRO;
  tm_dtmacro.component = "";
  tm_dtmacro.DT_name = dt_name;
  tm_dtmacro.genName = ext_name;
  tm_dtmacro.Include_File = include_file;
  tm_dtmacro.Initial_Value = initial_value;
  T::print(s:"specify_user_defined_type - Data Type ''${dt_name}'' is specified as ''${ext_name}''(initial value=''${initial_value}'') in ${include_file}");
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("3056fedb-96a9-4f29-9330-d450d6562bfa",
	"15d094d0-19e9-462f-812d-9946252b4607",
	'dt_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("d13941c0-f655-4325-9bf2-2bbe7f16b0c3",
	"15d094d0-19e9-462f-812d-9946252b4607",
	'ext_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"3056fedb-96a9-4f29-9330-d450d6562bfa",
	'');
INSERT INTO S_SPARM
	VALUES ("dee502d5-eb39-4e6b-b28b-c85a7abe5249",
	"15d094d0-19e9-462f-812d-9946252b4607",
	'initial_value',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"d13941c0-f655-4325-9bf2-2bbe7f16b0c3",
	'');
INSERT INTO S_SPARM
	VALUES ("5aa207e0-ddba-40cf-86a0-638eb5244550",
	"15d094d0-19e9-462f-812d-9946252b4607",
	'include_file',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"dee502d5-eb39-4e6b-b28b-c85a7abe5249",
	'');
INSERT INTO PE_PE
	VALUES ("15d094d0-19e9-462f-812d-9946252b4607",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("25607012-594f-497c-8772-cf9650681811",
	"00000000-0000-0000-0000-000000000000",
	'TagFunctionTranslationOff',
	'',
	'//============================================================================
// $RCSfile: m.domain.arc,v $
//
// Description:
// This archetype file contains the implementation functions for colors
// specified in the (user supplied/modified) domain.mark file.
//
// Notice:
// (C) Copyright 1998-2013 Mentor Graphics Corporation
//     All rights reserved.
//
// This document contains confidential and proprietary information and
// property of Mentor Graphics Corp.  No part of this document may be
// reproduced without the express written permission of Mentor Graphics Corp.
//============================================================================
//
//
//============================================================================
// Disable the translation of function processing semantics.
// The default is for all functions to be translated.
//============================================================================
function_name = param.function_name;
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkFunctionTranslationOff( component_name:te_c.Name, function_name:function_name );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("73bc1852-ee9b-4414-b440-2a3c8bf097fc",
	"25607012-594f-497c-8772-cf9650681811",
	'function_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("25607012-594f-497c-8772-cf9650681811",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("dd1ebe8d-b966-45fb-8f0b-2fa7317fe40e",
	"00000000-0000-0000-0000-000000000000",
	'MarkFunctionTranslationOff',
	'',
	'component_name = param.component_name;
function_name = param.function_name;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  msg = "";
  if ( "*" == function_name )
    select many te_syncs related by te_c->TE_SYNC[R2084];
    for each te_sync in te_syncs
      te_sync.XlateSemantics = FALSE;
      msg = "Turned off translation of ${te_sync.Name} function semantics.";
    end for;
  else
    select any te_sync related by te_c->TE_SYNC[R2084] where ( selected.Name == function_name );
    if ( not_empty te_sync )
      te_sync.XlateSemantics = FALSE;
      msg = "Turned off translation of ${function_name} function semantics.";
    else
      msg = "ERROR:  Function (${function_name}) not found in component ${te_c.Name}.";
      msg = msg + "\n  => TagFunctionTranslationOff( ${function_name} )";
    end if;
  end if;
  T::print(s:"${msg}");
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("bb206d3e-d94f-4589-b8dc-70fb59a1e97e",
	"dd1ebe8d-b966-45fb-8f0b-2fa7317fe40e",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("86e22c9a-96f0-4000-8916-53f2af938f92",
	"dd1ebe8d-b966-45fb-8f0b-2fa7317fe40e",
	'function_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"bb206d3e-d94f-4589-b8dc-70fb59a1e97e",
	'');
INSERT INTO PE_PE
	VALUES ("dd1ebe8d-b966-45fb-8f0b-2fa7317fe40e",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("d1e3a4a3-3dc6-4192-a09e-22360c5c2a9b",
	"00000000-0000-0000-0000-000000000000",
	'TagInitializationFunction',
	'',
	'//
//============================================================================
// Mark a function as being executed during the initialization sequence.
// All functions marked with this interface will be run during bring-up.
// Functions bearing input arguments are not allowed to be tagged as
// initialization functions.
//============================================================================
function_name = param.function_name;
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkInitializationFunction( component_name:te_c.Name, function_name:function_name );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("c1c1265c-fd75-44bc-8022-465e0c11701e",
	"d1e3a4a3-3dc6-4192-a09e-22360c5c2a9b",
	'function_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("d1e3a4a3-3dc6-4192-a09e-22360c5c2a9b",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("59f85e3a-fac4-41a2-a500-31956e484921",
	"00000000-0000-0000-0000-000000000000",
	'MarkInitializationFunction',
	'',
	'component_name = param.component_name;
function_name = param.function_name;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  msg = "";
  select any te_sync related by te_c->TE_SYNC[R2084] where ( selected.Name == function_name );
  if ( not_empty te_sync )
    select any te_parm related by te_sync->TE_ABA[R2010]->TE_PARM[R2062];
    if ( empty te_parm )
      te_sync.IsInitFunction = true;
      msg = "Function ${te_sync.Name} marked as initialization function.";
    else
      msg = "ERROR:  Initialization function (${function_name}) in component ${te_c.Name}";
      msg = msg + "\ntakes arguments.  This is not allowed at initialization.";
      msg = msg + "\n  => TagInitializationFunction( ${function_name} )";
    end if;
  else
    msg = "ERROR:  Initialization function (${function_name}) not found in component ${te_c.Name}.";
    msg = msg + "\n  => TagInitializationFunction( ${function_name} )";
  end if;
  T::print(s:"${msg}");
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("ef139c2b-894b-410a-ac13-cae11b4bdfb7",
	"59f85e3a-fac4-41a2-a500-31956e484921",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("68f2b331-724d-4d6d-aa57-071d9f292065",
	"59f85e3a-fac4-41a2-a500-31956e484921",
	'function_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"ef139c2b-894b-410a-ac13-cae11b4bdfb7",
	'');
INSERT INTO PE_PE
	VALUES ("59f85e3a-fac4-41a2-a500-31956e484921",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("34d2e3f5-c081-462e-aa23-959817460d9f",
	"00000000-0000-0000-0000-000000000000",
	'TagExcludeObjectFromCodeGen',
	'',
	'//
//============================================================================
obj_key_letters = param.obj_key_letters;
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkExcludeObjectFromCodeGen( component_name:te_c.Name, obj_key_letters:obj_key_letters );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("30abb6e8-4938-4224-95b1-d171acd15aac",
	"34d2e3f5-c081-462e-aa23-959817460d9f",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("34d2e3f5-c081-462e-aa23-959817460d9f",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("d44211b3-b07c-4c08-b28c-71a76d504eb4",
	"00000000-0000-0000-0000-000000000000",
	'MarkExcludeObjectFromCodeGen',
	'',
	'component_name = param.component_name;
obj_key_letters = param.obj_key_letters;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  msg = "";
  select any te_class related by te_c->TE_CLASS[R2064] where ( selected.Key_Lett == obj_key_letters );
  if ( not_empty te_class )
    te_class.ExcludeFromGen = true;
    msg = "Object ${te_class.Name} (${te_class.Key_Lett}) excluded from code generation.";
  else
    msg = "ERROR:  Class (${obj_key_letters}) not found in component ${te_c.Name}";
    msg = msg + "\n => TagExcludeObjectFromCodeGen( ${obj_key_letters} )";
  end if;
  T::print(s:"${msg}");
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("a4d02ec0-b2a2-4cd7-bb77-53f68af27ed4",
	"d44211b3-b07c-4c08-b28c-71a76d504eb4",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("90b3b1c2-900c-4104-9b01-85f9c53277bc",
	"d44211b3-b07c-4c08-b28c-71a76d504eb4",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"a4d02ec0-b2a2-4cd7-bb77-53f68af27ed4",
	'');
INSERT INTO PE_PE
	VALUES ("d44211b3-b07c-4c08-b28c-71a76d504eb4",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("86610e56-2a66-4982-84c0-e198ad0304dc",
	"00000000-0000-0000-0000-000000000000",
	'MarkExcludeSubsystemFromCodeGen',
	'',
	'//
//============================================================================
//-- 012:20140224 Add Start (saitou) 
component_name = param.component_name;
subsystem_name = param.subsystem_name;
//
component_name = T::r(s:component_name);
select many c_cs from instances of C_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many c_cs from instances of C_C;
end if;
for each c_c in c_cs
  select many ep_pkgs related by c_c->PE_PE[R8003]->EP_PKG[R8001];
  for each ep_pkg in ep_pkgs
    ::ExcludePackageFromCodeGen( ep_pkg:ep_pkg, subsystem_name:subsystem_name, isExclude:false );
  end for;
end for;
//
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("89d9c48d-4ee5-4117-9f07-51612f894739",
	"86610e56-2a66-4982-84c0-e198ad0304dc",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("6e70dfd3-699a-45ff-b15a-b986186b10ba",
	"86610e56-2a66-4982-84c0-e198ad0304dc",
	'subsystem_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"89d9c48d-4ee5-4117-9f07-51612f894739",
	'');
INSERT INTO PE_PE
	VALUES ("86610e56-2a66-4982-84c0-e198ad0304dc",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("524846fe-70dd-4b09-95ca-73977b9866f4",
	"00000000-0000-0000-0000-000000000000",
	'ExcludePackageFromCodeGen',
	'',
	'///////
// ExcludePackageFromCodeGen
//      ep_pkg : Package
//
ep_pkg = param.ep_pkg;
subsystem_name = param.subsystem_name;
isExclude = param.isExclude;
//
doExclude = isExclude;
//
if ( ( "${ep_pkg.Name}" == "${subsystem_name}" ) or ( "*" == "${subsystem_name}" ) )
  doExclude = true;
end if;
//
if ( doExclude )
  T::print(s:"Exclude Package : ${ep_pkg.Name}");
  select many te_classes related by ep_pkg->PE_PE[R8000]->O_OBJ[R8001]->TE_CLASS[R2019];
  for each te_class in te_classes
    te_class.ExcludeFromGen = true;
  end for;
end if;
//
select many child_ep_pkgs related by ep_pkg->PE_PE[R8000]->EP_PKG[R8001];
for each child_ep_pkg in child_ep_pkgs
  ::ExcludePackageFromCodeGen( ep_pkg:child_ep_pkg, subsystem_name:subsystem_name, isExclude:doExclude );
end for;
//
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("a6e2b3d6-3a0b-4fbe-894b-0387e26076cc",
	"524846fe-70dd-4b09-95ca-73977b9866f4",
	'ep_pkg',
	"bc235622-5914-4c46-87f7-e7209f83a876",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("bc235622-5914-4c46-87f7-e7209f83a876",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Package>',
	'',
	'',
	'../Instance Reference Data Types/Instance Reference Data Types.xtuml');
INSERT INTO S_SPARM
	VALUES ("cf8784f4-3c6d-4f44-95c4-d46ba0e52b1a",
	"524846fe-70dd-4b09-95ca-73977b9866f4",
	'subsystem_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"a6e2b3d6-3a0b-4fbe-894b-0387e26076cc",
	'');
INSERT INTO S_SPARM
	VALUES ("ee20b600-dba8-488a-a119-a83e963041c3",
	"524846fe-70dd-4b09-95ca-73977b9866f4",
	'isExclude',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"cf8784f4-3c6d-4f44-95c4-d46ba0e52b1a",
	'');
INSERT INTO PE_PE
	VALUES ("524846fe-70dd-4b09-95ca-73977b9866f4",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("fc56d9f8-320b-4137-be0f-f712c87c5b82",
	"00000000-0000-0000-0000-000000000000",
	'TagExcludeSubsystemFromCodeGen',
	'',
	'//-- 012:20140224 Add End (saitou) 
subsystem_name = param.subsystem_name;
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkExcludeSubsystemFromCodeGen( component_name:te_c.Name, subsystem_name:subsystem_name );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("0e41f80b-2fbc-43c9-972e-3ee818e0cd22",
	"fc56d9f8-320b-4137-be0f-f712c87c5b82",
	'subsystem_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("fc56d9f8-320b-4137-be0f-f712c87c5b82",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("a2a6a99a-07cd-4946-a602-5c05126f26fe",
	"00000000-0000-0000-0000-000000000000",
	'MarkExcludeSubsystemFromCodeGen_ORG',
	'',
	'//-- 012:20140224 Modified Start (saitou) 
component_name = param.component_name;
subsystem_name = param.subsystem_name;
//-- 012:20140224 Modified Start (saitou) 
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  msg = "";
  select many ep_pkgs related by te_c->C_C[R2054]->PE_PE[R8003]->EP_PKG[R8001]->PE_PE[R8000]->EP_PKG[R8001] where ( selected.Name == subsystem_name );
  if ( not_empty ep_pkgs )
    select many te_classes related by ep_pkgs->PE_PE[R8000]->O_OBJ[R8001]->TE_CLASS[R2019];
    for each te_class in te_classes
      te_class.ExcludeFromGen = true;
    end for;
    msg = "All classes in subsystem ${subsystem_name} excluded from code generation.";
  else
    msg = "ERROR:  Subsystem ${subsystem_name} not found in component ${te_c.Name}.";
    msg = msg + "\n => TagExcludeSubsystemFromCodeGen( ${subsystem_name} )";
  end if;
  T::print(s:"${msg}");
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("056945ba-3b4b-43ac-80ce-824413d0d75b",
	"a2a6a99a-07cd-4946-a602-5c05126f26fe",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("5d260dc3-2949-4a28-8ca9-3885dd80613d",
	"a2a6a99a-07cd-4946-a602-5c05126f26fe",
	'subsystem_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"056945ba-3b4b-43ac-80ce-824413d0d75b",
	'');
INSERT INTO PE_PE
	VALUES ("a2a6a99a-07cd-4946-a602-5c05126f26fe",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("165e4e45-d0c5-432f-85e9-74a94edb626b",
	"00000000-0000-0000-0000-000000000000",
	'TagStateTransitionTracingOn',
	'',
	'//
//============================================================================
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkStateTransitionTracingOn( component_name:te_c.Name );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("165e4e45-d0c5-432f-85e9-74a94edb626b",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("5c6620ff-1796-4cfb-a3c0-29f3dcc9b4a0",
	"00000000-0000-0000-0000-000000000000",
	'MarkStateTransitionTracingOn',
	'',
	'component_name = param.component_name;
T::print(s:"Enabling state transition tracing for component(s) ${component_name}.");
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  te_c.StateTrace = true;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("0021f725-ceb0-40e1-83b5-38a1029e43c8",
	"5c6620ff-1796-4cfb-a3c0-29f3dcc9b4a0",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("5c6620ff-1796-4cfb-a3c0-29f3dcc9b4a0",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("47e2dfbb-b4ac-44a0-b053-a2548596c129",
	"00000000-0000-0000-0000-000000000000",
	'TagActionStatementTracingOn',
	'',
	'//
//============================================================================
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkActionStatementTracingOn( component_name:te_c.Name );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("47e2dfbb-b4ac-44a0-b053-a2548596c129",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("cd321537-69ee-4950-a4e6-a3c4cf7f554c",
	"00000000-0000-0000-0000-000000000000",
	'MarkActionStatementTracingOn',
	'',
	'component_name = param.component_name;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  te_c.StmtTrace = true;
  T::print(s:"Action statement tracing enabled for component ${te_c.Name}.");
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("4754d44e-ded7-49cf-a93b-48ec02127364",
	"cd321537-69ee-4950-a4e6-a3c4cf7f554c",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("cd321537-69ee-4950-a4e6-a3c4cf7f554c",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("a537e8df-4f30-4169-9c4a-3a989a5146d9",
	"00000000-0000-0000-0000-000000000000",
	'MarkMessageTracingOn',
	'',
	'//
//============================================================================
component_name = param.component_name;
port_name = param.port_name;
message_name = param.message_name;
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
select many te_pos related by te_cs->TE_PO[R2005] where ( selected.Name == port_name );
if ( ( "" == port_name ) or ( "*" == port_name ) )
  select many te_pos related by te_cs->TE_PO[R2005];
end if;
select many te_macts related by te_pos->TE_MACT[R2006] where ( selected.MessageName == message_name );
if ( ( "" == message_name ) or ( "*" == message_name ) )
  select many te_macts related by te_pos->TE_MACT[R2006];
end if;
for each te_mact in te_macts
  te_mact.trace = true;
end for;
if ( empty te_macts )
  T::print(s:"Warning:  No messages found to trace for ${component_name}::${port_name}::${message_name}.");
else
  T::print(s:"Message tracing enabled for ${component_name}::${port_name}::${message_name}.");
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("3a4f6a0e-4c38-497b-a28e-61515c017241",
	"a537e8df-4f30-4169-9c4a-3a989a5146d9",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("8446d114-3677-4b18-a5ea-40a44e54985e",
	"a537e8df-4f30-4169-9c4a-3a989a5146d9",
	'port_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"3a4f6a0e-4c38-497b-a28e-61515c017241",
	'');
INSERT INTO S_SPARM
	VALUES ("397fa43c-eea6-4040-9a05-cb46dd65e41c",
	"a537e8df-4f30-4169-9c4a-3a989a5146d9",
	'message_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"8446d114-3677-4b18-a5ea-40a44e54985e",
	'');
INSERT INTO PE_PE
	VALUES ("a537e8df-4f30-4169-9c4a-3a989a5146d9",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("b473e532-1d7c-49f4-9028-b247547aacc9",
	"00000000-0000-0000-0000-000000000000",
	'TagEmptyHandleDetectionOn',
	'',
	'//
//============================================================================
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkEmptyHandleDetectionOn( component_name:te_c.Name );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("b473e532-1d7c-49f4-9028-b247547aacc9",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("2dc62dde-aac5-4a98-b3fa-63935cf44e27",
	"00000000-0000-0000-0000-000000000000",
	'MarkEmptyHandleDetectionOn',
	'',
	'component_name = param.component_name;
T::print(s:"Enabling detection of empty handles for component(s) ${component_name}.");
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  te_c.DetectEmpty = true;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("eb2b7c30-03c2-4bf4-8b15-d6040c6d11d7",
	"2dc62dde-aac5-4a98-b3fa-63935cf44e27",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("2dc62dde-aac5-4a98-b3fa-63935cf44e27",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("7a21405f-29c5-4361-89f0-8d027ca714fb",
	"00000000-0000-0000-0000-000000000000",
	'TagFirstPassOptimizationsOff',
	'',
	'//
//============================================================================
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkFirstPassOptimizationsOff( component_name:te_c.Name );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("7a21405f-29c5-4361-89f0-8d027ca714fb",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("8673b7ea-3414-4905-803b-ffa63f41b54f",
	"00000000-0000-0000-0000-000000000000",
	'MarkFirstPassOptimizationsOff',
	'',
	'component_name = param.component_name;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  te_c.OptDisabled = true;
  T::print(s:"Code optimizations DISABLED for component ${te_c.Name}");
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("6a4d1823-5a97-4db1-b8ca-0bcf05153f93",
	"8673b7ea-3414-4905-803b-ffa63f41b54f",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("8673b7ea-3414-4905-803b-ffa63f41b54f",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("413d6ea4-ac34-4730-8970-c3abd409296d",
	"00000000-0000-0000-0000-000000000000",
	'TagStateActionCommentBlocksEnabled',
	'',
	'//
//============================================================================
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkStateActionCommentBlocksEnabled( component_name:te_c.Name );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("413d6ea4-ac34-4730-8970-c3abd409296d",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("75eb766c-d94c-4fab-935a-c8d2300dee62",
	"00000000-0000-0000-0000-000000000000",
	'MarkStateActionCommentBlocksEnabled',
	'',
	'component_name = param.component_name;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  te_c.RawComments = true;
  T::print(s:"State action sematics will be included as comments for component ${te_c.Name}.");
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("f3452db8-4dcf-4f4f-85b3-7fb489139979",
	"75eb766c-d94c-4fab-935a-c8d2300dee62",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("75eb766c-d94c-4fab-935a-c8d2300dee62",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("9a49a292-deda-4421-b009-15d9c5b3e873",
	"00000000-0000-0000-0000-000000000000",
	'TagStateActionStatementCommentsDisabled',
	'',
	'//
//============================================================================
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkStateActionStatementCommentsDisabled( component_name:te_c.Name );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("9a49a292-deda-4421-b009-15d9c5b3e873",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("ee604181-0a87-48cc-8ad9-f44fb25940e3",
	"00000000-0000-0000-0000-000000000000",
	'MarkStateActionStatementCommentsDisabled',
	'',
	'component_name = param.component_name;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  te_c.CodeComments = false;
  T::print(s:"State action statement level comments disabled for component ${te_c.Name}");
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("fcb09ad7-7bd8-4dcd-94b0-97cae55d9069",
	"ee604181-0a87-48cc-8ad9-f44fb25940e3",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("ee604181-0a87-48cc-8ad9-f44fb25940e3",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("bc9ddf47-8c44-4395-a07f-0d158879089a",
	"00000000-0000-0000-0000-000000000000",
	'TagStateActionVariableNamesEnabled',
	'',
	'//
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("bc9ddf47-8c44-4395-a07f-0d158879089a",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("f1685838-dad6-4287-a241-a01c87c7994d",
	"00000000-0000-0000-0000-000000000000",
	'TagVerboseReflexivePhrasesEnabled',
	'',
	'//
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("f1685838-dad6-4287-a241-a01c87c7994d",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("6532b79b-2096-4411-8514-bb84d9e52f59",
	"00000000-0000-0000-0000-000000000000",
	'MarkPortWiring',
	'',
	'//
//
// Mark a port as having a component attached even though the component
// is not present in the model.
//
// .invoke MarkPortWiring( <home_component>, <home_port>, <foreign_component>, <foreign_port> )
// where:
//  <home_component> is the local component name.
//  <home_port> is the local port name.
//  <foreign_component> is the name of the component on the other side of
//                      the interface.
//  <foreign_port> is the name of the port on the other side of the interface.
//
//
home_component = param.home_component;
home_port = param.home_port;
foreign_component = param.foreign_component;
foreign_port = param.foreign_port;
select many te_cs from instances of TE_C where ( ( selected.Name == home_component ) and ( selected.included_in_build ) );
select many te_pos related by te_cs->TE_PO[R2005] where ( selected.Name == home_port );
::MarkPortWiringForPort( te_pos:te_pos, component:foreign_component, port:foreign_port );
select many te_cs from instances of TE_C where ( ( selected.Name == foreign_component ) and ( selected.included_in_build ) );
select many te_pos related by te_cs->TE_PO[R2005] where ( selected.Name == foreign_port );
::MarkPortWiringForPort( te_pos:te_pos, component:home_component, port:home_port );
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("84760ea6-36f2-43a3-9fe5-2e8bd029cfe4",
	"6532b79b-2096-4411-8514-bb84d9e52f59",
	'home_component',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("b20caa70-63b9-46af-8e3e-ea38e0b16e90",
	"6532b79b-2096-4411-8514-bb84d9e52f59",
	'home_port',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"84760ea6-36f2-43a3-9fe5-2e8bd029cfe4",
	'');
INSERT INTO S_SPARM
	VALUES ("52f128b7-305f-4327-b531-9506ead0ec17",
	"6532b79b-2096-4411-8514-bb84d9e52f59",
	'foreign_component',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"b20caa70-63b9-46af-8e3e-ea38e0b16e90",
	'');
INSERT INTO S_SPARM
	VALUES ("ccd11632-fae6-4025-8480-ec230d75d7c0",
	"6532b79b-2096-4411-8514-bb84d9e52f59",
	'foreign_port',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"52f128b7-305f-4327-b531-9506ead0ec17",
	'');
INSERT INTO PE_PE
	VALUES ("6532b79b-2096-4411-8514-bb84d9e52f59",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("5aa20aca-b367-404d-b973-fec40a740e24",
	"00000000-0000-0000-0000-000000000000",
	'MarkPortWiringForPort',
	'',
	'//
te_pos = param.te_pos;
component = param.component;
port = param.port;
for each te_po in te_pos
  select many te_iirs related by te_po->TE_IIR[R2080];
  for each te_iir in te_iirs
    if ( te_po.Provision )
      select many sibling_te_iirs related by te_iir->TE_IIR[R2081.''provides or is delegated''];
      if ( empty sibling_te_iirs )
        create object instance sibling_te_iir of TE_IIR;
        sibling_te_iir.component_name = component;
        sibling_te_iir.port_name = port;
        sibling_te_iir.interface_name = te_po.InterfaceName;
        sibling_te_iir.polymorphic = false;
                                relate sibling_te_iir to te_iir across R2081.''requires or delegates'';
      end if;
    else
      select one sibling_te_iir related by te_iir->TE_IIR[R2081.''requires or delegates''];
      if ( empty sibling_te_iir )
        create object instance sibling_te_iir of TE_IIR;
        sibling_te_iir.component_name = component;
        sibling_te_iir.port_name = port;
        sibling_te_iir.interface_name = te_po.InterfaceName;
        sibling_te_iir.polymorphic = false;
                                relate sibling_te_iir to te_iir across R2081.''requires or delegates'';
      end if;
    end if;
  end for;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("1f2e6ee1-3f2f-4c7a-99d7-afaf2d4654a4",
	"5aa20aca-b367-404d-b973-fec40a740e24",
	'te_pos',
	"dc54b007-00da-455e-b263-9baac45247c0",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("dc54b007-00da-455e-b263-9baac45247c0",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref_set<Extended Port>',
	'',
	'',
	'../Translation Extensions/Translation Extensions.xtuml');
INSERT INTO S_SPARM
	VALUES ("8af7585a-20d6-4779-adec-af2cfedf03c8",
	"5aa20aca-b367-404d-b973-fec40a740e24",
	'component',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"1f2e6ee1-3f2f-4c7a-99d7-afaf2d4654a4",
	'');
INSERT INTO S_SPARM
	VALUES ("b9f41f96-ceba-4fca-8592-fa07e0d2ae67",
	"5aa20aca-b367-404d-b973-fec40a740e24",
	'port',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"8af7585a-20d6-4779-adec-af2cfedf03c8",
	'');
INSERT INTO PE_PE
	VALUES ("5aa20aca-b367-404d-b973-fec40a740e24",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("62d7eeea-2f70-4888-9533-c53870bd1d72",
	"00000000-0000-0000-0000-000000000000",
	'TagDispatchFlavor',
	'',
	'//============================================================================
// $RCSfile: m.event.arc,v $
//
// Description:
// This archetype file contains the implementation functions for colors
// specified in the (user supplied/modified) event.clr file.
//
// Notice:
// (C) Copyright 1998-2013 Mentor Graphics Corporation
//     All rights reserved.
// Enhancements provided by TOYO Corporation.
//
// This document contains confidential and proprietary information and
// property of Mentor Graphics Corp.  No part of this document may be
// reproduced without the express written permission of Mentor Graphics Corp.
//============================================================================
//
//
//============================================================================
// Choose the type of dispatcher to run.  Zero is the default.
// Selecting 2 will provide a single system level event dispatcher.
//============================================================================
flavor = param.flavor;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("574caae2-3d43-4509-9e78-3299ba71631e",
	"62d7eeea-2f70-4888-9533-c53870bd1d72",
	'flavor',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("62d7eeea-2f70-4888-9533-c53870bd1d72",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("d36f9fe4-8c29-4cae-9cfe-6cecbc5c9f2a",
	"00000000-0000-0000-0000-000000000000",
	'TagPriorityEvent',
	'',
	'//
//============================================================================
// Color event to higher than default priority.
//============================================================================
evt_label = param.evt_label;
priority_value = param.priority_value;
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkPriorityEvent( component_name:te_c.Name, evt_label:evt_label, priority_value:priority_value );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("18e8ea44-f925-4623-b571-51e857f9d0f9",
	"d36f9fe4-8c29-4cae-9cfe-6cecbc5c9f2a",
	'evt_label',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("75963fa6-9d51-4238-adca-b0462d71986f",
	"d36f9fe4-8c29-4cae-9cfe-6cecbc5c9f2a",
	'priority_value',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"18e8ea44-f925-4623-b571-51e857f9d0f9",
	'');
INSERT INTO PE_PE
	VALUES ("d36f9fe4-8c29-4cae-9cfe-6cecbc5c9f2a",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("9fbe6e31-8d2a-4f25-8b94-62ea55c47e99",
	"00000000-0000-0000-0000-000000000000",
	'MarkPriorityEvent',
	'',
	'component_name = param.component_name;
evt_label = param.evt_label;
priority_value = param.priority_value;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  msg = "";
  //
  // Check for legal range on input priority.
  //
  if ( ( priority_value > 255 ) or ( priority_value < 0 ) )
    msg = "ERROR:  Priority ($t{priority_value}) out of legal range (0-255).";
  end if;
  //
  // Store the priority of the event in an attribute.
  //
  select any sm_evt related by te_c->TE_CLASS[R2064]->O_OBJ[R2019]->SM_ISM[R518]->SM_SM[R517]->SM_EVT[R502] where ( selected.Drv_Lbl == evt_label );
  if ( empty sm_evt )
    select any sm_evt related by te_c->TE_CLASS[R2064]->O_OBJ[R2019]->SM_ASM[R519]->SM_SM[R517]->SM_EVT[R502] where ( selected.Drv_Lbl == evt_label );
  end if;
  if ( not_empty sm_evt )
    //
    // We are not allowing prioritized polymorphic events... yet.
    //
    select one sm_pevt related by sm_evt->SM_PEVT[R525];
    if ( not_empty sm_pevt )
      msg = "ERROR:  Prioritized Polymorphic Event (${evt_label}) component ${te_c.Name}";
      msg = msg + "\nPriority Polys are not supported.";
    end if;
    select one te_evt related by sm_evt->TE_EVT[R2036];
    te_evt.Priority = priority_value;
    msg = "Event ${sm_evt.Drv_Lbl}:${sm_evt.Mning} marked as priority event.";
  else
    msg = "ERROR:  Event (${evt_label}) not found in component ${te_c.Name}";
  end if;
  msg = msg + " => TagPriorityEvent( ${evt_label}, $t{priority_value} )";
  T::print(s:"${msg}");
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("be22a41a-8b51-46fe-a94a-a340950276d1",
	"9fbe6e31-8d2a-4f25-8b94-62ea55c47e99",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("7d276c8e-ad0a-4114-ab04-f74fe7c61922",
	"9fbe6e31-8d2a-4f25-8b94-62ea55c47e99",
	'evt_label',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"be22a41a-8b51-46fe-a94a-a340950276d1",
	'');
INSERT INTO S_SPARM
	VALUES ("5e5803c5-3e62-4dbc-884c-c2879967d6df",
	"9fbe6e31-8d2a-4f25-8b94-62ea55c47e99",
	'priority_value',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"7d276c8e-ad0a-4114-ab04-f74fe7c61922",
	'');
INSERT INTO PE_PE
	VALUES ("9fbe6e31-8d2a-4f25-8b94-62ea55c47e99",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("302aa7f5-caab-4046-a4f1-38a7ffc67b5c",
	"00000000-0000-0000-0000-000000000000",
	'EnableTasking',
	'',
	'//============================================================================
// $RCSfile: m.system.arc,v $
//
// Description:
// System level coloring functions are found here.
// Notice that the colors that would normally update TE_SYS are active.
//
// Notice:
// (C) Copyright 1998-2013 Mentor Graphics Corporation
//     All rights reserved.
// Enhancements provided by TOYO Corporation.
//
// This document contains confidential and proprietary information and
// property of Mentor Graphics Corp.  No part of this document may be
// reproduced without the express written permission of Mentor Graphics Corp.
//============================================================================
//
//
//============================================================================
// Enable tasking/threading.
//============================================================================
flavor = param.flavor;
serialize = param.serialize;
number_of_threads = param.number_of_threads;
//
T::print(s:"EnableTasking( ${flavor}, ${serialize}, $t{number_of_threads} )");
select any tm_thread from instances of TM_THREAD;
if ( empty tm_thread )
  create object instance tm_thread of TM_THREAD;
  tm_thread.extra_initialization = "";
end if;
tm_thread.number_of_threads = number_of_threads;
if ( T::l(s:serialize) == "serialize" )
  tm_thread.serialize = true;
else
  tm_thread.serialize = false;
end if;
if ( ( ( ( "Nucleus" == flavor ) or ( "POSIX" == flavor ) ) or ( ( "OSX" == flavor ) or ( "Windows" == flavor ) ) ) or ( ( "AUTOSAR" == flavor ) or ( "SystemC" == flavor ) ) )
  tm_thread.flavor = flavor;
  if ( "SystemC" == flavor )
    // SystemC uses a single thread inside each component.
    // So, no need for an array of threads.
    tm_thread.number_of_threads = 1;
    tm_thread.enabled = false;
  else
    tm_thread.enabled = true;
  end if;
else
  T::print(s:"ERROR:  system.mark:EnableTasking has incorrect tasking/threading type:${flavor}.\n");
  T::exit(i:100);
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("38de4809-eea1-4943-baa7-9b587c7243e5",
	"302aa7f5-caab-4046-a4f1-38a7ffc67b5c",
	'flavor',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("324a7bbe-a906-4e83-9a9c-33402a7ce432",
	"302aa7f5-caab-4046-a4f1-38a7ffc67b5c",
	'serialize',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"38de4809-eea1-4943-baa7-9b587c7243e5",
	'');
INSERT INTO S_SPARM
	VALUES ("141eabb4-1263-460a-81ec-2be5bfbf4eb0",
	"302aa7f5-caab-4046-a4f1-38a7ffc67b5c",
	'number_of_threads',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"324a7bbe-a906-4e83-9a9c-33402a7ce432",
	'');
INSERT INTO PE_PE
	VALUES ("302aa7f5-caab-4046-a4f1-38a7ffc67b5c",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("b98ccf8e-d605-4049-8060-f985d7cb37a5",
	"00000000-0000-0000-0000-000000000000",
	'SetTaskPriority',
	'',
	'//
//============================================================================
// Establish task priority.
//============================================================================
task_number = param.task_number;
priority = param.priority;
T::print(s:"SetTaskPriority( $t{task_number}, ${priority} )");
select any tm_thread from instances of TM_THREAD;
if ( empty tm_thread )
  create object instance tm_thread of TM_THREAD;
end if;
tm_thread.extra_initialization = tm_thread.extra_initialization + "  xtUML_task_priorities[ $t{task_number} ] = ${priority};\n";
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("fcaaff3c-c334-4b4e-b8d5-b291cd3e0934",
	"b98ccf8e-d605-4049-8060-f985d7cb37a5",
	'task_number',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("17bb87d3-3fdb-4cc2-8292-772d0bbda9c7",
	"b98ccf8e-d605-4049-8060-f985d7cb37a5",
	'priority',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"fcaaff3c-c334-4b4e-b8d5-b291cd3e0934",
	'');
INSERT INTO PE_PE
	VALUES ("b98ccf8e-d605-4049-8060-f985d7cb37a5",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("5c4559ac-c67b-4736-8540-e626e76e3176",
	"00000000-0000-0000-0000-000000000000",
	'TagMaximumStringLength',
	'',
	'//
//============================================================================
max_len = param.max_len;
r = ::TM_SYSTAG_select();
tm_systag = r;
tm_systag.MaxStringLen = max_len;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("7f030865-4ffa-46d9-8707-96d0f24391d0",
	"5c4559ac-c67b-4736-8540-e626e76e3176",
	'max_len',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("5c4559ac-c67b-4736-8540-e626e76e3176",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("30cac701-ffef-4e82-87b1-2ed8ce50665c",
	"00000000-0000-0000-0000-000000000000",
	'TagMaximumRelationshipExtentSize',
	'',
	'//
//============================================================================
user_specified_size = param.user_specified_size;
r = ::TM_SYSTAG_select();
tm_systag = r;
tm_systag.MaxRelExtent = user_specified_size;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("0a70f9b2-eb1b-4831-a774-f506f4204f43",
	"30cac701-ffef-4e82-87b1-2ed8ce50665c",
	'user_specified_size',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("30cac701-ffef-4e82-87b1-2ed8ce50665c",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("74e82504-93cf-4ca4-8f31-886772dce564",
	"00000000-0000-0000-0000-000000000000",
	'TagMaximumSelectionExtentSize',
	'',
	'//
//============================================================================
user_specified_size = param.user_specified_size;
r = ::TM_SYSTAG_select();
tm_systag = r;
tm_systag.MaxSelectExtent = user_specified_size;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("4cadd081-3993-463c-80c2-eb018a1ea09d",
	"74e82504-93cf-4ca4-8f31-886772dce564",
	'user_specified_size',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("74e82504-93cf-4ca4-8f31-886772dce564",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("751afb57-f52d-4abf-853e-06f18804135e",
	"00000000-0000-0000-0000-000000000000",
	'TagMaximumSelfDirectedEvents',
	'',
	'//
//============================================================================
user_specified_size = param.user_specified_size;
r = ::TM_SYSTAG_select();
tm_systag = r;
tm_systag.MaxSelfEvents = user_specified_size;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("3c5b6a46-fdac-4974-9ff7-e9cc6737e907",
	"751afb57-f52d-4abf-853e-06f18804135e",
	'user_specified_size',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("751afb57-f52d-4abf-853e-06f18804135e",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("1eefbfd1-a83e-45c9-a902-4c29c09ca2d3",
	"00000000-0000-0000-0000-000000000000",
	'TagMaximumNonSelfDirectedEvents',
	'',
	'//
//============================================================================
user_specified_size = param.user_specified_size;
r = ::TM_SYSTAG_select();
tm_systag = r;
tm_systag.MaxNonSelfEvents = user_specified_size;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("0eb0c9f6-ea0d-431b-8774-0ade0ed11ce3",
	"1eefbfd1-a83e-45c9-a902-4c29c09ca2d3",
	'user_specified_size',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("1eefbfd1-a83e-45c9-a902-4c29c09ca2d3",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("0aa477fa-df65-4864-a850-c16667809f20",
	"00000000-0000-0000-0000-000000000000",
	'TagMaximumPendingOoaTimers',
	'',
	'//
//============================================================================
user_specified_size = param.user_specified_size;
r = ::TM_SYSTAG_select();
tm_systag = r;
tm_systag.MaxTimers = user_specified_size;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("a4456398-78e4-416d-9eaf-0c28add669d5",
	"0aa477fa-df65-4864-a850-c16667809f20",
	'user_specified_size',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("0aa477fa-df65-4864-a850-c16667809f20",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("e6c0664e-60e3-45ff-86c7-d42ec7b2c5ce",
	"00000000-0000-0000-0000-000000000000",
	'TagMaximumInterleavedBridges',
	'',
	'//
//============================================================================
user_specified_size = param.user_specified_size;
r = ::TM_SYSTAG_select();
tm_systag = r;
tm_systag.MaxInterleavedBridges = user_specified_size;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("b75244be-1ab8-4699-b3db-8886be501686",
	"e6c0664e-60e3-45ff-86c7-d42ec7b2c5ce",
	'user_specified_size',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("e6c0664e-60e3-45ff-86c7-d42ec7b2c5ce",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("36175cde-f0b0-4f85-8b66-df3a7eb50278",
	"00000000-0000-0000-0000-000000000000",
	'TagInterleavedBridgeDataSize',
	'',
	'//
//============================================================================
user_specified_size = param.user_specified_size;
r = ::TM_SYSTAG_select();
tm_systag = r;
tm_systag.MaxInterleavedBridgeDataSize = user_specified_size;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("5be1f665-9e15-4b12-a664-ec745abac196",
	"36175cde-f0b0-4f85-8b66-df3a7eb50278",
	'user_specified_size',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("36175cde-f0b0-4f85-8b66-df3a7eb50278",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("e2dca868-4685-4209-8878-2de3352db47e",
	"00000000-0000-0000-0000-000000000000",
	'TagCollectionsFlavor',
	'',
	'//
//============================================================================
// Use doubly linked lists for collections.  This speeds up deletes.
//============================================================================
collections_flavor = param.collections_flavor;
r = ::TM_SYSTAG_select();
tm_systag = r;
tm_systag.CollectionsFlavor = collections_flavor;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("312f9d9b-2d46-4b39-bd85-187a074e53da",
	"e2dca868-4685-4209-8878-2de3352db47e",
	'collections_flavor',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("e2dca868-4685-4209-8878-2de3352db47e",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("2dfd19f7-5187-4e44-bd12-094f29d64099",
	"00000000-0000-0000-0000-000000000000",
	'MarkPersistenceCacheDepth',
	'',
	'//
//============================================================================
// Mark Depth of Persistence Cache Queue
//
// This color is used to specify the maximum number of instances and
// links that can be queued waiting to be flushed to non-volatile
// storage (NVS).  As instances and links become "dirty" they get
// queued to NVS.  When Persist::Commit is called this queue is flushed.
//
// MarkPersistenceCacheDepth( instance_depth, link_depth )
//
// Where the input parameter(s) are:
//   instance_depth = the integer depth of the linked list of instances
//   link_depth = the integer depth of the linked list of persistent links
//============================================================================
instance_depth = param.instance_depth;
link_depth = param.link_depth;
r = ::TM_SYSTAG_select();
tm_systag = r;
tm_systag.PersistInstanceCacheDepth = instance_depth;
tm_systag.PersistLinkCacheDepth = link_depth;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("1bb708a2-77b7-4330-ae48-2e3bf41e11bd",
	"2dfd19f7-5187-4e44-bd12-094f29d64099",
	'instance_depth',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("14ac7587-c9dd-45b3-bed0-7360477b273e",
	"2dfd19f7-5187-4e44-bd12-094f29d64099",
	'link_depth',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"1bb708a2-77b7-4330-ae48-2e3bf41e11bd",
	'');
INSERT INTO PE_PE
	VALUES ("2dfd19f7-5187-4e44-bd12-094f29d64099",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("de0e3a34-2cd8-4e73-8fff-b0e2137eabcd",
	"00000000-0000-0000-0000-000000000000",
	'TagDynamicMemoryAllocationOn',
	'',
	'//
//============================================================================
units_to_allocate = param.units_to_allocate;
r = ::TM_SYSTAG_select();
tm_systag = r;
tm_systag.UnitsToDynamicallyAllocate = units_to_allocate;
if ( tm_systag.UnitsToDynamicallyAllocate < 1 )
  tm_systag.UnitsToDynamicallyAllocate = 1;
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("2c70a4d9-687b-4931-a93a-b586c7bc9355",
	"de0e3a34-2cd8-4e73-8fff-b0e2137eabcd",
	'units_to_allocate',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("de0e3a34-2cd8-4e73-8fff-b0e2137eabcd",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("3b7408d1-9f40-41f5-a7ea-c9b658ebd0e7",
	"00000000-0000-0000-0000-000000000000",
	'TagInstanceLoading',
	'',
	'//
//============================================================================
r = ::TM_SYSTAG_select();
tm_systag = r;
tm_systag.InstanceLoading = true;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("3b7408d1-9f40-41f5-a7ea-c9b658ebd0e7",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("fbd38415-8996-44b9-8c6f-f6ac846425b5",
	"00000000-0000-0000-0000-000000000000",
	'VFBEnable',
	'',
	'//
//============================================================================
// Enable Virtual Function Bus (VFB) for AUTOSAR.
//============================================================================
r = ::TM_SYSTAG_select();
tm_systag = r;
tm_systag.VFB = true;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("fbd38415-8996-44b9-8c6f-f6ac846425b5",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("12dc0483-6725-4a94-a4a7-22a1a77a74d8",
	"00000000-0000-0000-0000-000000000000",
	'TM_SYSTAG_select',
	'',
	'//
select any tm_systag from instances of TM_SYSTAG;
if ( empty tm_systag )
  create object instance tm_systag of TM_SYSTAG;
  tm_systag.MaxStringLen = 32;
  tm_systag.PersistInstanceCacheDepth = 128;
  tm_systag.PersistLinkCacheDepth = 128;
  tm_systag.SystemCPortsType = "sc_interface";
end if;
return tm_systag;
',
	"67a6ef0a-7a73-4370-9d87-d743c0801099",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("12dc0483-6725-4a94-a4a7-22a1a77a74d8",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_DT_PROXY
	VALUES ("67a6ef0a-7a73-4370-9d87-d743c0801099",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<System Tags>',
	'',
	'',
	'../Translation Marking/Translation Marking.xtuml');
INSERT INTO S_SYNC
	VALUES ("1f685159-417d-476c-b66f-6f4f170288dd",
	"00000000-0000-0000-0000-000000000000",
	'MarkSystemConfigurationPackage',
	'',
	'//
//============================================================================
// Mark a package as containing the system configuration.  Code will be
// generated for components contained in this package (and referred to
// from this package).
//============================================================================
package_name = param.package_name;
select any tm_build from instances of TM_BUILD;
if ( empty tm_build )
  create object instance tm_build of TM_BUILD;
else
  T::print(s:"Warning:  Re-marking system configuration.  Last configuration marked will be built.");
end if;
tm_build.package_to_build = package_name;
tm_build.package_obj_name = package_name + "_sys";
tm_build.package_inst_name = package_name + "_top";
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("a8659a9f-66f3-4544-87e8-eb151c7a5d5c",
	"1f685159-417d-476c-b66f-6f4f170288dd",
	'package_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("1f685159-417d-476c-b66f-6f4f170288dd",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("b0f51b7e-1f8c-4698-8ca4-171ebdfd9ebb",
	"00000000-0000-0000-0000-000000000000",
	'MarkSystemCPortType',
	'',
	'//
//============================================================================
// Enable Channel binding instead of Signal Binding.
//============================================================================
port_type = param.port_type;
r = ::TM_SYSTAG_select();
tm_systag = r;
if ( ( ( port_type == "TLM" ) or ( port_type == "BitLevelSignals" ) ) or ( port_type == "sc_interface" ) )
  tm_systag.SystemCPortsType = port_type;
else
  T::print(s:"Warning:  Unrecognized SystemC Port Type(${port_type}). Please choose either TLM, BitLevelSignals or sc_interface. Default configuration will be used.");
  tm_systag.SystemCPortsType = "sc_interface";
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("69fb34b0-c297-4556-b7ad-752a8cea0fce",
	"b0f51b7e-1f8c-4698-8ca4-171ebdfd9ebb",
	'port_type',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("b0f51b7e-1f8c-4698-8ca4-171ebdfd9ebb",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("f81637a6-5c66-4f73-90db-2e44cf98f180",
	"00000000-0000-0000-0000-000000000000",
	'MarkAllPortsPolymorphic',
	'',
	'//
//============================================================================
// Force all ports to be polymorphic (where a component implements the same 
// interface going in the same direction more than once). 
//============================================================================
r = ::TM_SYSTAG_select();
tm_systag = r;
tm_systag.AllPortsPoly = true;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("f81637a6-5c66-4f73-90db-2e44cf98f180",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("35a1d959-5ff5-4483-8546-b631d7ed8614",
	"00000000-0000-0000-0000-000000000000",
	'mark_all',
	'',
	'//
pass = param.pass;
f = param.f;
p1 = param.p1;
p2 = param.p2;
p3 = param.p3;
p4 = param.p4;
p5 = param.p5;
if ( "1" == pass )
  // bridge
  if ( "WireSynchServiceOoaBridge" == f )
    // WireSynchServiceOoaBridge("initiant","ee_key_letters","recipient")
    ::WireSynchServiceOoaBridge( initiant:p1, ee_key_letters:p2, recipient:p3 );
  elif ( "WireRealizeExternalEntity" == f )
    // WireRealizeExternalEntity("a","b","c","d","e")
    ::WireRealizeExternalEntity( a:p1, b:p2, c:p3, d:p4, e:p5 );
  elif ( "WireRealizedExternalEntity" == f )
    // WireRealizedExternalEntity("a","b","c","d","e")
    ::WireRealizedExternalEntity( a:p1, b:p2, c:p3, d:p4, e:p5 );
  elif ( "TagSyncServiceSafeForInterrupts" == f )
    // TagSyncServiceSafeForInterrupts("component_name","function_name")
    ::TagSyncServiceSafeForInterrupts( component_name:p1, function_name:p2 );
    // datatype
  elif ( "TagDataTypePrecision" == f )
    // TagDataTypePrecision("component_name","dt_name","tagged_name","initial_value")
    ::TagDataTypePrecision( component_name:p1, dt_name:p2, tagged_name:p3, initial_value:p4 );
  elif ( "MapDataTypeAsPointer" == f )
    // MapDataTypeAsPointer("component_name","dt_name","pointer_type","include_file")
    ::MapDataTypeAsPointer( component_name:p1, dt_name:p2, pointer_type:p3, include_file:p4 );
  elif ( "TagEnumeratorDiscreteValue" == f )
    // TagEnumeratorDiscreteValue("component_name","enumeration","enumerator","value")
    ::TagEnumeratorDiscreteValue( component_name:p1, enumeration:p2, enumerator:p3, value:p4 );
  elif ( "TagUninitializedEnumerationValue" == f )
    // TagUninitializedEnumerationValue("component_name","enumeration","value")
    ::TagUninitializedEnumerationValue( component_name:p1, enumeration:p2, value:p3 );
  elif ( "AssignDirectToUDTPackage" == f )
    // AssignDirectToUDTPackage("package_name")
    ::AssignDirectToUDTPackage( package_name:p1 );
    // system
  elif ( "EnableTasking" == f )
    // EnableTasking("flavor","serialize","number_of_threads":integer)
    r = ::T_atoi( s:p3 );
    i3 = r;
    ::EnableTasking( flavor:p1, serialize:p2, number_of_threads:i3 );
  elif ( "SetTaskPriority" == f )
    // SetTaskPriority("task_number":integer"priority")
    r = ::T_atoi( s:p1 );
    i1 = r;
    ::SetTaskPriority( task_number:i1, priority:p2 );
  elif ( "TagMaximumStringLength" == f )
    // TagMaximumStringLength("max_len":integer)
    r = ::T_atoi( s:p1 );
    i1 = r;
    ::TagMaximumStringLength( max_len:i1 );
  elif ( "TagMaximumRelationshipExtentSize" == f )
    // TagMaximumRelationshipExtentSize("user_specified_size":integer)
    r = ::T_atoi( s:p1 );
    i1 = r;
    ::TagMaximumRelationshipExtentSize( user_specified_size:i1 );
  elif ( "TagMaximumSelectionExtentSize" == f )
    // TagMaximumSelectionExtentSize("user_specified_size":integer)
    r = ::T_atoi( s:p1 );
    i1 = r;
    ::TagMaximumSelectionExtentSize( user_specified_size:i1 );
  elif ( "TagMaximumSelfDirectedEvents" == f )
    // TagMaximumSelfDirectedEvents("user_specified_size":integer)
    r = ::T_atoi( s:p1 );
    i1 = r;
    ::TagMaximumSelfDirectedEvents( user_specified_size:i1 );
  elif ( "TagMaximumNonSelfDirectedEvents" == f )
    // TagMaximumNonSelfDirectedEvents("user_specified_size":integer)
    r = ::T_atoi( s:p1 );
    i1 = r;
    ::TagMaximumNonSelfDirectedEvents( user_specified_size:i1 );
  elif ( "TagMaximumPendingOoaTimers" == f )
    // TagMaximumPendingOoaTimers("user_specified_size":integer)
    r = ::T_atoi( s:p1 );
    i1 = r;
    ::TagMaximumPendingOoaTimers( user_specified_size:i1 );
  elif ( "TagMaximumInterleavedBridges" == f )
    // TagMaximumInterleavedBridges("user_specified_size":integer)
    r = ::T_atoi( s:p1 );
    i1 = r;
    ::TagMaximumInterleavedBridges( user_specified_size:i1 );
  elif ( "TagInterleavedBridgeDataSize" == f )
    // TagInterleavedBridgeDataSize("user_specified_size":integer)
    r = ::T_atoi( s:p1 );
    i1 = r;
    ::TagInterleavedBridgeDataSize( user_specified_size:i1 );
  elif ( "TagCollectionsFlavor" == f )
    // TagCollectionsFlavor("collections_flavor":integer)
    r = ::T_atoi( s:p1 );
    i1 = r;
    ::TagCollectionsFlavor( collections_flavor:i1 );
  elif ( "MarkPersistenceCacheDepth" == f )
    // MarkPersistenceCacheDepth("instance_depth":integer"link_depth":integer)
    r = ::T_atoi( s:p1 );
    i1 = r;
    r = ::T_atoi( s:p2 );
    i2 = r;
    ::MarkPersistenceCacheDepth( instance_depth:i1, link_depth:i2 );
  elif ( "TagDynamicMemoryAllocationOn" == f )
    // TagDynamicMemoryAllocationOn("units_to_allocate":integer)
    r = ::T_atoi( s:p1 );
    i1 = r;
    ::TagDynamicMemoryAllocationOn( units_to_allocate:i1 );
  elif ( "TagInstanceLoading" == f )
    ::TagInstanceLoading();
  elif ( "VFBEnable" == f )
    ::VFBEnable();
  elif ( "MarkSystemConfigurationPackage" == f )
    // MarkSystemConfigurationPackage("package_name")
    ::MarkSystemConfigurationPackage( package_name:p1 );
  elif ( "MarkSystemCPortType" == f )
    // MarkSystemCPortType("port_type")
    ::MarkSystemCPortType( port_type:p1 );
  elif ( "MarkAllPortsPolymorphic" == f )
    ::MarkAllPortsPolymorphic();
    // component
  elif ( "MarkAsChannel" == f )
    // MarkAsChannel("package_name","component_name","inc_file")
    ::MarkAsChannel( package_name:p1, component_name:p2, inc_file:p3 );
  elif ( "MarkComponentAsChannel" == f )
    // MarkComponentAsChannel("package_name","component_name","inc_file")
    ::MarkComponentAsChannel( package_name:p1, component_name:p2, inc_file:p3 );
  elif ( "MarkComponentWithTemplate" == f )
    // MarkComponentWithTemplate("package_name","component_name")
    ::MarkComponentWithTemplate( package_name:p1, component_name:p2 );
  elif ( "MarkInterfaceWithTemplate" == f )
    // MarkInterfaceWithTemplate("package_name","interface_name")
    ::MarkInterfaceWithTemplate( package_name:p1, interface_name:p2 );
  elif ( "AddTemplateParameter" == f )
    // AddTemplateParameter("package_name","component_name","type_name","variable_name","default_value")
    ::AddTemplateParameter( package_name:p1, component_name:p2, type_name:p3, variable_name:p4, default_value:p5 );
  elif ( "SetTemplateParameter" == f )
    // SetTemplateParameter("package_name","instance","variable_name","value")
    ::SetTemplateParameter( package_name:p1, instance:p2, variable_name:p3, value:p4 );
  elif ( "SetTPV" == f )
    // CDS - not supported here
    // SetTPV("package_name","parent_component","component","classifier_name","port","variable_name","value")
    ::SetTPV( package_name:p1, parent_component:p2, component:p3, classifier_name:p4, port:p5, variable_name:"", value:"" );
  elif ( "MarkInterfacePrefix" == f )
    // MarkInterfacePrefix("provided_port","required_port","channel")
    ::MarkInterfacePrefix( provided_port:p1, required_port:p2, channel:p3 );
  elif ( "MarkComponentAsRealized" == f )
    // MarkComponentAsRealized("package_name","component_name","inc_file")
    ::MarkComponentAsRealized( package_name:p1, component_name:p2, inc_file:p3 );
    //-- 010:20140212 Add Start (nomura)
  elif ( "MarkDomainEventMaxNumber" == f )
    // MarkDomainEventMaxNumber("component_name","internalEventNum","externalEventNum")
    // not defined .invoke MarkDomainEventMaxNumber(p1,p2,p3)
  elif ( "SetDomainRelationExtentMaxNumber" == f )
    // SetDomainRelationExtentMaxNumber("component_name", "RelationExtentMaxNo")
    //::SetDomainRelationExtentMaxNumber( :p1, :p2 );
  elif ( "SetDomainSelectionNodeMaxNumber" == f )
    // SetDomainSelectionNodeMaxNumber("component_name", "SelectionNodeMaxNo")
    //::SetDomainSelectionNodeMaxNumber( :p1, :p2 );
  elif ( "TagUseFacadeMaxDef" == f )
    // TagUseFacadeMaxDef()
    //::TagUseFacadeMaxDef();
  elif ( "SetDomainFacadeMutexLockUse" == f )
    // SetDomainFacadeMutexLockUse("component_name")
    //::SetDomainFacadeMutexLockUse( :p1 );
    //-- 010:20140212 Add Start (nomura)
  else
    // not in this pass
  end if;
else
  // class
  if ( "TagSystemObjectDefaultExtentSize" == f )
    // TagSystemObjectDefaultExtentSize("extent_size":integer)
    r = ::T_atoi( s:p1 );
    i1 = r;
    ::TagSystemObjectDefaultExtentSize( extent_size:i1 );
  elif ( "MarkSystemObjectDefaultExtentSize" == f )
    // MarkSystemObjectDefaultExtentSize("extent_size":integer)
    r = ::T_atoi( s:p1 );
    i1 = r;
    ::MarkSystemObjectDefaultExtentSize( extent_size:i1 );
  elif ( "TagObjectExtentSize" == f )
    // TagObjectExtentSize("obj_key_letters","extent_size":integer)
    r = ::T_atoi( s:p2 );
    i2 = r;
    ::TagObjectExtentSize( obj_key_letters:p1, extent_size:i2 );
  elif ( "MarkObjectExtentSize" == f )
    // MarkObjectExtentSize("component_name","obj_key_letters","extent_size":integer)
    r = ::T_atoi( s:p3 );
    i3 = r;
    ::MarkObjectExtentSize( component_name:p1, obj_key_letters:p2, extent_size:i3 );
  elif ( "TagTransformerGeneration" == f )
    // TagTransformerGeneration("obj_key_letters","transformer_name")
    ::TagTransformerGeneration( obj_key_letters:p1, transformer_name:p2 );
  elif ( "TagClassOperationTranslationOff" == f )
    // TagClassOperationTranslationOff("obj_key_letters","op_name")
    ::TagClassOperationTranslationOff( obj_key_letters:p1, op_name:p2 );
  elif ( "MarkClassOperationTranslationOff" == f )
    // MarkClassOperationTranslationOff("component_name","obj_key_letters","op_name")
    ::MarkClassOperationTranslationOff( component_name:p1, obj_key_letters:p2, op_name:p3 );
  elif ( "TagObjectTraceOff" == f )
    // TagObjectTraceOff("obj_key_letters")
    ::TagObjectTraceOff( obj_key_letters:p1 );
  elif ( "MarkObjectTraceOff" == f )
    // MarkObjectTraceOff("component_name","obj_key_letters")
    ::MarkObjectTraceOff( component_name:p1, obj_key_letters:p2 );
  elif ( "TagObjectTraceOn" == f )
    // TagObjectTraceOn("obj_key_letters")
    ::TagObjectTraceOn( obj_key_letters:p1 );
  elif ( "MarkObjectTraceOn" == f )
    // MarkObjectTraceOn("component_name","obj_key_letters")
    ::MarkObjectTraceOn( component_name:p1, obj_key_letters:p2 );
  elif ( "TagPEIsDefinedInData" == f )
    // TagPEIsDefinedInData("ss_prefix","obj_key_letters")
    ::TagPEIsDefinedInData( ss_prefix:p1, obj_key_letters:p2 );
  elif ( "MarkPEIsDefinedInData" == f )
    // MarkPEIsDefinedInData("component_name","ss_prefix","obj_key_letters")
    ::MarkPEIsDefinedInData( component_name:p1, ss_prefix:p2, obj_key_letters:p3 );
  elif ( "TagStaticInstancePopulation" == f )
    // TagStaticInstancePopulation("ss_prefix","obj_key_letters")
    ::TagStaticInstancePopulation( ss_prefix:p1, obj_key_letters:p2 );
  elif ( "MarkStaticInstancePopulation" == f )
    // MarkStaticInstancePopulation("component_name","ss_prefix","obj_key_letters")
    ::MarkStaticInstancePopulation( component_name:p1, ss_prefix:p2, obj_key_letters:p3 );
  elif ( "TagReadOnly" == f )
    // TagReadOnly("ss_prefix","obj_key_letters")
    ::TagReadOnly( ss_prefix:p1, obj_key_letters:p2 );
  elif ( "MarkReadOnly" == f )
    // MarkReadOnly("component_name","ss_prefix","obj_key_letters")
    ::MarkReadOnly( component_name:p1, ss_prefix:p2, obj_key_letters:p3 );
  elif ( "TagPersistentClass" == f )
    // TagPersistentClass("ss_prefix","obj_key_letters")
    ::TagPersistentClass( ss_prefix:p1, obj_key_letters:p2 );
  elif ( "MarkPersistentClass" == f )
    // MarkPersistentClass("component_name","ss_prefix","obj_key_letters")
    ::MarkPersistentClass( component_name:p1, ss_prefix:p2, obj_key_letters:p3 );
  elif ( "TagNonPersistentClass" == f )
    // TagNonPersistentClass("ss_prefix","obj_key_letters")
    ::TagNonPersistentClass( ss_prefix:p1, obj_key_letters:p2 );
  elif ( "MarkNonPersistentClass" == f )
    // MarkNonPersistentClass("component_name","ss_prefix","obj_key_letters")
    ::MarkNonPersistentClass( component_name:p1, ss_prefix:p2, obj_key_letters:p3 );
  elif ( "MapClassToTask" == f )
    // MapClassToTask("ss_prefix","obj_key_letters","task":integer)
    r = ::T_atoi( s:p3 );
    i3 = r;
    ::MapClassToTask( ss_prefix:p1, obj_key_letters:p2, task:i3 );
  elif ( "MarkClassToTask" == f )
    // MarkClassToTask("component_name","ss_prefix","obj_key_letters","task":integer)
    r = ::T_atoi( s:p4 );
    i4 = r;
    ::MarkClassToTask( component_name:p1, ss_prefix:p2, obj_key_letters:p3, task:i4 );
    // domain
  elif ( "TagFunctionTranslationOff" == f )
    // TagFunctionTranslationOff("function_name")
    ::TagFunctionTranslationOff( function_name:p1 );
  elif ( "MarkFunctionTranslationOff" == f )
    // MarkFunctionTranslationOff("component_name","function_name")
    ::MarkFunctionTranslationOff( component_name:p1, function_name:p2 );
  elif ( "TagInitializationFunction" == f )
    // TagInitializationFunction("function_name")
    ::TagInitializationFunction( function_name:p1 );
  elif ( "MarkInitializationFunction" == f )
    // MarkInitializationFunction("component_name","function_name")
    ::MarkInitializationFunction( component_name:p1, function_name:p2 );
  elif ( "TagExcludeObjectFromCodeGen" == f )
    // TagExcludeObjectFromCodeGen("obj_key_letters")
    ::TagExcludeObjectFromCodeGen( obj_key_letters:p1 );
  elif ( "MarkExcludeObjectFromCodeGen" == f )
    // MarkExcludeObjectFromCodeGen("component_name","obj_key_letters")
    ::MarkExcludeObjectFromCodeGen( component_name:p1, obj_key_letters:p2 );
  elif ( "TagExcludeSubsystemFromCodeGen" == f )
    // TagExcludeSubsystemFromCodeGen("subsystem_name")
    ::TagExcludeSubsystemFromCodeGen( subsystem_name:p1 );
  elif ( "MarkExcludeSubsystemFromCodeGen" == f )
    // MarkExcludeSubsystemFromCodeGen("component_name","subsystem_name")
    ::MarkExcludeSubsystemFromCodeGen( component_name:p1, subsystem_name:p2 );
  elif ( "TagStateTransitionTracingOn" == f )
    ::TagStateTransitionTracingOn();
  elif ( "MarkStateTransitionTracingOn" == f )
    // MarkStateTransitionTracingOn("component_name")
    ::MarkStateTransitionTracingOn( component_name:p1 );
  elif ( "TagActionStatementTracingOn" == f )
    ::TagActionStatementTracingOn();
  elif ( "MarkActionStatementTracingOn" == f )
    // MarkActionStatementTracingOn("component_name")
    ::MarkActionStatementTracingOn( component_name:p1 );
  elif ( "MarkMessageTracingOn" == f )
    // MarkMessageTracingOn("component_name","port_name","message_name")
    ::MarkMessageTracingOn( component_name:p1, port_name:p2, message_name:p3 );
  elif ( "TagEmptyHandleDetectionOn" == f )
    ::TagEmptyHandleDetectionOn();
  elif ( "MarkEmptyHandleDetectionOn" == f )
    // MarkEmptyHandleDetectionOn("component_name")
    ::MarkEmptyHandleDetectionOn( component_name:p1 );
  elif ( "TagFirstPassOptimizationsOff" == f )
    ::TagFirstPassOptimizationsOff();
  elif ( "MarkFirstPassOptimizationsOff" == f )
    // MarkFirstPassOptimizationsOff("component_name")
    ::MarkFirstPassOptimizationsOff( component_name:p1 );
  elif ( "TagStateActionCommentBlocksEnabled" == f )
    ::TagStateActionCommentBlocksEnabled();
  elif ( "MarkStateActionCommentBlocksEnabled" == f )
    // MarkStateActionCommentBlocksEnabled("component_name")
    ::MarkStateActionCommentBlocksEnabled( component_name:p1 );
  elif ( "TagStateActionStatementCommentsDisabled" == f )
    ::TagStateActionStatementCommentsDisabled();
  elif ( "MarkStateActionStatementCommentsDisabled" == f )
    // MarkStateActionStatementCommentsDisabled("component_name")
    ::MarkStateActionStatementCommentsDisabled( component_name:p1 );
  elif ( "TagStateActionVariableNamesEnabled" == f )
    ::TagStateActionVariableNamesEnabled();
  elif ( "TagVerboseReflexivePhrasesEnabled" == f )
    ::TagVerboseReflexivePhrasesEnabled();
  elif ( "MarkPortWiring" == f )
    // MarkPortWiring("home_component","home_port","foreign_component","foreign_port")
    ::MarkPortWiring( home_component:p1, home_port:p2, foreign_component:p3, foreign_port:p4 );
  elif ( "TagDispatchFlavor" == f )
    // TagDispatchFlavor("flavor":integer)
    r = ::T_atoi( s:p1 );
    i1 = r;
    ::TagDispatchFlavor( flavor:i1 );
    // event
  elif ( "TagPriorityEvent" == f )
    // TagPriorityEvent("evt_label","priority_value":integer)
    r = ::T_atoi( s:p2 );
    i2 = r;
    ::TagPriorityEvent( evt_label:p1, priority_value:i2 );
  elif ( "MarkPriorityEvent" == f )
    // MarkPriorityEvent("component_name","evt_label","priority_value":integer)
    r = ::T_atoi( s:p3 );
    i3 = r;
    ::MarkPriorityEvent( component_name:p1, evt_label:p2, priority_value:i3 );
  else
    // not in this pass
  end if;
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("6e6260b9-cf29-4687-bb12-d28ef4c5a3de",
	"35a1d959-5ff5-4483-8546-b631d7ed8614",
	'pass',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("3e0c7d04-ad6e-499e-a20a-a37d47c29a44",
	"35a1d959-5ff5-4483-8546-b631d7ed8614",
	'f',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"6e6260b9-cf29-4687-bb12-d28ef4c5a3de",
	'');
INSERT INTO S_SPARM
	VALUES ("04c4aa77-50a3-4059-a225-d9209af31ec8",
	"35a1d959-5ff5-4483-8546-b631d7ed8614",
	'p1',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"3e0c7d04-ad6e-499e-a20a-a37d47c29a44",
	'');
INSERT INTO S_SPARM
	VALUES ("208a58fd-7733-44cd-8053-786bc527af22",
	"35a1d959-5ff5-4483-8546-b631d7ed8614",
	'p2',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"04c4aa77-50a3-4059-a225-d9209af31ec8",
	'');
INSERT INTO S_SPARM
	VALUES ("562829cd-35b9-405e-b26f-6e7ed67072d0",
	"35a1d959-5ff5-4483-8546-b631d7ed8614",
	'p3',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"208a58fd-7733-44cd-8053-786bc527af22",
	'');
INSERT INTO S_SPARM
	VALUES ("fb451a8c-409c-4ce2-b1aa-1c7e9ff7cb57",
	"35a1d959-5ff5-4483-8546-b631d7ed8614",
	'p4',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"562829cd-35b9-405e-b26f-6e7ed67072d0",
	'');
INSERT INTO S_SPARM
	VALUES ("d0d89667-ac3e-4429-9c80-f0f4f8541da8",
	"35a1d959-5ff5-4483-8546-b631d7ed8614",
	'p5',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"fb451a8c-409c-4ce2-b1aa-1c7e9ff7cb57",
	'');
INSERT INTO PE_PE
	VALUES ("35a1d959-5ff5-4483-8546-b631d7ed8614",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("74ffa30b-1e3c-4d66-a93e-78cfbeae9ddd",
	"00000000-0000-0000-0000-000000000000",
	'T_atoi',
	'',
	'//
return 0;
',
	"ba5eda7a-def5-0000-0000-000000000002",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("b636cbbd-c3ee-4eab-ba0b-b11a6149e920",
	"74ffa30b-1e3c-4d66-a93e-78cfbeae9ddd",
	's',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("74ffa30b-1e3c-4d66-a93e-78cfbeae9ddd",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO PE_PE
	VALUES ("42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	1,
	"efb614c1-5af5-40ee-92c8-706430a99db3",
	"00000000-0000-0000-0000-000000000000",
	7);
INSERT INTO EP_PKG_PROXY
	VALUES ("efb614c1-5af5-40ee-92c8-706430a99db3",
	"00000000-0000-0000-0000-000000000000",
	"d9bc5487-4193-4817-be1c-6c3f3339aebf",
	'ooaofooa',
	'========================================================================

File:          $RCSfile: ooaofooa.xtuml,v $
Version:   $Revision: 1.127 $
Modified:  $Date: 2006/09/26 15:10:20 $

(c) Copyright 2004-2012 by Mentor Graphics Corp. All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Mentor Graphics Corp. and is not for external distribution.
========================================================================

This is the application domain for the Tiger project.

The processing in this model describes the activities
for model capture.



',
	0,
	'../ooaofooa.xtuml');
INSERT INTO S_SYS_PROXY
	VALUES ("d9bc5487-4193-4817-be1c-6c3f3339aebf",
	'com.mentor.nucleus.bp.core',
	1,
	'../../../../com.mentor.nucleus.bp.core.xtuml');

-- BP 7.1.6 content: Package syschar: 3 persistence-version: 7.1.6

INSERT INTO EP_PKG
	VALUES ("42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	"d9bc5487-4193-4817-be1c-6c3f3339aebf",
	'afunmark',
	'',
	0);
INSERT INTO GD_MD
	VALUES ("51de99c8-8ec6-4559-8bc5-024d0f98afc3",
	112,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	108,
	0,
	0,
	1,
	1,
	1,
	12,
	1,
	0,
	0,
	0,
	0,
	0,
	'',
	'com.mentor.nucleus.bp.core::components::ooaofooa::ooaofooa::afunmark');
INSERT INTO DIM_DIA
	VALUES ("51de99c8-8ec6-4559-8bc5-024d0f98afc3",
	'',
	1.000000,
	4000.000000,
	3000.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_SYNC
	VALUES ("d5e93b88-d0e4-4ca7-994a-0e6e3a89071f",
	"00000000-0000-0000-0000-000000000000",
	'WireSynchServiceOoaBridge',
	'',
	'//============================================================================
// $RCSfile: m.bridge.arc,v $
//
// Description:
// This archetype file contains the implementation functions for colors
// specified in the (user supplied/modified) bridge.clr file.
//
// Notice:
// (C) Copyright 1998-2013 Mentor Graphics Corporation
//     All rights reserved.
//
// This document contains confidential and proprietary information and
// property of Mentor Graphics Corp.  No part of this document may be
// reproduced without the express written permission of Mentor Graphics Corp.
//============================================================================
//
//============================================================================
initiant = param.initiant;
ee_key_letters = param.ee_key_letters;
recipient = param.recipient;
T::print(s:"Note:  WireSynchServiceOoaBridge is no longer supported.  Use components and interfaces.");
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("d3d9fc48-acf5-4266-8036-106be7d9bbbe",
	"d5e93b88-d0e4-4ca7-994a-0e6e3a89071f",
	'initiant',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("26c50df8-0665-432c-9d88-dd811714a1b1",
	"d5e93b88-d0e4-4ca7-994a-0e6e3a89071f",
	'ee_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"d3d9fc48-acf5-4266-8036-106be7d9bbbe",
	'');
INSERT INTO S_SPARM
	VALUES ("0adfa768-b66d-431a-95b6-50c2602ea1a2",
	"d5e93b88-d0e4-4ca7-994a-0e6e3a89071f",
	'recipient',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"26c50df8-0665-432c-9d88-dd811714a1b1",
	'');
INSERT INTO PE_PE
	VALUES ("d5e93b88-d0e4-4ca7-994a-0e6e3a89071f",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("6dde8a0b-00d8-43f3-9a75-3dceb053d378",
	"00000000-0000-0000-0000-000000000000",
	'WireRealizeExternalEntity',
	'',
	'//
//============================================================================
a = param.a;
b = param.b;
c = param.c;
d = param.d;
e = param.e;
T::print(s:"Note:  WireRealizeExternalEntity is no longer supported.  Use components and interfaces.");
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("69397965-28e3-43d7-8936-d1a9a515edad",
	"6dde8a0b-00d8-43f3-9a75-3dceb053d378",
	'a',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("263361dd-ce42-466e-a1c9-2b34603062d0",
	"6dde8a0b-00d8-43f3-9a75-3dceb053d378",
	'b',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"69397965-28e3-43d7-8936-d1a9a515edad",
	'');
INSERT INTO S_SPARM
	VALUES ("a5d99cdd-3bcd-4f5d-8f1f-90f9e0cdf575",
	"6dde8a0b-00d8-43f3-9a75-3dceb053d378",
	'c',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"263361dd-ce42-466e-a1c9-2b34603062d0",
	'');
INSERT INTO S_SPARM
	VALUES ("82a1ceb0-c1e8-4a26-978d-c98ab6ba9647",
	"6dde8a0b-00d8-43f3-9a75-3dceb053d378",
	'd',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"a5d99cdd-3bcd-4f5d-8f1f-90f9e0cdf575",
	'');
INSERT INTO S_SPARM
	VALUES ("e5c34cb7-8879-497d-9e08-26a14f4d3d0e",
	"6dde8a0b-00d8-43f3-9a75-3dceb053d378",
	'e',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"82a1ceb0-c1e8-4a26-978d-c98ab6ba9647",
	'');
INSERT INTO PE_PE
	VALUES ("6dde8a0b-00d8-43f3-9a75-3dceb053d378",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("4d4d7e74-c074-434a-a32f-c969d29ee371",
	"00000000-0000-0000-0000-000000000000",
	'WireRealizedExternalEntity',
	'',
	'//
//============================================================================
a = param.a;
b = param.b;
c = param.c;
d = param.d;
e = param.e;
T::print(s:"Note:  WireRealizeExternalEntity is no longer supported.  Use components and interfaces.");
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("3d2505aa-73c1-4739-af0e-ec8fabbcd83c",
	"4d4d7e74-c074-434a-a32f-c969d29ee371",
	'a',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("37050bb2-9a4d-46d9-adca-6337f59a3983",
	"4d4d7e74-c074-434a-a32f-c969d29ee371",
	'b',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"3d2505aa-73c1-4739-af0e-ec8fabbcd83c",
	'');
INSERT INTO S_SPARM
	VALUES ("6731b1f3-d828-4f4d-9451-626350572f99",
	"4d4d7e74-c074-434a-a32f-c969d29ee371",
	'c',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"37050bb2-9a4d-46d9-adca-6337f59a3983",
	'');
INSERT INTO S_SPARM
	VALUES ("81c57d31-2fb2-4a12-8707-ea5a2a5c7d38",
	"4d4d7e74-c074-434a-a32f-c969d29ee371",
	'd',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"6731b1f3-d828-4f4d-9451-626350572f99",
	'');
INSERT INTO S_SPARM
	VALUES ("8e1da0a2-d6ee-43b2-9a97-a3efeab7f958",
	"4d4d7e74-c074-434a-a32f-c969d29ee371",
	'e',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"81c57d31-2fb2-4a12-8707-ea5a2a5c7d38",
	'');
INSERT INTO PE_PE
	VALUES ("4d4d7e74-c074-434a-a32f-c969d29ee371",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("4fb0ff14-c8c7-4d3a-acb4-095f118b889d",
	"00000000-0000-0000-0000-000000000000",
	'TagSyncServiceSafeForInterrupts',
	'',
	'//
//
//============================================================================
// Mark a function (synchronous service) as being safe for 
// interrupt service routine (ISR) invocation.  This is also useful
// for task communication and other multi-context situations.
//============================================================================
component_name = param.component_name;
function_name = param.function_name;
component_name = T::r(s:component_name);
select any tm_sync from instances of TM_SYNC where ( ( selected.RegisteredDomain == component_name ) and ( selected.Name == function_name ) );
if ( empty tm_sync )
  create object instance tm_sync of TM_SYNC;
  tm_sync.RegisteredDomain = component_name;
  tm_sync.Name = function_name;
end if;
tm_sync.IsSafeForInterrupts = true;
T::print(s:"Function ${function_name} in component ${component_name} marked as safe for interrupt invocation.");
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("6e6f448f-f67e-4fb6-8df0-b9424a35fb13",
	"4fb0ff14-c8c7-4d3a-acb4-095f118b889d",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("7a7cd631-0bbc-414d-b6fd-01b899bf80f2",
	"4fb0ff14-c8c7-4d3a-acb4-095f118b889d",
	'function_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"6e6f448f-f67e-4fb6-8df0-b9424a35fb13",
	'');
INSERT INTO PE_PE
	VALUES ("4fb0ff14-c8c7-4d3a-acb4-095f118b889d",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("296804cd-b013-4d94-bb81-66caf55443ee",
	"00000000-0000-0000-0000-000000000000",
	'TagSystemObjectDefaultExtentSize',
	'',
	'//============================================================================
// $RCSfile: m.class.arc,v $
//
// Description:
// This archetype file contains the implementation functions for colors
// specified in the (user supplied/modified) object.clr file.
//
// Notice:
// (C) Copyright 1998-2013 Mentor Graphics Corporation
//     All rights reserved.
// Enhancements provided by TOYO Corporation.
//
// This document contains confidential and proprietary information and
// property of Mentor Graphics Corp.  No part of this document may be
// reproduced without the express written permission of Mentor Graphics Corp.
//============================================================================
//
//============================================================================
// Set default extension for entire component.
//============================================================================
extent_size = param.extent_size;
::MarkSystemObjectDefaultExtentSize( extent_size:extent_size );
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("e349665b-c0b0-4a4e-9a4f-b7242dc70f56",
	"296804cd-b013-4d94-bb81-66caf55443ee",
	'extent_size',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("296804cd-b013-4d94-bb81-66caf55443ee",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("3c18b38f-064b-4d19-8bb0-4375a3228442",
	"00000000-0000-0000-0000-000000000000",
	'MarkSystemObjectDefaultExtentSize',
	'',
	'extent_size = param.extent_size;
select many te_classes from instances of TE_CLASS;
for each te_class in te_classes
  te_class.MaxExtentSize = extent_size;
end for;
T::print(s:"Class default extent size is $t{extent_size} for _all_ classes.");
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("747d9c57-5340-4c75-95fc-6553867868d0",
	"3c18b38f-064b-4d19-8bb0-4375a3228442",
	'extent_size',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("3c18b38f-064b-4d19-8bb0-4375a3228442",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("bf5b9c9d-089a-4a05-8b29-ecbb078d8a4b",
	"00000000-0000-0000-0000-000000000000",
	'TagObjectExtentSize',
	'',
	'//
//============================================================================
obj_key_letters = param.obj_key_letters;
extent_size = param.extent_size;
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkObjectExtentSize( component_name:te_c.Name, obj_key_letters:obj_key_letters, extent_size:extent_size );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("a509f502-e1db-46a1-91d3-930b4220cdfd",
	"bf5b9c9d-089a-4a05-8b29-ecbb078d8a4b",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("a803b1c1-2cb2-437e-bdd0-84f79ee6a080",
	"bf5b9c9d-089a-4a05-8b29-ecbb078d8a4b",
	'extent_size',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"a509f502-e1db-46a1-91d3-930b4220cdfd",
	'');
INSERT INTO PE_PE
	VALUES ("bf5b9c9d-089a-4a05-8b29-ecbb078d8a4b",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("5038b2d8-0c86-49cd-b021-364b9e25b44d",
	"00000000-0000-0000-0000-000000000000",
	'MarkObjectExtentSize',
	'',
	'component_name = param.component_name;
obj_key_letters = param.obj_key_letters;
extent_size = param.extent_size;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  select any te_class related by te_c->TE_CLASS[R2064] where ( selected.Key_Lett == obj_key_letters );
  if ( not_empty te_class )
    te_class.MaxExtentSize = extent_size;
    T::print(s:"Class ''${te_class.Name}'' (${te_class.Key_Lett}) extent size is $t{extent_size}");
  else
    T::print(s:"ERROR:  Class (${obj_key_letters}) not found in component ''${te_c.Name}''.");
    T::print(s:"      => MarkObjectExtentSize( ${obj_key_letters}, $t{extent_size} )");
  end if;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("0eb4cc43-4b15-4a51-8f71-b4d630866da1",
	"5038b2d8-0c86-49cd-b021-364b9e25b44d",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("fb0291d4-fff6-4856-a146-bbb881b25320",
	"5038b2d8-0c86-49cd-b021-364b9e25b44d",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"0eb4cc43-4b15-4a51-8f71-b4d630866da1",
	'');
INSERT INTO S_SPARM
	VALUES ("6e55a198-7e5c-40e3-9e8b-0215df1bf0a9",
	"5038b2d8-0c86-49cd-b021-364b9e25b44d",
	'extent_size',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"fb0291d4-fff6-4856-a146-bbb881b25320",
	'');
INSERT INTO PE_PE
	VALUES ("5038b2d8-0c86-49cd-b021-364b9e25b44d",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("60e3d0ab-36c0-4756-a214-06d6d76a2772",
	"00000000-0000-0000-0000-000000000000",
	'TagTransformerGeneration',
	'',
	'//
//============================================================================
// This function was used in previous versions of MC-3020 to enable
// the generation of code from actions in transformers (operations).
// This function is deprecated in favor of translating operations by
// default.  Translation may be disabled with MarkClassOperationTranslationOff.
//============================================================================
obj_key_letters = param.obj_key_letters;
transformer_name = param.transformer_name;
T::print(s:"Note:  TagTransformerGeneration is no longer used.  Please use");
T::print(s:"MarkClassOperationTranslationOff to control semantic translation.");
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("3797074d-0f97-44ef-89dd-fb1f264e9abe",
	"60e3d0ab-36c0-4756-a214-06d6d76a2772",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("a8ca22d8-11d6-4c48-9266-dd201113c556",
	"60e3d0ab-36c0-4756-a214-06d6d76a2772",
	'transformer_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"3797074d-0f97-44ef-89dd-fb1f264e9abe",
	'');
INSERT INTO PE_PE
	VALUES ("60e3d0ab-36c0-4756-a214-06d6d76a2772",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("7e85c44b-7ab1-4fe8-b6a8-ac2c9354919e",
	"00000000-0000-0000-0000-000000000000",
	'TagClassOperationTranslationOff',
	'',
	'//
//============================================================================
// Disable the translation of class operation processing semantics.
// The default is for all operations to be translated.
//============================================================================
obj_key_letters = param.obj_key_letters;
op_name = param.op_name;
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkClassOperationTranslationOff( component_name:te_c.Name, obj_key_letters:obj_key_letters, op_name:op_name );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("d2c5640e-02b6-4ac7-9bac-d8422d0db179",
	"7e85c44b-7ab1-4fe8-b6a8-ac2c9354919e",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("85008b66-3579-48d3-a969-f3a440540474",
	"7e85c44b-7ab1-4fe8-b6a8-ac2c9354919e",
	'op_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"d2c5640e-02b6-4ac7-9bac-d8422d0db179",
	'');
INSERT INTO PE_PE
	VALUES ("7e85c44b-7ab1-4fe8-b6a8-ac2c9354919e",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("45422660-6d16-43ee-a916-56ea32181a53",
	"00000000-0000-0000-0000-000000000000",
	'MarkClassOperationTranslationOff',
	'',
	'component_name = param.component_name;
obj_key_letters = param.obj_key_letters;
op_name = param.op_name;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  msg = "";
  select many te_classes related by te_c->TE_CLASS[R2064] where ( false );
  if ( "*" == obj_key_letters )
    select many te_classes related by te_c->TE_CLASS[R2064];
  else
    select many te_classes related by te_c->TE_CLASS[R2064] where ( selected.Key_Lett == obj_key_letters );
  end if;
  if ( empty te_classes )
    msg = "ERROR:  Class ${obj_key_letters} not found in component.";
    msg = msg + "\n => MarkClassOperationTranslationOff( ${obj_key_letters}, ${op_name} )";
  end if;
  for each te_class in te_classes
    if ( "*" == op_name )
      select many te_tfrs related by te_class->O_OBJ[R2019]->O_TFR[R115]->TE_TFR[R2024];
      if ( not_empty te_tfrs )
        for each te_tfr in te_tfrs
          te_tfr.XlateSemantics = false;
        end for;
        msg = "Class ${te_class.Name} (${te_class.Key_Lett}) all operation semantics disabled.";
      end if;
    else
      select any o_tfr related by te_class->O_OBJ[R2019]->O_TFR[R115] where ( selected.Name == op_name );
      if ( not_empty o_tfr )
        select one te_tfr related by o_tfr->TE_TFR[R2024];
        te_tfr.XlateSemantics = false;
        msg = "Class Operation ${te_class.Name} ${te_class.Key_Lett}::${te_tfr.Name} semantics disabled.";
      else
        msg = "ERROR:  Class Operation ${te_class.Name} ${te_class.Key_Lett}::${op_name} is not defined.";
        msg = msg + "\n  => MarkClassOperationTranslationOff( ${obj_key_letters}, ${op_name} )";
      end if;
    end if;
  end for;
  if ( msg != "" )
    T::print(s:"${msg}");
  end if;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("39ec5efb-a590-4d3c-b151-fa7da2bc4f1e",
	"45422660-6d16-43ee-a916-56ea32181a53",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("0b94ae64-7bf7-4fc8-b933-a15f21a866ff",
	"45422660-6d16-43ee-a916-56ea32181a53",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"39ec5efb-a590-4d3c-b151-fa7da2bc4f1e",
	'');
INSERT INTO S_SPARM
	VALUES ("dfb2a1ff-ee5b-44dd-98fc-7bc7b3359a26",
	"45422660-6d16-43ee-a916-56ea32181a53",
	'op_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"0b94ae64-7bf7-4fc8-b933-a15f21a866ff",
	'');
INSERT INTO PE_PE
	VALUES ("45422660-6d16-43ee-a916-56ea32181a53",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("4cee3dac-7854-435e-a6bc-359372a17fa1",
	"00000000-0000-0000-0000-000000000000",
	'TagObjectTraceOff',
	'',
	'//
//============================================================================
obj_key_letters = param.obj_key_letters;
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkObjectTraceOff( component_name:te_c.Name, obj_key_letters:obj_key_letters );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("4822687e-5af0-4178-958c-c1acef7d999c",
	"4cee3dac-7854-435e-a6bc-359372a17fa1",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("4cee3dac-7854-435e-a6bc-359372a17fa1",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("1eb3bc9e-fe4b-4f04-895b-97d07895b4cc",
	"00000000-0000-0000-0000-000000000000",
	'MarkObjectTraceOff',
	'',
	'component_name = param.component_name;
obj_key_letters = param.obj_key_letters;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  msg = "";
  if ( "*" == obj_key_letters )
    select many te_classes related by te_c->TE_CLASS[R2064];
    for each te_class in te_classes
      te_class.IsTrace = false;
    end for;
    msg = "Class tracing for all is disabled in component ${te_c.Name}.";
  else
    select any te_class related by te_c->TE_CLASS[R2064] where ( selected.Key_Lett == obj_key_letters );
    if ( not_empty te_class )
      te_class.IsTrace = false;
      msg = "Class ${te_class.Name} (${te_class.Key_Lett}) tracing is disabled.";
    else
      msg = "ERROR:  Class (${obj_key_letters}) not found in component ${te_c.Name}.";
      msg = msg + "\n => MarkObjectTraceOff( ${obj_key_letters} )";
    end if;
  end if;
  if ( "" != msg )
    T::print(s:"${msg}");
  end if;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("97a7fd9b-fa70-4d0c-a11d-619ea2be78b8",
	"1eb3bc9e-fe4b-4f04-895b-97d07895b4cc",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("6ece6fef-e772-4262-99d0-41ac79179c7b",
	"1eb3bc9e-fe4b-4f04-895b-97d07895b4cc",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"97a7fd9b-fa70-4d0c-a11d-619ea2be78b8",
	'');
INSERT INTO PE_PE
	VALUES ("1eb3bc9e-fe4b-4f04-895b-97d07895b4cc",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("358e1846-4f92-4361-9e81-ce99185fc485",
	"00000000-0000-0000-0000-000000000000",
	'TagObjectTraceOn',
	'',
	'//
//============================================================================
obj_key_letters = param.obj_key_letters;
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkObjectTraceOn( component_name:te_c.Name, obj_key_letters:obj_key_letters );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("b622f0f5-dc82-4c83-8400-7e5204ca4e15",
	"358e1846-4f92-4361-9e81-ce99185fc485",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("358e1846-4f92-4361-9e81-ce99185fc485",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("84b4df91-aaf2-436e-81d0-b5ae0545bfeb",
	"00000000-0000-0000-0000-000000000000",
	'MarkObjectTraceOn',
	'',
	'component_name = param.component_name;
obj_key_letters = param.obj_key_letters;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  msg = "";
  if ( "*" == obj_key_letters )
    select many te_classes related by te_c->TE_CLASS[R2064];
    for each te_class in te_classes
      te_class.IsTrace = true;
    end for;
    msg = "Class tracing for all is enabled in component ${te_c.Name}.";
  else
    select any te_class related by te_c->TE_CLASS[R2064] where ( selected.Key_Lett == obj_key_letters );
    if ( not_empty te_class )
      te_class.IsTrace = true;
      msg = "Class ${te_class.Name} (${te_class.Key_Lett}) tracing is enabled.";
    else
      msg = "ERROR:  Class (${obj_key_letters}) not found in component ${te_c.Name}.";
      msg = msg + "\n => MarkObjectTraceOn( ${obj_key_letters} )";
    end if;
  end if;
  if ( "" != msg )
    T::print(s:"${msg}");
  end if;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("1b466289-6293-4c99-82ac-03ae289d9eec",
	"84b4df91-aaf2-436e-81d0-b5ae0545bfeb",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("af3a6975-b7f4-43ad-8c9e-f79a1e6905fb",
	"84b4df91-aaf2-436e-81d0-b5ae0545bfeb",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"1b466289-6293-4c99-82ac-03ae289d9eec",
	'');
INSERT INTO PE_PE
	VALUES ("84b4df91-aaf2-436e-81d0-b5ae0545bfeb",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("ff9bd8c8-2154-42ce-b5bd-80395e2bac9d",
	"00000000-0000-0000-0000-000000000000",
	'TagPEIsDefinedInData',
	'',
	'//
//============================================================================
// Identify this class as having preexisting instances defined
// in data.
//============================================================================
ss_prefix = param.ss_prefix;
obj_key_letters = param.obj_key_letters;
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkPEIsDefinedInData( component_name:te_c.Name, ss_prefix:ss_prefix, obj_key_letters:obj_key_letters );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("4bf0f3a7-af77-40e0-9f46-3df09f96da68",
	"ff9bd8c8-2154-42ce-b5bd-80395e2bac9d",
	'ss_prefix',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("c53abbfd-fafd-4c3c-b901-70f80656d626",
	"ff9bd8c8-2154-42ce-b5bd-80395e2bac9d",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"4bf0f3a7-af77-40e0-9f46-3df09f96da68",
	'');
INSERT INTO PE_PE
	VALUES ("ff9bd8c8-2154-42ce-b5bd-80395e2bac9d",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("88c66b01-5c2a-48db-a737-c6b684674e2e",
	"00000000-0000-0000-0000-000000000000",
	'MarkPEIsDefinedInData',
	'',
	'component_name = param.component_name;
ss_prefix = param.ss_prefix;
obj_key_letters = param.obj_key_letters;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  msg = "";
  // Get set into scope.
  select many te_classes related by te_c->TE_CLASS[R2064] where ( false );
  // Check for an explicit object.
  // Check for an explicit subsystem.
  // Check a star in the subsystem and component.
  // Otherwise, generate a coloring error.
  if ( ( "*" == ss_prefix ) and ( "*" == obj_key_letters ) )
    select many te_classes related by te_c->TE_CLASS[R2064];
  elif ( "" == ss_prefix )
    select many te_classes related by te_c->TE_CLASS[R2064] where ( selected.Key_Lett == obj_key_letters );
  elif ( "*" == obj_key_letters )
    select any s_ss from instances of S_SS where ( selected.Name == ss_prefix );
    select many te_classes related by s_ss->O_OBJ[R2]->TE_CLASS[R2019] where ( selected.Key_Lett == obj_key_letters );
  else
    msg = msg + "ERROR:  MarkPEIsDefinedInData( ${ss_prefix}, ${obj_key_letters} ) in component ${te_c.Name}\n";
  end if;
  for each te_class in te_classes
    te_class.PEIsDefinedInData = true;
    msg = msg + "Class ${te_class.Name} (${te_class.Key_Lett}) in component ${te_c.Name} marked to enable PEIs in data.\n";
  end for;
  if ( "" != msg )
    T::print(s:"${msg}");
  end if;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("80914dee-998e-46a3-a891-08531fb10f16",
	"88c66b01-5c2a-48db-a737-c6b684674e2e",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("aea3b44c-8ff3-41b7-b8a5-926ac36d27b6",
	"88c66b01-5c2a-48db-a737-c6b684674e2e",
	'ss_prefix',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"80914dee-998e-46a3-a891-08531fb10f16",
	'');
INSERT INTO S_SPARM
	VALUES ("75cb7128-d831-45ca-b6b7-73fef88b4596",
	"88c66b01-5c2a-48db-a737-c6b684674e2e",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"aea3b44c-8ff3-41b7-b8a5-926ac36d27b6",
	'');
INSERT INTO PE_PE
	VALUES ("88c66b01-5c2a-48db-a737-c6b684674e2e",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("50d782d0-9b2d-45fb-9d8e-f8644ec20777",
	"00000000-0000-0000-0000-000000000000",
	'TagStaticInstancePopulation',
	'',
	'//
//============================================================================
// Identify this class as having a static instance population.
// That is, after initialization is complete, instances are neither
// created nor destroyed.
//============================================================================
ss_prefix = param.ss_prefix;
obj_key_letters = param.obj_key_letters;
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkStaticInstancePopulation( component_name:te_c.Name, ss_prefix:ss_prefix, obj_key_letters:obj_key_letters );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("96f58697-5512-4d56-ab0f-ddb8ba3c6503",
	"50d782d0-9b2d-45fb-9d8e-f8644ec20777",
	'ss_prefix',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("70ce5a06-b753-43ff-bd99-822f5b0d2937",
	"50d782d0-9b2d-45fb-9d8e-f8644ec20777",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"96f58697-5512-4d56-ab0f-ddb8ba3c6503",
	'');
INSERT INTO PE_PE
	VALUES ("50d782d0-9b2d-45fb-9d8e-f8644ec20777",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("d6d9fdd0-ba0b-4265-8e83-ee9446037cee",
	"00000000-0000-0000-0000-000000000000",
	'MarkStaticInstancePopulation',
	'',
	'component_name = param.component_name;
ss_prefix = param.ss_prefix;
obj_key_letters = param.obj_key_letters;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  msg = "";
  // Get set into scope.
  select many te_classes related by te_c->TE_CLASS[R2064] where ( false );
  // Check for an explicit object.
  // Check for an explicit subsystem.
  // Check a star in the subsystem and component.
  // Otherwise, generate a coloring error.
  if ( ( "*" == ss_prefix ) and ( "*" == obj_key_letters ) )
    select many te_classes related by te_c->TE_CLASS[R2064];
  elif ( "" == ss_prefix )
    select many te_classes related by te_c->TE_CLASS[R2064] where ( selected.Key_Lett == obj_key_letters );
  elif ( "*" == obj_key_letters )
    select any s_ss from instances of S_SS where ( selected.Name == ss_prefix );
    select many te_classes related by s_ss->O_OBJ[R2]->TE_CLASS[R2019] where ( selected.Key_Lett == obj_key_letters );
  else
    msg = msg + "ERROR:  MarkStaticInstancePopulation( ${ss_prefix}, ${obj_key_letters} ) in component ${te_c.Name}\n";
  end if;
  for each te_class in te_classes
    te_class.IsFixedPopulation = true;
    msg = msg + "Class ${te_class.Name} (${te_class.Key_Lett}) in component ${te_c.Name} marked as\n";
    msg = msg + "as having a static instance population.\n";
  end for;
  if ( "" != msg )
    T::print(s:"${msg}");
  end if;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("0dc83078-a3c0-4409-88b7-2ceafb62ca07",
	"d6d9fdd0-ba0b-4265-8e83-ee9446037cee",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("d513aaf2-d077-499c-9aee-c4482c05d176",
	"d6d9fdd0-ba0b-4265-8e83-ee9446037cee",
	'ss_prefix',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"0dc83078-a3c0-4409-88b7-2ceafb62ca07",
	'');
INSERT INTO S_SPARM
	VALUES ("7e48b06e-96bd-4784-b152-3726a2608473",
	"d6d9fdd0-ba0b-4265-8e83-ee9446037cee",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"d513aaf2-d077-499c-9aee-c4482c05d176",
	'');
INSERT INTO PE_PE
	VALUES ("d6d9fdd0-ba0b-4265-8e83-ee9446037cee",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("ad6a1ac5-2463-425b-ba3b-b05a81f1defb",
	"00000000-0000-0000-0000-000000000000",
	'TagReadOnly',
	'',
	'//
//============================================================================
// Mark object as read only.
//============================================================================
ss_prefix = param.ss_prefix;
obj_key_letters = param.obj_key_letters;
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkReadOnly( component_name:te_c.Name, ss_prefix:ss_prefix, obj_key_letters:obj_key_letters );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("42bf2288-6d5e-4e10-aa78-9759282d9884",
	"ad6a1ac5-2463-425b-ba3b-b05a81f1defb",
	'ss_prefix',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("e5eab85f-3b68-4b2a-9425-7019b4eb7bb0",
	"ad6a1ac5-2463-425b-ba3b-b05a81f1defb",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"42bf2288-6d5e-4e10-aa78-9759282d9884",
	'');
INSERT INTO PE_PE
	VALUES ("ad6a1ac5-2463-425b-ba3b-b05a81f1defb",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("0d993c08-1be6-4143-b6e8-478b2a2bde47",
	"00000000-0000-0000-0000-000000000000",
	'MarkReadOnly',
	'',
	'component_name = param.component_name;
ss_prefix = param.ss_prefix;
obj_key_letters = param.obj_key_letters;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  msg = "";
  // Get set into scope.
  select many te_classes related by te_c->TE_CLASS[R2064] where ( false );
  // Check for an explicit object.
  // Check for an explicit subsystem.
  // Check a star in the subsystem and component.
  // Otherwise, generate a coloring error.
  if ( ( "*" == ss_prefix ) and ( "*" == obj_key_letters ) )
    select many te_classes related by te_c->TE_CLASS[R2064];
  elif ( "" == ss_prefix )
    select many te_classes related by te_c->TE_CLASS[R2064] where ( selected.Key_Lett == obj_key_letters );
  elif ( "*" == obj_key_letters )
    select any s_ss from instances of S_SS where ( selected.Name == ss_prefix );
    select many te_classes related by s_ss->O_OBJ[R2]->TE_CLASS[R2019] where ( selected.Key_Lett == obj_key_letters );
  else
    msg = msg + "ERROR:  MarkReadOnly( ${ss_prefix}, ${obj_key_letters} ) in component ${te_c.Name}\n";
  end if;
  for each te_class in te_classes
    te_class.IsReadOnly = true;
    msg = msg + "Class ${te_class.Name} (${te_class.Key_Lett}) in component ${te_c.Name} marked as read only.\n";
  end for;
  if ( "" != msg )
    T::print(s:"${msg}");
  end if;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("9034950f-1f11-401d-bea5-a5d3f23a661e",
	"0d993c08-1be6-4143-b6e8-478b2a2bde47",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("7cef7195-2567-48f6-8753-f4e9e99f470d",
	"0d993c08-1be6-4143-b6e8-478b2a2bde47",
	'ss_prefix',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"9034950f-1f11-401d-bea5-a5d3f23a661e",
	'');
INSERT INTO S_SPARM
	VALUES ("033995c4-5a4c-4f01-8707-86a66e4a2583",
	"0d993c08-1be6-4143-b6e8-478b2a2bde47",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"7cef7195-2567-48f6-8753-f4e9e99f470d",
	'');
INSERT INTO PE_PE
	VALUES ("0d993c08-1be6-4143-b6e8-478b2a2bde47",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("1bad3970-2674-4f9d-96c8-f6fa21150c8e",
	"00000000-0000-0000-0000-000000000000",
	'TagPersistentClass',
	'',
	'//
//============================================================================
// Enable persistent storage of the specified class or classes.
//============================================================================
ss_prefix = param.ss_prefix;
obj_key_letters = param.obj_key_letters;
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkPersistentClass( component_name:te_c.Name, ss_prefix:ss_prefix, obj_key_letters:obj_key_letters );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("9aad4e51-a676-4592-8b56-c0ee8ba0dd30",
	"1bad3970-2674-4f9d-96c8-f6fa21150c8e",
	'ss_prefix',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("14c16e85-e735-45f7-a3e4-4d7f099908a7",
	"1bad3970-2674-4f9d-96c8-f6fa21150c8e",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"9aad4e51-a676-4592-8b56-c0ee8ba0dd30",
	'');
INSERT INTO PE_PE
	VALUES ("1bad3970-2674-4f9d-96c8-f6fa21150c8e",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("a2379bd4-a6eb-4c60-be81-091e163415e8",
	"00000000-0000-0000-0000-000000000000",
	'MarkPersistentClass',
	'',
	'component_name = param.component_name;
ss_prefix = param.ss_prefix;
obj_key_letters = param.obj_key_letters;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  msg = "";
  // Get set into scope.
  select many te_classes related by te_c->TE_CLASS[R2064] where ( false );
  // Check for an explicit object.
  // Check for an explicit subsystem.
  // Check a star in the subsystem and component.
  // Otherwise, generate a coloring error.
  if ( ( "*" == ss_prefix ) and ( "*" == obj_key_letters ) )
    select many te_classes related by te_c->TE_CLASS[R2064];
  elif ( "" == ss_prefix )
    select many te_classes related by te_c->TE_CLASS[R2064] where ( selected.Key_Lett == obj_key_letters );
  elif ( "*" == obj_key_letters )
    select any s_ss from instances of S_SS where ( selected.Name == ss_prefix );
    select many te_classes related by s_ss->O_OBJ[R2]->TE_CLASS[R2019] where ( selected.Key_Lett == obj_key_letters );
  else
    msg = msg + "ERROR:  MarkPersistentClass( ${ss_prefix}, ${obj_key_letters} ) in component ${te_c.Name}\n";
  end if;
  for each te_class in te_classes
    te_class.Persistent = true;
    msg = msg + "Class ${te_class.Name} (${te_class.Key_Lett}) in component ${te_c.Name} marked as persistent.\n";
  end for;
  if ( "" != msg )
    T::print(s:"${msg}");
  end if;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("ef4809a6-3ffc-411e-a5e6-b64c992da49f",
	"a2379bd4-a6eb-4c60-be81-091e163415e8",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("f700629e-21f3-4c83-9207-546a68912991",
	"a2379bd4-a6eb-4c60-be81-091e163415e8",
	'ss_prefix',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"ef4809a6-3ffc-411e-a5e6-b64c992da49f",
	'');
INSERT INTO S_SPARM
	VALUES ("deb10364-9708-4381-a197-3c1863672d57",
	"a2379bd4-a6eb-4c60-be81-091e163415e8",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"f700629e-21f3-4c83-9207-546a68912991",
	'');
INSERT INTO PE_PE
	VALUES ("a2379bd4-a6eb-4c60-be81-091e163415e8",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("195be55a-c153-4cce-956f-64f8abe7646c",
	"00000000-0000-0000-0000-000000000000",
	'TagNonPersistentClass',
	'',
	'//
//============================================================================
// Disable persistent storage of the specified class or classes.
// This interface is meant to undo what the MarkPersistent interface
// does.  This way the user can tag all classes persistent and then
// unmark a few (rather than explicitly mark a whole bunch).
//============================================================================
ss_prefix = param.ss_prefix;
obj_key_letters = param.obj_key_letters;
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkNonPersistentClass( component_name:te_c.Name, ss_prefix:ss_prefix, obj_key_letters:obj_key_letters );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("7de36cca-a2ec-4d1b-8243-75377277b038",
	"195be55a-c153-4cce-956f-64f8abe7646c",
	'ss_prefix',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("c494c37a-2928-4939-8ceb-36a877cf1717",
	"195be55a-c153-4cce-956f-64f8abe7646c",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"7de36cca-a2ec-4d1b-8243-75377277b038",
	'');
INSERT INTO PE_PE
	VALUES ("195be55a-c153-4cce-956f-64f8abe7646c",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("aad44d4e-9808-4c5c-9b66-a5a4994710bd",
	"00000000-0000-0000-0000-000000000000",
	'MarkNonPersistentClass',
	'',
	'component_name = param.component_name;
ss_prefix = param.ss_prefix;
obj_key_letters = param.obj_key_letters;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  msg = "";
  // Get set into scope.
  select many te_classes related by te_c->TE_CLASS[R2064] where ( false );
  // Check for an explicit object.
  // Check for an explicit subsystem.
  // Check a star in the subsystem and component.
  // Otherwise, generate a coloring error.
  if ( ( "*" == ss_prefix ) and ( "*" == obj_key_letters ) )
    select many te_classes related by te_c->TE_CLASS[R2064];
  elif ( "" == ss_prefix )
    select many te_classes related by te_c->TE_CLASS[R2064] where ( selected.Key_Lett == obj_key_letters );
  elif ( "*" == obj_key_letters )
    select any s_ss from instances of S_SS where ( selected.Name == ss_prefix );
    select many te_classes related by s_ss->O_OBJ[R2]->TE_CLASS[R2019] where ( selected.Key_Lett == obj_key_letters );
  else
    msg = msg + "ERROR:  MarkNonPersistentClass( ${ss_prefix}, ${obj_key_letters} ) in component ${te_c.Name}\n";
  end if;
  for each te_class in te_classes
    te_class.Persistent = false;
    msg = msg + "Class ${te_class.Name} (${te_class.Key_Lett}) in component ${te_c.Name} marked as not persistent.\n";
  end for;
  if ( "" != msg )
    T::print(s:"${msg}");
  end if;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("29f98eb8-be63-4e31-af4e-6d2e89683320",
	"aad44d4e-9808-4c5c-9b66-a5a4994710bd",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("53a35455-7193-4f92-8f20-507dc6fb53d4",
	"aad44d4e-9808-4c5c-9b66-a5a4994710bd",
	'ss_prefix',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"29f98eb8-be63-4e31-af4e-6d2e89683320",
	'');
INSERT INTO S_SPARM
	VALUES ("045d9c60-0932-4e25-a9cf-b61617f9ceaf",
	"aad44d4e-9808-4c5c-9b66-a5a4994710bd",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"53a35455-7193-4f92-8f20-507dc6fb53d4",
	'');
INSERT INTO PE_PE
	VALUES ("aad44d4e-9808-4c5c-9b66-a5a4994710bd",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("3a5fd671-3f50-4446-978c-1e73b5881009",
	"00000000-0000-0000-0000-000000000000",
	'MapClassToTask',
	'',
	'//
//============================================================================
// Map classes to tasks based upon user marking.  With this interface
// an individual class, subsystem or component can be mapped to the
// specified task.
//============================================================================
ss_prefix = param.ss_prefix;
obj_key_letters = param.obj_key_letters;
task = param.task;
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkClassToTask( component_name:te_c.Name, ss_prefix:ss_prefix, obj_key_letters:obj_key_letters, task:task );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("e8f4be80-edd2-44d5-aa8b-afa40d7bad3c",
	"3a5fd671-3f50-4446-978c-1e73b5881009",
	'ss_prefix',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("aa5efa87-bb11-4272-a743-4a5183e32331",
	"3a5fd671-3f50-4446-978c-1e73b5881009",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"e8f4be80-edd2-44d5-aa8b-afa40d7bad3c",
	'');
INSERT INTO S_SPARM
	VALUES ("f7cec146-3989-46e6-8f91-905443d7a028",
	"3a5fd671-3f50-4446-978c-1e73b5881009",
	'task',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"aa5efa87-bb11-4272-a743-4a5183e32331",
	'');
INSERT INTO PE_PE
	VALUES ("3a5fd671-3f50-4446-978c-1e73b5881009",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("cc18038c-49e3-4aaa-9fba-e35cccb56657",
	"00000000-0000-0000-0000-000000000000",
	'MarkClassToTask',
	'',
	'component_name = param.component_name;
ss_prefix = param.ss_prefix;
obj_key_letters = param.obj_key_letters;
task = param.task;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  // Get set into scope.
  select many te_classes related by te_c->TE_CLASS[R2064] where ( false );
  // Check for an explicit object.
  // Check for an explicit subsystem.
  // Check a star in the subsystem and component.
  // Otherwise, generate a coloring error.
  if ( ( "*" == ss_prefix ) and ( "*" == obj_key_letters ) )
    select many te_classes related by te_c->TE_CLASS[R2064];
  elif ( "" == ss_prefix )
    select many te_classes related by te_c->TE_CLASS[R2064] where ( selected.Key_Lett == obj_key_letters );
  elif ( "*" == obj_key_letters )
    select any s_ss from instances of S_SS where ( selected.Name == ss_prefix );
    select many te_classes related by s_ss->O_OBJ[R2]->TE_CLASS[R2019] where ( selected.Key_Lett == obj_key_letters );
  else
    T::print(s:"ERROR:  MapClassToTask( ${ss_prefix}, ${obj_key_letters}, $t{task} ) in component ${te_c.Name}\n");
  end if;
  for each te_class in te_classes
    te_class.Task = task;
  end for;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("afb031c2-4a09-4ce0-b4fb-63aa29b81325",
	"cc18038c-49e3-4aaa-9fba-e35cccb56657",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("afbfff1e-a23f-4d3d-b546-86c12fe32887",
	"cc18038c-49e3-4aaa-9fba-e35cccb56657",
	'ss_prefix',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"afb031c2-4a09-4ce0-b4fb-63aa29b81325",
	'');
INSERT INTO S_SPARM
	VALUES ("7af6a327-95ba-4164-a722-c5ffb7de66c4",
	"cc18038c-49e3-4aaa-9fba-e35cccb56657",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"afbfff1e-a23f-4d3d-b546-86c12fe32887",
	'');
INSERT INTO S_SPARM
	VALUES ("a57bafa2-d83b-49b7-90e3-b686a61357f8",
	"cc18038c-49e3-4aaa-9fba-e35cccb56657",
	'task',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"7af6a327-95ba-4164-a722-c5ffb7de66c4",
	'');
INSERT INTO PE_PE
	VALUES ("cc18038c-49e3-4aaa-9fba-e35cccb56657",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("0886e8a6-1f87-4804-afca-593b1afdfb15",
	"00000000-0000-0000-0000-000000000000",
	'MarkAsChannel',
	'',
	'//============================================================================
// $RCSfile: m.component.arc,v $
//
// Description:
// Component level marking functions are found here.
//
// Notice:
// (C) Copyright 1998-2013 Mentor Graphics Corporation
//     All rights reserved.
//
// This document contains confidential and proprietary information and
// property of Mentor Graphics Corp.  No part of this document may be
// reproduced without the express written permission of Mentor Graphics Corp.
//============================================================================
//
//
//============================================================================
// Mark components as channels using package name and/or component
// name as the selection criteria.
//============================================================================
package_name = param.package_name;
component_name = param.component_name;
inc_file = param.inc_file;
::MarkComponentAsChannel( package_name:package_name, component_name:component_name, inc_file:inc_file );
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("226aedee-819c-46bd-8ac1-d9a0a1f0327e",
	"0886e8a6-1f87-4804-afca-593b1afdfb15",
	'package_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("5036c396-2bbf-4c59-955d-f834aa2ba4ea",
	"0886e8a6-1f87-4804-afca-593b1afdfb15",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"226aedee-819c-46bd-8ac1-d9a0a1f0327e",
	'');
INSERT INTO S_SPARM
	VALUES ("0cbe6a82-0f03-4382-a5d8-7c52d96bdf68",
	"0886e8a6-1f87-4804-afca-593b1afdfb15",
	'inc_file',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"5036c396-2bbf-4c59-955d-f834aa2ba4ea",
	'');
INSERT INTO PE_PE
	VALUES ("0886e8a6-1f87-4804-afca-593b1afdfb15",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("24a11e1d-e31f-4b00-82c7-abbaa51e3190",
	"00000000-0000-0000-0000-000000000000",
	'MarkComponentAsChannel',
	'',
	'package_name = param.package_name;
component_name = param.component_name;
inc_file = param.inc_file;
select many c_cs from instances of C_C where ( false );
if ( ( ( "" == package_name ) and ( "" == component_name ) ) or ( ( "*" == package_name ) and ( "*" == component_name ) ) )
  // all components
  select many c_cs from instances of C_C;
elif ( ( "" == package_name ) or ( "*" == package_name ) )
  // matches without respect to package
  select many c_cs from instances of C_C where ( selected.Name == component_name );
elif ( ( "" == component_name ) or ( "*" == component_name ) )
  // all components in packages with given name
  select many ep_pkgs from instances of EP_PKG where ( selected.Name == package_name );
  select many c_cs related by ep_pkgs->PE_PE[R8000]->C_C[R8001];
else
  // particular component in particular package(s)
  select many ep_pkgs from instances of EP_PKG where ( selected.Name == package_name );
  select many c_cs related by ep_pkgs->PE_PE[R8000]->C_C[R8001] where ( selected.Name == component_name );
end if;
select many te_cs related by c_cs->TE_C[R2054];
if ( empty te_cs )
  T::print(s:"WARNING:  MarkComponentAsChannel - Could not find component ${package_name}::${component_name}.");
end if;
for each te_c in te_cs
  select one tm_c related by te_c->TM_C[R2804];
  if ( empty tm_c )
    create object instance tm_c of TM_C;
    tm_c.Package = package_name;
    tm_c.Name = component_name;
    relate te_c to tm_c across R2804;
  end if;
  tm_c.isChannel = true;
  tm_c.include_file = inc_file;
  // Now that we have marked this component as a channel modify the message names
  select many te_macts related by te_c->TE_MACT[R2002];
  for each te_mact in te_macts
    select one te_aba related by te_mact->TE_ABA[R2010];
    te_mact.GeneratedName = te_mact.MessageName;
    te_mact.GeneratedName = T::r(s:te_mact.GeneratedName);
    te_aba.GeneratedName = te_mact.GeneratedName;
  end for;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("e6741ea4-31e9-4ce1-bfe0-39bf56d1fbca",
	"24a11e1d-e31f-4b00-82c7-abbaa51e3190",
	'package_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("76cf200d-ad36-498b-9ca1-83feeb776fbf",
	"24a11e1d-e31f-4b00-82c7-abbaa51e3190",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"e6741ea4-31e9-4ce1-bfe0-39bf56d1fbca",
	'');
INSERT INTO S_SPARM
	VALUES ("a29a76ed-33fa-4fb6-ae3b-239bf565b9b8",
	"24a11e1d-e31f-4b00-82c7-abbaa51e3190",
	'inc_file',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"76cf200d-ad36-498b-9ca1-83feeb776fbf",
	'');
INSERT INTO PE_PE
	VALUES ("24a11e1d-e31f-4b00-82c7-abbaa51e3190",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("ef59d68e-a11b-4f16-9a58-f97c3dad670e",
	"00000000-0000-0000-0000-000000000000",
	'MarkComponentWithTemplate',
	'',
	'//
//============================================================================
// Mark a component that has a C++ template.
//============================================================================
package_name = param.package_name;
component_name = param.component_name;
select many c_cs from instances of C_C where ( false );
if ( ( ( "" == package_name ) and ( "" == component_name ) ) or ( ( "*" == package_name ) and ( "*" == component_name ) ) )
  // all components
  select many c_cs from instances of C_C;
elif ( ( "" == package_name ) or ( "*" == package_name ) )
  // matches without respect to package
  select many c_cs from instances of C_C where ( selected.Name == component_name );
elif ( ( "" == component_name ) or ( "*" == component_name ) )
  // all components in packages with given name
  select many ep_pkgs from instances of EP_PKG where ( selected.Name == package_name );
  select many c_cs related by ep_pkgs->PE_PE[R8000]->C_C[R8001];
else
  // particular component in particular package(s)
  select many ep_pkgs from instances of EP_PKG where ( selected.Name == package_name );
  select many c_cs related by ep_pkgs->PE_PE[R8000]->C_C[R8001] where ( selected.Name == component_name );
end if;
select many te_cs related by c_cs->TE_C[R2054];
if ( empty te_cs )
  T::print(s:"WARNING:  MarkComponentWithTemplate - Could not find component ${package_name}::${component_name}.");
end if;
for each te_c in te_cs
  select one tm_c related by te_c->TM_C[R2804];
  if ( empty tm_c )
    create object instance tm_c of TM_C;
    tm_c.Package = package_name;
    tm_c.Name = component_name;
    tm_c.isChannel = false;
    tm_c.include_file = "";
  end if;
  if ( not_empty te_c )
    relate te_c to tm_c across R2804;
  end if;
  // Make the new template the current one for follow-on markings.
  select many tm_templates from instances of TM_TEMPLATE;
  for each tm_template in tm_templates
    tm_template.current = false;
  end for;
  create object instance tm_template of TM_TEMPLATE;
  tm_template.current = true;
  relate tm_template to tm_c across R2800;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("aa08448f-e83f-456c-bfb3-4a81dc7495e3",
	"ef59d68e-a11b-4f16-9a58-f97c3dad670e",
	'package_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("134cd9a1-78e1-4fff-a77d-57b79bc7ec74",
	"ef59d68e-a11b-4f16-9a58-f97c3dad670e",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"aa08448f-e83f-456c-bfb3-4a81dc7495e3",
	'');
INSERT INTO PE_PE
	VALUES ("ef59d68e-a11b-4f16-9a58-f97c3dad670e",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("b1de2c3d-6910-46d9-939c-ee355836a207",
	"00000000-0000-0000-0000-000000000000",
	'MarkInterfaceWithTemplate',
	'',
	'//
//============================================================================
// Mark an interface that has a C++ template.
//============================================================================
package_name = param.package_name;
interface_name = param.interface_name;
select any c_i from instances of C_I where ( false );
if ( ( "" == package_name ) or ( "*" == package_name ) )
  select any c_i from instances of C_I where ( selected.Name == interface_name );
else
  select many ep_pkgs from instances of EP_PKG where ( selected.Name == package_name );
  select any c_i related by ep_pkgs->PE_PE[R8000]->C_I[R8001] where ( selected.Name == interface_name );
end if;
if ( empty c_i )
  T::print(s:"WARNING:  MarkInterfaceWithTemplate - Could not find interface ${package_name}::${interface_name}.");
end if;
create object instance tm_if of TM_IF;
tm_if.Package = package_name;
tm_if.Name = interface_name;
relate tm_if to c_i across R2807;
// Make the new template the current one for follow-on markings.
select many tm_templates from instances of TM_TEMPLATE;
for each tm_template in tm_templates
  tm_template.current = false;
end for;
create object instance tm_template of TM_TEMPLATE;
tm_template.current = true;
relate tm_template to tm_if across R2802;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("fa628b67-2625-4f6c-81b3-fce3bab49930",
	"b1de2c3d-6910-46d9-939c-ee355836a207",
	'package_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("c54bfde9-7da7-4e9c-8790-d3f91c938031",
	"b1de2c3d-6910-46d9-939c-ee355836a207",
	'interface_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"fa628b67-2625-4f6c-81b3-fce3bab49930",
	'');
INSERT INTO PE_PE
	VALUES ("b1de2c3d-6910-46d9-939c-ee355836a207",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("a7a85f28-1aa8-418d-b9f4-a78089b67441",
	"00000000-0000-0000-0000-000000000000",
	'AddTemplateParameter',
	'',
	'//
//============================================================================
// Add a template parameter to a C++ template.
// The template is located based upon the associated component.
//============================================================================
package_name = param.package_name;
component_name = param.component_name;
type_name = param.type_name;
variable_name = param.variable_name;
default_value = param.default_value;
select any tm_template from instances of TM_TEMPLATE where ( selected.current );
select any tm_c from instances of TM_C where ( ( selected.Package == package_name ) and ( selected.Name == component_name ) );
if ( ( "" == package_name ) or ( "*" == package_name ) )
  select any tm_c from instances of TM_C where ( selected.Name == component_name );
  if ( empty tm_c )
    select one tm_c related by tm_template->TM_C[R2800];
  end if;
end if;
if ( empty tm_c )
  select any tm_if from instances of TM_IF where ( ( selected.Package == package_name ) and ( selected.Name == component_name ) );
  if ( ( "" == package_name ) or ( "*" == package_name ) )
    select any tm_if from instances of TM_IF where ( selected.Name == component_name );
    if ( empty tm_if )
      select one tm_if related by tm_template->TM_IF[R2802];
    end if;
  end if;
  if ( empty tm_if )
    T::print(s:"ERROR:  AddTemplateParameter - Could not find element (component or interface) ${package_name}::${component_name}.");
  else
    select one tm_template related by tm_if->TM_TEMPLATE[R2802];
  end if;
else
  select one tm_template related by tm_c->TM_TEMPLATE[R2800];
end if;
if ( not_empty tm_template )
  create object instance tm_tp of TM_TP;
  relate tm_tp to tm_template across R2801;
  tm_tp.typename = type_name;
  tm_tp.Name = variable_name;
  tm_tp.DefaultValue = default_value;
else
  T::print(s:"ERROR:  AddTemplateParameter - Could not find template for element ${package_name}::${component_name}.");
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("4af07448-c79a-419d-a2bd-674faec2a486",
	"a7a85f28-1aa8-418d-b9f4-a78089b67441",
	'package_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("a30e5342-86d0-4d95-96a4-7ab616569634",
	"a7a85f28-1aa8-418d-b9f4-a78089b67441",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"4af07448-c79a-419d-a2bd-674faec2a486",
	'');
INSERT INTO S_SPARM
	VALUES ("9eadff72-e21e-4aaa-b2b9-b6514b74bcc1",
	"a7a85f28-1aa8-418d-b9f4-a78089b67441",
	'type_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"a30e5342-86d0-4d95-96a4-7ab616569634",
	'');
INSERT INTO S_SPARM
	VALUES ("70abab96-a374-406b-94fd-a1f6bd90c6f3",
	"a7a85f28-1aa8-418d-b9f4-a78089b67441",
	'variable_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"9eadff72-e21e-4aaa-b2b9-b6514b74bcc1",
	'');
INSERT INTO S_SPARM
	VALUES ("c649813b-d372-47f1-9a24-4e83f97f7b55",
	"a7a85f28-1aa8-418d-b9f4-a78089b67441",
	'default_value',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"70abab96-a374-406b-94fd-a1f6bd90c6f3",
	'');
INSERT INTO PE_PE
	VALUES ("a7a85f28-1aa8-418d-b9f4-a78089b67441",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("984254fc-f2e9-48c9-9ad5-5671397c9fe6",
	"00000000-0000-0000-0000-000000000000",
	'SetTemplateParameter',
	'',
	'//
//============================================================================
// Set the template parameter for an instance of a component or interface
// class.  The template is navigated based upon the associated package
// and instance.
//============================================================================
package_name = param.package_name;
instance = param.instance;
variable_name = param.variable_name;
value = param.value;
// Base selection upon the template that most recently got created.
select any tm_template from instances of TM_TEMPLATE where ( selected.current );
select one tm_c related by tm_template->TM_C[R2800];
select one tm_if related by tm_template->TM_IF[R2802];
select any tm_tp related by tm_template->TM_TP[R2801] where ( selected.Name == variable_name );
if ( ( ( "" == package_name ) or ( "" == instance ) ) or ( ( "" == variable_name ) or ( "" == value ) ) )
  T::print(s:"ERROR:  SetTemplateParameter -  Must provide valid strings for all arguments. ${package_name}::${instance}.${variable_name} to value ${value}.");
else
  select any ep_pkg from instances of EP_PKG where ( selected.Name == package_name );
  if ( empty ep_pkg )
    T::print(s:"ERROR:  SetTemplateParameter -  Package, ${package_name}, not found for ${package_name}::${instance}.${variable_name} to value ${value}.");
  end if;
  if ( not_empty tm_tp )
    if ( not_empty tm_c )
      select any te_ci related by ep_pkg->PE_PE[R8000]->CL_IC[R8001]->TE_CI[R2009] where ( selected.ClassifierName == instance );
      if ( empty te_ci )
        select any te_ci related by ep_pkg->PE_PE[R8000]->C_C[R8001]->CL_IC[R4205]->TE_CI[R2009] where ( selected.ClassifierName == instance );
      end if;
      if ( not_empty te_ci )
        create object instance tm_tpv of TM_TPV;
        tm_tpv.instance = instance;
        tm_tpv.value = value;
        relate tm_tpv to tm_tp across R2808;
        relate tm_tpv to te_ci across R2805;
              else
        T::print(s:"ERROR:  SetTemplateParameter - no component instance for ${package_name}::${instance} with name ${variable_name}.");
      end if;
    elif ( not_empty tm_if )
      select many te_iirs related by ep_pkg->PE_PE[R8000]->CL_IC[R8001]->CL_IIR[R4700]->TE_IIR[R2013] where ( ( selected.port_name == instance ) and ( selected.interface_name == tm_if.Name ) );
      for each te_iir in te_iirs
        create object instance tm_tpv of TM_TPV;
        tm_tpv.instance = instance;
        tm_tpv.value = value;
        relate tm_tpv to tm_tp across R2808;
        relate tm_tpv to te_iir across R2806;
              end for;
      select many te_iirs related by ep_pkg->PE_PE[R8000]->C_C[R8001]->CL_IC[R4205]->CL_IIR[R4700]->TE_IIR[R2013] where ( ( selected.port_name == instance ) and ( selected.interface_name == tm_if.Name ) );
      for each te_iir in te_iirs
        create object instance tm_tpv of TM_TPV;
        tm_tpv.instance = instance;
        tm_tpv.value = value;
        relate tm_tpv to tm_tp across R2808;
        relate tm_tpv to te_iir across R2806;
              end for;
      select many te_iirs related by ep_pkg->PE_PE[R8000]->C_C[R8001]->C_PO[R4010]->C_IR[R4016]->TE_IIR[R2046] where ( ( selected.port_name == instance ) and ( selected.interface_name == tm_if.Name ) );
      for each te_iir in te_iirs
        create object instance tm_tpv of TM_TPV;
        tm_tpv.instance = instance;
        tm_tpv.value = value;
        relate tm_tpv to tm_tp across R2808;
        relate tm_tpv to te_iir across R2806;
              end for;
    else
      T::print(s:"ERROR:  SetTemplateParameter - Found a template parameter for a template that is orphaned.");
    end if;
  else
    T::print(s:"WARNING:  SetTemplateParameter - Did NOT find template parameter for package ${package_name}::${instance} with name ${variable_name}.");
  end if;
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("78144dc8-41e3-4921-953f-4b97047171f2",
	"984254fc-f2e9-48c9-9ad5-5671397c9fe6",
	'package_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("819184eb-32dc-449d-bbbf-b3f57236c576",
	"984254fc-f2e9-48c9-9ad5-5671397c9fe6",
	'instance',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"78144dc8-41e3-4921-953f-4b97047171f2",
	'');
INSERT INTO S_SPARM
	VALUES ("3f89a344-9524-43c6-ab52-f349f925b83b",
	"984254fc-f2e9-48c9-9ad5-5671397c9fe6",
	'variable_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"819184eb-32dc-449d-bbbf-b3f57236c576",
	'');
INSERT INTO S_SPARM
	VALUES ("79f4c104-a93b-407c-8ce9-fbf448332a3a",
	"984254fc-f2e9-48c9-9ad5-5671397c9fe6",
	'value',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"3f89a344-9524-43c6-ab52-f349f925b83b",
	'');
INSERT INTO PE_PE
	VALUES ("984254fc-f2e9-48c9-9ad5-5671397c9fe6",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("efde9230-0e65-46e3-ae68-c83cf8975a4b",
	"00000000-0000-0000-0000-000000000000",
	'SetTPV',
	'',
	'//
//============================================================================
// Set Template Parameter Value
//   Once components and interfaces have been marked with C++ templates
//   and all template parameters added, the template parameter values can
//   be set and associated with the appropriate component and interface
//   instances (component references and ports).
//   Set the template parameter for an instance of a component or interface
//   class.  The template is navigated based upon the associated package
//   and instance.
//============================================================================
package_name = param.package_name;
parent_component = param.parent_component;
component = param.component;
classifier_name = param.classifier_name;
port = param.port;
variable_name = param.variable_name;
value = param.value;
trace = "${package_name}::${parent_component}::${component}:${classifier_name}.${variable_name} value ${value} (and port ${port})";
if ( ( ( "" == package_name ) or ( "" == component ) ) or ( ( "" == classifier_name ) or ( ( ( "" == variable_name ) or ( "" == value ) ) ) ) )
  T::print(s:"ERROR:  SetTPV - Must provide valid strings for all arguments except the optional port, ${package_name}::${parent_component}::${component}:${classifier_name}.${variable_name} to value ${value} (and port ${port}).");
else
  select any ep_pkg from instances of EP_PKG where ( selected.Name == package_name );
  if ( empty ep_pkg )
    T::print(s:"ERROR:  SetTPV -  Package, ${package_name}, not found for ${package_name}::${parent_component}::${component}:${classifier_name}.${variable_name} to value ${value}.");
  end if;
  select many te_cis related by ep_pkg->PE_PE[R8000]->CL_IC[R8001]->TE_CI[R2009] where ( ( selected.Name == component ) and ( selected.ClassifierName == classifier_name ) );
  if ( "" != parent_component )
    select many c_cs related by ep_pkg->PE_PE[R8000]->C_C[R8001] where ( selected.Name == parent_component );
    select many te_cis related by c_cs->CL_IC[R4205]->TE_CI[R2009] where ( ( selected.Name == component ) and ( selected.ClassifierName == classifier_name ) );
  else
    if ( empty te_cis )
      select many te_cis related by ep_pkg->PE_PE[R8000]->C_C[R8001]->CL_IC[R4205]->TE_CI[R2009] where ( ( selected.Name == component ) and ( selected.ClassifierName == classifier_name ) );
    end if;
  end if;
  te_cis_count = cardinality te_cis;
  if ( te_cis_count > 1 )
    T::print(s:"WARNING:  SetTPV - More than one instantiation found for ${package_name}::${parent_component}::${component}:${classifier_name}.${variable_name} to value ${value}.");
    T::print(s:"                   All instantiations will be marked to receive the same template parameter value.");
  elif ( 0 == te_cis_count )
    T::print(s:"ERROR:  SetTPV - Component instance not found for ${package_name}::${parent_component}::${component}:${classifier_name}.");
  end if;
  if ( "" == port )
    // We are setting values for component templates.
    for each te_ci in te_cis
      select one tm_template related by te_ci->TE_C[R2008]->TM_C[R2804]->TM_TEMPLATE[R2800];
      select any tm_tp related by tm_template->TM_TP[R2801] where ( selected.Name == variable_name );
      if ( not_empty tm_tp )
        // Create the template parameter value and link it in.
        create object instance tm_tpv of TM_TPV;
        tm_tpv.instance = component;
        tm_tpv.value = value;
        relate tm_tpv to tm_tp across R2808;
        relate tm_tpv to te_ci across R2805;
              else
        T::print(s:"WARNING:  SetTPV - Template parameter not found for ${package_name}::${parent_component}::${component}:${classifier_name}.");
      end if;
    end for;
  else
    // We are setting a value for an interface template.
    for each te_ci in te_cis
      select any te_iir related by te_ci->CL_IC[R2009]->CL_IIR[R4700]->TE_IIR[R2013] where ( selected.port_name == port );
      ::SetTPV_for_channel_connection( te_iir:te_iir, variable_name:variable_name, value:value, trace:trace, flavor:0 );
    end for;
  end if;
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("f81de1fd-5592-451d-90a6-8b7431565ede",
	"efde9230-0e65-46e3-ae68-c83cf8975a4b",
	'package_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("08d864a4-0285-42a4-9f76-15f1c5ce4d32",
	"efde9230-0e65-46e3-ae68-c83cf8975a4b",
	'parent_component',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"f81de1fd-5592-451d-90a6-8b7431565ede",
	'');
INSERT INTO S_SPARM
	VALUES ("23eeecce-071b-49e9-8215-f6b22a396647",
	"efde9230-0e65-46e3-ae68-c83cf8975a4b",
	'component',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"08d864a4-0285-42a4-9f76-15f1c5ce4d32",
	'');
INSERT INTO S_SPARM
	VALUES ("832a3c4f-5b1f-41fb-a70c-0ebf93bf0176",
	"efde9230-0e65-46e3-ae68-c83cf8975a4b",
	'classifier_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"23eeecce-071b-49e9-8215-f6b22a396647",
	'');
INSERT INTO S_SPARM
	VALUES ("0554d8a7-671d-4bc2-9d5f-5104cf620f82",
	"efde9230-0e65-46e3-ae68-c83cf8975a4b",
	'port',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"832a3c4f-5b1f-41fb-a70c-0ebf93bf0176",
	'');
INSERT INTO S_SPARM
	VALUES ("a5344f47-af74-422e-83ff-49d65ae7d6c9",
	"efde9230-0e65-46e3-ae68-c83cf8975a4b",
	'variable_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"0554d8a7-671d-4bc2-9d5f-5104cf620f82",
	'');
INSERT INTO S_SPARM
	VALUES ("d56593d0-4af2-4155-8efc-80a8bdcc0e97",
	"efde9230-0e65-46e3-ae68-c83cf8975a4b",
	'value',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"a5344f47-af74-422e-83ff-49d65ae7d6c9",
	'');
INSERT INTO PE_PE
	VALUES ("efde9230-0e65-46e3-ae68-c83cf8975a4b",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("bd938be9-18ca-4aba-b8af-9a08378924d9",
	"00000000-0000-0000-0000-000000000000",
	'SetTPV_for_channel_connection',
	'',
	'//
// Rules
// Always start from IIR.
// On a first call, first try to cross a satisfaction from IIR.
// It is only possible to go upward on a delegation on the first call.
// After the first call, it is O.K. to cross a satisfaction after crossing
// a delegation.
// After traversing to an imported interface reference, consider marking
// the associated interface reference.  (Mark both.)
// Gather all the delegated_te_iirs into a collection and then loop through.
// This is necessary for delegations only.
// Be smart and look for only the right types in the right direction.
te_iir = param.te_iir;
variable_name = param.variable_name;
value = param.value;
trace = param.trace;
flavor = param.flavor;
select many delegated_te_iirs from instances of TE_IIR where ( false );
// flavors:  0:firstcall, 1:coming from satisfaction, 2:coming from delegation
select any tm_tp related by te_iir->C_IR[R2046]->C_I[R4012]->TM_IF[R2807]->TM_TEMPLATE[R2802]->TM_TP[R2801] where ( selected.Name == variable_name );
if ( empty tm_tp )
  select any tm_tp related by te_iir->CL_IIR[R2013]->C_IR[R4701]->C_I[R4012]->TM_IF[R2807]->TM_TEMPLATE[R2802]->TM_TP[R2801] where ( selected.Name == variable_name );
  if ( empty tm_tp )
    T::print(s:"WARNING:  SetTPV - Template parameter not found for ${trace}.");
  end if;
end if;
// Determine whether we have an interface reference for a component marked
// as a channel.  Process channel interface references on first call only.
select one tm_c related by te_iir->TE_PO[R2080]->TE_C[R2005]->TM_C[R2804];
isChannel = false;
if ( not_empty tm_c )
  isChannel = tm_c.isChannel;
end if;
// See if this template parameter already has a value for this reference.
select any tm_tpv related by te_iir->TM_TPV[R2806] where ( ( selected.instance == te_iir.interface_name ) and ( selected.tm_tpID == tm_tp.ID ) );
// If isChannel, then skip unless it is the first call.
if ( ( ( ( empty tm_tpv ) and ( not_empty tm_tp ) ) and ( not isChannel ) ) or ( 0 == flavor ) )
  //.select one te_c related by te_iir->TE_PO[R2080]->TE_C[R2005]
  //.print "${trace} ${te_iir.port_name} ${te_c.Name}"
  create object instance tm_tpv of TM_TPV;
  tm_tpv.instance = te_iir.interface_name;
  tm_tpv.value = value;
  relate tm_tpv to tm_tp across R2808;
  relate tm_tpv to te_iir across R2806;
    //
  // Find a satisfaction or delegation.  Recursively apply the same template parameter value to the connections.
  select one satisfied_te_iir related by te_iir->TE_IIR[R2081.''requires or delegates''] where ( false );
  if ( ( 0 == flavor ) or ( 2 == flavor ) )
    // iir to iir
    // Search from imported reference across satisfaction to imported reference provision to requirement.
    select many satisfied_te_iirs related by te_iir->CL_IIR[R2013]->CL_IP[R4703]->CL_IPINS[R4705]->C_SF[R4705]->CL_IR[R4706]->CL_IIR[R4703]->TE_IIR[R2013];
    if ( not_empty satisfied_te_iirs )
      for each satisfied_te_iir in satisfied_te_iirs
        ::SetTPV_for_channel_connection( te_iir:satisfied_te_iir, variable_name:variable_name, value:value, trace:" 1${trace}", flavor:1 );
      end for;
    else
      // Search from imported reference across satisfaction to imported reference requirement to provision.
      select one satisfied_te_iir related by te_iir->CL_IIR[R2013]->CL_IR[R4703]->C_SF[R4706]->CL_IPINS[R4705]->CL_IP[R4705]->CL_IIR[R4703]->TE_IIR[R2013];
      if ( not_empty satisfied_te_iir )
        ::SetTPV_for_channel_connection( te_iir:satisfied_te_iir, variable_name:variable_name, value:value, trace:" 2${trace}", flavor:1 );
      else
        // mixed iir and ir
        // Search from imported reference across satisfaction to reference imported provision to requirement.
        select many satisfied_te_iirs related by te_iir->CL_IIR[R2013]->CL_IP[R4703]->CL_IPINS[R4705]->C_SF[R4705]->C_R[R4002]->C_IR[R4009]->TE_IIR[R2046];
        if ( not_empty satisfied_te_iirs )
          for each satisfied_te_iir in satisfied_te_iirs
            ::SetTPV_for_channel_connection( te_iir:satisfied_te_iir, variable_name:variable_name, value:value, trace:" 3${trace}", flavor:1 );
          end for;
        else
          // Search from imported reference across satisfaction to reference imported requirement to provision.
          select one satisfied_te_iir related by te_iir->CL_IIR[R2013]->CL_IR[R4703]->C_SF[R4706]->C_P[R4002]->C_IR[R4009]->TE_IIR[R2046];
          if ( not_empty satisfied_te_iir )
            ::SetTPV_for_channel_connection( te_iir:satisfied_te_iir, variable_name:variable_name, value:value, trace:" 4${trace}", flavor:1 );
          else
            // Search from reference across satisfaction to reference provision to requirement.
            select any satisfied_te_iir related by te_iir->C_IR[R2046]->C_P[R4009]->C_SF[R4002]->C_R[R4002]->C_IR[R4009]->TE_IIR[R2046];
            if ( not_empty satisfied_te_iir )
              ::SetTPV_for_channel_connection( te_iir:satisfied_te_iir, variable_name:variable_name, value:value, trace:" 4a${trace}", flavor:1 );
            else
              // Search from reference across satisfaction to reference requirement to provision.
              select any satisfied_te_iir related by te_iir->C_IR[R2046]->C_R[R4009]->C_SF[R4002]->C_P[R4002]->C_IR[R4009]->TE_IIR[R2046];
              if ( not_empty satisfied_te_iir )
                ::SetTPV_for_channel_connection( te_iir:satisfied_te_iir, variable_name:variable_name, value:value, trace:" 4b${trace}", flavor:1 );
              else
                // Search from reference across satisfaction to imported reference imported provision to requirement.
                // CDS should not find these, because we already go the other mixed direction?
                //.select one satisfied_te_iir related by te_iir->C_IR[R2046]->C_P[R4009]->C_SF[R4002]->CL_IR[R4706]->CL_IIR[R4703]->TE_IIR[R2013]
                if ( not_empty satisfied_te_iir )
                  ::SetTPV_for_channel_connection( te_iir:satisfied_te_iir, variable_name:variable_name, value:value, trace:" 5${trace}", flavor:1 );
                else
                  // Search from reference across satisfaction to imported reference imported requirement to provision.
                  // CDS should not find these, because we already go the other mixed direction?
                  //.select one satisfied_te_iir related by te_iir->C_IR[R2046]->C_R[R4009]->C_SF[R4002]->CL_IPINS[R4705]->CL_IP[R4705]->CL_IIR[R4703]->TE_IIR[R2013]
                  if ( not_empty satisfied_te_iir )
                    ::SetTPV_for_channel_connection( te_iir:satisfied_te_iir, variable_name:variable_name, value:value, trace:" 6${trace}", flavor:1 );
                  end if;
                end if;
              end if;
            end if;
          end if;
        end if;
      end if;
    end if;
  end if;
  // delegation
  if ( empty satisfied_te_iir )
    select one delegated_te_iir related by satisfied_te_iir->TE_IIR[R2081.''requires or delegates''] where ( false );
    // IIR IR DG  RID IR
    select any delegated_te_iir related by te_iir->CL_IIR[R2013]->C_DG[R4704]->C_RID[R4013]->C_IR[R4013]->TE_IIR[R2046];
    if ( not_empty delegated_te_iir )
      delegated_te_iirs = delegated_te_iirs;
      trace = "7a " + trace;
    end if;
    select any delegated_te_iir related by te_iir->CL_IIR[R2013]->C_IR[R4701]->C_RID[R4013]->C_DG[R4013]->CL_IIR[R4704]->TE_IIR[R2013];
    if ( not_empty delegated_te_iir )
      delegated_te_iirs = delegated_te_iirs;
      trace = "7b " + trace;
    end if;
    //     IR DG  RID IR
    select any delegated_te_iir related by te_iir->C_IR[R2046]->C_DG[R4014]->C_RID[R4013]->C_IR[R4013]->TE_IIR[R2046];
    if ( not_empty delegated_te_iir )
      delegated_te_iirs = delegated_te_iirs;
      trace = "8a " + trace;
    end if;
    //     IR RID DG  IR
    select any delegated_te_iir related by te_iir->C_IR[R2046]->C_RID[R4013]->C_DG[R4013]->C_IR[R4014]->TE_IIR[R2046];
    if ( not_empty delegated_te_iir )
      delegated_te_iirs = delegated_te_iirs;
      trace = "8b " + trace;
    end if;
    // IIR IR DG  RID IR
    select any delegated_te_iir related by te_iir->CL_IIR[R2013]->C_IR[R4701]->C_DG[R4014]->C_RID[R4013]->C_IR[R4013]->TE_IIR[R2046];
    if ( not_empty delegated_te_iir )
      delegated_te_iirs = delegated_te_iirs;
      trace = "8c " + trace;
    end if;
    //     IR DG  RID IR IIR
    select any delegated_te_iir related by te_iir->C_IR[R2046]->C_DG[R4014]->C_RID[R4013]->C_IR[R4013]->CL_IIR[R4701]->TE_IIR[R2013];
    if ( not_empty delegated_te_iir )
      delegated_te_iirs = delegated_te_iirs;
      trace = "8d " + trace;
    end if;
    // IIR IR RID DG  IR
    select many more_delegated_te_iirs related by te_iir->CL_IIR[R2013]->C_IR[R4701]->C_RID[R4013]->C_DG[R4013]->C_IR[R4014]->TE_IIR[R2046];
    if ( not_empty more_delegated_te_iirs )
      delegated_te_iirs = delegated_te_iirs;
      trace = "8e " + trace;
    end if;
    //     IR RID DG  IR IIR
    select many more_delegated_te_iirs related by te_iir->C_IR[R2046]->C_RID[R4013]->C_DG[R4013]->C_IR[R4014]->CL_IIR[R4701]->TE_IIR[R2013];
    if ( not_empty more_delegated_te_iirs )
      delegated_te_iirs = delegated_te_iirs;
      trace = "8f " + trace;
    end if;
    // IIR IR DG  RID IR IIR
    select any delegated_te_iir related by te_iir->CL_IIR[R2013]->C_IR[R4701]->C_DG[R4014]->C_RID[R4013]->C_IR[R4013]->CL_IIR[R4701]->TE_IIR[R2013];
    if ( not_empty delegated_te_iir )
      delegated_te_iirs = delegated_te_iirs;
      trace = "8g " + trace;
    end if;
    // IIR IR RID DG  IR IIR
    select many more_delegated_te_iirs related by te_iir->CL_IIR[R2013]->C_IR[R4701]->C_RID[R4013]->C_DG[R4013]->C_IR[R4014]->CL_IIR[R4701]->TE_IIR[R2013];
    if ( not_empty more_delegated_te_iirs )
      delegated_te_iirs = delegated_te_iirs;
      trace = "8h " + trace;
    end if;
    select any delegated_te_iir related by te_iir->CL_IIR[R2013]->C_IR[R4701]->C_RID[R4013]->C_DG[R4013]->C_IR[R4014]->TE_IIR[R2046];
    if ( not_empty delegated_te_iir )
      delegated_te_iirs = delegated_te_iirs;
      trace = "B " + trace;
    end if;
    for each delegated_te_iir in delegated_te_iirs
      ::SetTPV_for_channel_connection( te_iir:delegated_te_iir, variable_name:variable_name, value:value, trace:"${trace}", flavor:2 );
    end for;
  end if;
else
  if ( empty tm_tp )
    T::print(s:"SetTPV:  warning - no variable ${te_iir.port_name} ${te_iir.interface_name}");
  end if;
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("bf32f610-0331-4ccd-b6f4-8abd7d737b88",
	"bd938be9-18ca-4aba-b8af-9a08378924d9",
	'te_iir',
	"149ddb67-8f06-43ce-87d4-ecd7ebdd1dd4",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("149ddb67-8f06-43ce-87d4-ecd7ebdd1dd4",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Interface Instance>',
	'',
	'',
	'../Translation Extensions/Translation Extensions.xtuml');
INSERT INTO S_SPARM
	VALUES ("d317a8d0-45fd-456c-8040-7cb04a7ebc82",
	"bd938be9-18ca-4aba-b8af-9a08378924d9",
	'variable_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"bf32f610-0331-4ccd-b6f4-8abd7d737b88",
	'');
INSERT INTO S_SPARM
	VALUES ("106ab40f-4356-4511-a3c6-c37f86ab8033",
	"bd938be9-18ca-4aba-b8af-9a08378924d9",
	'value',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"d317a8d0-45fd-456c-8040-7cb04a7ebc82",
	'');
INSERT INTO S_SPARM
	VALUES ("44680bc7-a9aa-4488-85bb-5f9cb8037ed8",
	"bd938be9-18ca-4aba-b8af-9a08378924d9",
	'trace',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"106ab40f-4356-4511-a3c6-c37f86ab8033",
	'');
INSERT INTO S_SPARM
	VALUES ("8732c3e6-84a5-4a06-9e25-9e410dac722c",
	"bd938be9-18ca-4aba-b8af-9a08378924d9",
	'flavor',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"44680bc7-a9aa-4488-85bb-5f9cb8037ed8",
	'');
INSERT INTO PE_PE
	VALUES ("bd938be9-18ca-4aba-b8af-9a08378924d9",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("03191f25-7aef-479f-9d65-62fa55efb825",
	"00000000-0000-0000-0000-000000000000",
	'MarkInterfacePrefix',
	'',
	'//
//============================================================================
// Mark the prefixes for the interface naming.
//============================================================================
provided_port = param.provided_port;
required_port = param.required_port;
channel = param.channel;
select any te_prefix from instances of TE_PREFIX;
te_prefix.provided_port = provided_port;
te_prefix.required_port = required_port;
te_prefix.channel = channel;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("fe7f9d8d-b00a-40fe-ae47-e74e078ce9c4",
	"03191f25-7aef-479f-9d65-62fa55efb825",
	'provided_port',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("d84a18ab-fa36-416d-a374-351d7a591b9a",
	"03191f25-7aef-479f-9d65-62fa55efb825",
	'required_port',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"fe7f9d8d-b00a-40fe-ae47-e74e078ce9c4",
	'');
INSERT INTO S_SPARM
	VALUES ("0e196455-5a97-4cd8-b9d4-0015a0b85190",
	"03191f25-7aef-479f-9d65-62fa55efb825",
	'channel',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"d84a18ab-fa36-416d-a374-351d7a591b9a",
	'');
INSERT INTO PE_PE
	VALUES ("03191f25-7aef-479f-9d65-62fa55efb825",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("5181e414-80d5-4783-baff-26bef72a5ad5",
	"00000000-0000-0000-0000-000000000000",
	'MarkComponentAsRealized',
	'',
	'//
//============================================================================
// Mark components as realized using package name and/or component
// name as the selection criteria.
//============================================================================
package_name = param.package_name;
component_name = param.component_name;
inc_file = param.inc_file;
select many c_cs from instances of C_C where ( false );
if ( ( ( "" == package_name ) and ( "" == component_name ) ) or ( ( "*" == package_name ) and ( "*" == component_name ) ) )
  // all components
  select many c_cs from instances of C_C;
elif ( ( "" == package_name ) or ( "*" == package_name ) )
  // matches without respect to package
  select many c_cs from instances of C_C where ( selected.Name == component_name );
elif ( ( "" == component_name ) or ( "*" == component_name ) )
  // all components in packages with given name
  select many ep_pkgs from instances of EP_PKG where ( selected.Name == package_name );
  select many c_cs related by ep_pkgs->PE_PE[R8000]->C_C[R8001];
else
  // particular component in particular package(s)
  select many ep_pkgs from instances of EP_PKG where ( selected.Name == package_name );
  select many c_cs related by ep_pkgs->PE_PE[R8000]->C_C[R8001] where ( selected.Name == component_name );
end if;
if ( empty c_cs )
  T::print(s:"WARNING:  MarkComponentAsRealized - Could not find component ${package_name}::${component_name}.");
end if;
for each c_c in c_cs
  select any tm_c from instances of TM_C where ( ( selected.Name == component_name ) and ( selected.Package == package_name ) );
  if ( empty tm_c )
    create object instance tm_c of TM_C;
    tm_c.Package = package_name;
    tm_c.Name = component_name;
  end if;
  tm_c.isRealized = true;
  tm_c.include_file = inc_file;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("5676a4e1-4d00-4d5b-9767-aa3939a80352",
	"5181e414-80d5-4783-baff-26bef72a5ad5",
	'package_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("48122149-100e-4a3f-9f54-0da4bf747c31",
	"5181e414-80d5-4783-baff-26bef72a5ad5",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"5676a4e1-4d00-4d5b-9767-aa3939a80352",
	'');
INSERT INTO S_SPARM
	VALUES ("68be5c92-1ab6-4814-99a8-d13d15a9b4b1",
	"5181e414-80d5-4783-baff-26bef72a5ad5",
	'inc_file',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"48122149-100e-4a3f-9f54-0da4bf747c31",
	'');
INSERT INTO PE_PE
	VALUES ("5181e414-80d5-4783-baff-26bef72a5ad5",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("3cae9d92-fa3c-447a-a9d4-35d3cd271301",
	"00000000-0000-0000-0000-000000000000",
	'TagDataTypePrecision',
	'',
	'//============================================================================
// $RCSfile: m.datatype.arc,v $
//
// Description:
// This archetype file contains the implementation functions for marks
// specified in the (user supplied/modified) datatype.clr file.
//
// Notice:
// (C) Copyright 1998-2013 Mentor Graphics Corporation
//     All rights reserved.
//
// This document contains confidential and proprietary information and
// property of Mentor Graphics Corp.  No part of this document may be
// reproduced without the express written permission of Mentor Graphics Corp.
//============================================================================
//
//============================================================================
component_name = param.component_name;
dt_name = param.dt_name;
tagged_name = param.tagged_name;
initial_value = param.initial_value;
component_name = T::r(s:component_name);
select any tm_precision from instances of TM_PRECISION where ( ( selected.Domain == component_name ) and ( selected.DT_name == dt_name ) );
if ( empty tm_precision )
  create object instance tm_precision of TM_PRECISION;
end if;
tm_precision.Domain = component_name;
tm_precision.DT_name = dt_name;
tm_precision.xName = tagged_name;
tm_precision.initial_value = initial_value;
T::print(s:"TagDataTypePrecision:  ${dt_name} in ${component_name} given ${tagged_name} precision with ${initial_value}.");
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("e1a4f16d-ff86-4406-95eb-e599f9e09ab6",
	"3cae9d92-fa3c-447a-a9d4-35d3cd271301",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("58534308-2522-477e-9c08-211f016c3f89",
	"3cae9d92-fa3c-447a-a9d4-35d3cd271301",
	'dt_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"e1a4f16d-ff86-4406-95eb-e599f9e09ab6",
	'');
INSERT INTO S_SPARM
	VALUES ("7306b3e8-f066-4883-bf04-e948c9ba1951",
	"3cae9d92-fa3c-447a-a9d4-35d3cd271301",
	'tagged_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"58534308-2522-477e-9c08-211f016c3f89",
	'');
INSERT INTO S_SPARM
	VALUES ("831f4cff-4454-4a4c-ae02-41a4a7bacd58",
	"3cae9d92-fa3c-447a-a9d4-35d3cd271301",
	'initial_value',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"7306b3e8-f066-4883-bf04-e948c9ba1951",
	'');
INSERT INTO PE_PE
	VALUES ("3cae9d92-fa3c-447a-a9d4-35d3cd271301",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("eacaf388-001d-46fd-a85b-2907c6559748",
	"00000000-0000-0000-0000-000000000000",
	'MapDataTypeAsPointer',
	'',
	'//
//============================================================================
// Map a user defined data type to a pointer.  This allows the system
// to pass arbitrarily shaped data around by simply pointing to it.
//============================================================================
component_name = param.component_name;
dt_name = param.dt_name;
pointer_type = param.pointer_type;
include_file = param.include_file;
component_name = T::r(s:component_name);
select any tm_pointer from instances of TM_POINTER where ( ( selected.Domain == component_name ) and ( selected.DT_name == dt_name ) );
if ( empty tm_pointer )
  create object instance tm_pointer of TM_POINTER;
end if;
tm_pointer.Domain = component_name;
tm_pointer.DT_name = dt_name;
tm_pointer.pointer_type = pointer_type;
tm_pointer.include_file = include_file;
T::print(s:"MapDataTypeAsPointer:  ${dt_name} in ${component_name} given ${pointer_type} mapping (${include_file}).");
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("8e2787a2-3c91-4b57-b1e0-da374fce72fa",
	"eacaf388-001d-46fd-a85b-2907c6559748",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("0305fe58-05e9-48cc-87e7-e0a96dfb319c",
	"eacaf388-001d-46fd-a85b-2907c6559748",
	'dt_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"8e2787a2-3c91-4b57-b1e0-da374fce72fa",
	'');
INSERT INTO S_SPARM
	VALUES ("c0183c71-f06b-4d40-be85-d19e273b3ac6",
	"eacaf388-001d-46fd-a85b-2907c6559748",
	'pointer_type',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"0305fe58-05e9-48cc-87e7-e0a96dfb319c",
	'');
INSERT INTO S_SPARM
	VALUES ("f559f00b-2a8e-4514-a588-593748a59147",
	"eacaf388-001d-46fd-a85b-2907c6559748",
	'include_file',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"c0183c71-f06b-4d40-be85-d19e273b3ac6",
	'');
INSERT INTO PE_PE
	VALUES ("eacaf388-001d-46fd-a85b-2907c6559748",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("e562e7bc-a1d3-40da-85fd-7029d7a13687",
	"00000000-0000-0000-0000-000000000000",
	'TagEnumeratorDiscreteValue',
	'',
	'//
//============================================================================
// Specifying Values for Enumerators
//
// To indicate to the model compiler that a user defined enumeration
// data type enumerator (defined in the BridgePoint Subsystem Partitioning
// Model (SPM) component data editor) shall have a value other than the default,
// use the following invocation:
//
// TagEnumeratorDiscreteValue( "component", "enumeration", "enumerator", "value"
//
// Where the input parameters are:
//   component - Registered component name.  Use "*" to indicate a system wide
//     enumeration data type (to be applied to all components containing
//     the user defined enumeration data type).
//   enumeration - name of the enumeration data type as known in the
//     application analysis
//   enumerator - name of the enumerator as known in the application analysis
//   value - a string containing the value to be assigned to the enumerator
//
// Examples:
//  Domain specific:
//   .invoke TagEnumeratorDiscreteValue( "MO", "tube_wattage", "low", "4" )
//   .invoke TagEnumeratorDiscreteValue( "MO", "tube_wattage", "med", "0x20" )
//  System Wide:
//   .invoke TagEnumeratorDiscreteValue( "*", "tube_wattage", "high", "0x40" )
//
//============================================================================
component_name = param.component_name;
enumeration = param.enumeration;
enumerator = param.enumerator;
value = param.value;
component_name = T::r(s:component_name);
select any tm_enumval from instances of TM_ENUMVAL where ( ( ( selected.Domain == component_name ) and ( selected.enumeration == enumeration ) ) and ( selected.enumerator == enumerator ) );
if ( empty tm_enumval )
  create object instance tm_enumval of TM_ENUMVAL;
end if;
tm_enumval.Domain = component_name;
tm_enumval.enumeration = enumeration;
tm_enumval.enumerator = enumerator;
tm_enumval.value = value;
T::print(s:"TagEnumeratorDiscreteValue:  ${enumeration}::${enumerator} in ${component_name} given discrete value ${value}.");
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("306fab8a-c9a5-4ef4-ac7a-4b01768d9326",
	"e562e7bc-a1d3-40da-85fd-7029d7a13687",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("93a35455-10ab-45c6-95e1-73957310f3f9",
	"e562e7bc-a1d3-40da-85fd-7029d7a13687",
	'enumeration',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"306fab8a-c9a5-4ef4-ac7a-4b01768d9326",
	'');
INSERT INTO S_SPARM
	VALUES ("b091fed3-6f15-4135-9b76-a66a8e0ed8e6",
	"e562e7bc-a1d3-40da-85fd-7029d7a13687",
	'enumerator',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"93a35455-10ab-45c6-95e1-73957310f3f9",
	'');
INSERT INTO S_SPARM
	VALUES ("e7558eb9-78cc-4ab4-beb1-9d992f15d0e1",
	"e562e7bc-a1d3-40da-85fd-7029d7a13687",
	'value',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"b091fed3-6f15-4135-9b76-a66a8e0ed8e6",
	'');
INSERT INTO PE_PE
	VALUES ("e562e7bc-a1d3-40da-85fd-7029d7a13687",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("ca53f9e1-e003-46f7-b2c8-cc5fd97b6aa1",
	"00000000-0000-0000-0000-000000000000",
	'TagUninitializedEnumerationValue',
	'',
	'//
//============================================================================
// Specifying Value for the Default Un-Initialized Enumerator
//
// To indicate to the software architecture that the un-initialized enumerator
// of an enumeration (defined in the BridgePoint Subsystem Partitioning Model
// (SPM) component data editor) shall have a value other than the default,
// use the following invocation:
//
// TagUninitializedEnumerationValue( "component", "enumeration", "value" )
//
// Where the input parameters are:
//   component - Registered component name.  Use "*" to indicate a system wide
//     enumeration data type (to be applied to all components containing
//     the user defined enumeration data type).
//   enumeration - Name of the enumeration data type as known in the
//     application analysis. Use "*" to indicate ALL enumerations.
//   value - A string containing the value to be assigned to the uninitialized
//     enumerator.
//
// Examples:
//  Domain specific:
//   .invoke TagUninitializedEnumerationValue( "MO", "tube_wattage", "4" )
//  All Enumerations in Domain:
//   .invoke TagUninitializedEnumerationValue( "MO", "*", "40" )
//  System Wide:
//   .invoke TagUninitializedEnumerationValue( "*", "tube_wattage", "20" )
//  All Enumerations in All Domains:
//   .invoke TagUninitializedEnumerationValue( "*", "*", "100" )
//
//============================================================================
component_name = param.component_name;
enumeration = param.enumeration;
value = param.value;
component_name = T::r(s:component_name);
select any tm_enuminit from instances of TM_ENUMINIT where ( ( selected.Domain == component_name ) and ( selected.enumeration == enumeration ) );
if ( empty tm_enuminit )
  create object instance tm_enuminit of TM_ENUMINIT;
end if;
tm_enuminit.Domain = component_name;
tm_enuminit.enumeration = enumeration;
tm_enuminit.value = value;
T::print(s:"TagUninitializedEnumerationValue:  ${enumeration} in ${component_name} given default uninitialized value ${value}.");
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("ceea9f6c-d732-4759-b015-cd50bf3803d6",
	"ca53f9e1-e003-46f7-b2c8-cc5fd97b6aa1",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("238a1bb1-1761-4aa5-93f9-797dacb61bbb",
	"ca53f9e1-e003-46f7-b2c8-cc5fd97b6aa1",
	'enumeration',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"ceea9f6c-d732-4759-b015-cd50bf3803d6",
	'');
INSERT INTO S_SPARM
	VALUES ("5e15ce45-5f31-41dd-9ad2-81700fcadaa3",
	"ca53f9e1-e003-46f7-b2c8-cc5fd97b6aa1",
	'value',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"238a1bb1-1761-4aa5-93f9-797dacb61bbb",
	'');
INSERT INTO PE_PE
	VALUES ("ca53f9e1-e003-46f7-b2c8-cc5fd97b6aa1",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("886b0959-b392-48ab-9ed1-eb57440dbd5b",
	"00000000-0000-0000-0000-000000000000",
	'AssignDirectToUDTPackage',
	'',
	'//
//
//============================================================================
// Specifying "Direct" manipulation to "SystemC UDT Pacakage"
//
// to indicate that this UDT package should be generated using its name
// instead of core type
//============================================================================
package_name = param.package_name;
T::print(s:"AssignDirectToUDTPackage is not a supported marking function.");
T::exit(i:1);
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("1bb4b9ae-d897-4533-b66e-41dd985ce8db",
	"886b0959-b392-48ab-9ed1-eb57440dbd5b",
	'package_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("886b0959-b392-48ab-9ed1-eb57440dbd5b",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("8cfe76ca-c893-4188-9132-17f4c9836c98",
	"00000000-0000-0000-0000-000000000000",
	'TagFunctionTranslationOff',
	'',
	'//============================================================================
// $RCSfile: m.domain.arc,v $
//
// Description:
// This archetype file contains the implementation functions for colors
// specified in the (user supplied/modified) domain.mark file.
//
// Notice:
// (C) Copyright 1998-2013 Mentor Graphics Corporation
//     All rights reserved.
//
// This document contains confidential and proprietary information and
// property of Mentor Graphics Corp.  No part of this document may be
// reproduced without the express written permission of Mentor Graphics Corp.
//============================================================================
//
//
//============================================================================
// Disable the translation of function processing semantics.
// The default is for all functions to be translated.
//============================================================================
function_name = param.function_name;
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkFunctionTranslationOff( component_name:te_c.Name, function_name:function_name );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("156564b7-378a-4808-b833-d05eb917e540",
	"8cfe76ca-c893-4188-9132-17f4c9836c98",
	'function_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("8cfe76ca-c893-4188-9132-17f4c9836c98",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("1ea2ab44-e7a6-446b-8288-fee6c1609f5c",
	"00000000-0000-0000-0000-000000000000",
	'MarkFunctionTranslationOff',
	'',
	'component_name = param.component_name;
function_name = param.function_name;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  msg = "";
  if ( "*" == function_name )
    select many te_syncs related by te_c->TE_SYNC[R2084];
    for each te_sync in te_syncs
      te_sync.XlateSemantics = FALSE;
      msg = "Turned off translation of ${te_sync.Name} function semantics.";
    end for;
  else
    select any te_sync related by te_c->TE_SYNC[R2084] where ( selected.Name == function_name );
    if ( not_empty te_sync )
      te_sync.XlateSemantics = FALSE;
      msg = "Turned off translation of ${function_name} function semantics.";
    else
      msg = "ERROR:  Function (${function_name}) not found in component ${te_c.Name}.";
      msg = msg + "\n  => TagFunctionTranslationOff( ${function_name} )";
    end if;
  end if;
  T::print(s:"${msg}");
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("70ffa213-6d71-4512-a721-6b925610f1c7",
	"1ea2ab44-e7a6-446b-8288-fee6c1609f5c",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("27b899e9-a95d-4e17-a637-a4d0cf03f8f9",
	"1ea2ab44-e7a6-446b-8288-fee6c1609f5c",
	'function_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"70ffa213-6d71-4512-a721-6b925610f1c7",
	'');
INSERT INTO PE_PE
	VALUES ("1ea2ab44-e7a6-446b-8288-fee6c1609f5c",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("05446d86-f726-4c69-92b9-057a50888214",
	"00000000-0000-0000-0000-000000000000",
	'TagInitializationFunction',
	'',
	'//
//============================================================================
// Mark a function as being executed during the initialization sequence.
// All functions marked with this interface will be run during bring-up.
// Functions bearing input arguments are not allowed to be tagged as
// initialization functions.
//============================================================================
function_name = param.function_name;
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkInitializationFunction( component_name:te_c.Name, function_name:function_name );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("0e7fcbb5-46a2-4620-b447-0cbd419854bc",
	"05446d86-f726-4c69-92b9-057a50888214",
	'function_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("05446d86-f726-4c69-92b9-057a50888214",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("a60fcd35-5c01-4e5b-9cdd-6327136e8aa7",
	"00000000-0000-0000-0000-000000000000",
	'MarkInitializationFunction',
	'',
	'component_name = param.component_name;
function_name = param.function_name;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  msg = "";
  select any te_sync related by te_c->TE_SYNC[R2084] where ( selected.Name == function_name );
  if ( not_empty te_sync )
    select any te_parm related by te_sync->TE_ABA[R2010]->TE_PARM[R2062];
    if ( empty te_parm )
      te_sync.IsInitFunction = true;
      msg = "Function ${te_sync.Name} marked as initialization function.";
    else
      msg = "ERROR:  Initialization function (${function_name}) in component ${te_c.Name}";
      msg = msg + "\ntakes arguments.  This is not allowed at initialization.";
      msg = msg + "\n  => TagInitializationFunction( ${function_name} )";
    end if;
  else
    msg = "ERROR:  Initialization function (${function_name}) not found in component ${te_c.Name}.";
    msg = msg + "\n  => TagInitializationFunction( ${function_name} )";
  end if;
  T::print(s:"${msg}");
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("b0587769-82b6-4f0d-9bbd-32121af8e5ef",
	"a60fcd35-5c01-4e5b-9cdd-6327136e8aa7",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("ba72342b-0eb4-49f7-8537-da65b2893380",
	"a60fcd35-5c01-4e5b-9cdd-6327136e8aa7",
	'function_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"b0587769-82b6-4f0d-9bbd-32121af8e5ef",
	'');
INSERT INTO PE_PE
	VALUES ("a60fcd35-5c01-4e5b-9cdd-6327136e8aa7",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("c9e1c6b4-95ba-4c55-8cb9-39e26a542495",
	"00000000-0000-0000-0000-000000000000",
	'TagExcludeObjectFromCodeGen',
	'',
	'//
//============================================================================
obj_key_letters = param.obj_key_letters;
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkExcludeObjectFromCodeGen( component_name:te_c.Name, obj_key_letters:obj_key_letters );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("01438404-c8ea-41d7-8fa4-ed2d91932582",
	"c9e1c6b4-95ba-4c55-8cb9-39e26a542495",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("c9e1c6b4-95ba-4c55-8cb9-39e26a542495",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("72fc56b6-2434-4402-b80d-5025a9718f6e",
	"00000000-0000-0000-0000-000000000000",
	'MarkExcludeObjectFromCodeGen',
	'',
	'component_name = param.component_name;
obj_key_letters = param.obj_key_letters;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  msg = "";
  select any te_class related by te_c->TE_CLASS[R2064] where ( selected.Key_Lett == obj_key_letters );
  if ( not_empty te_class )
    te_class.ExcludeFromGen = true;
    msg = "Object ${te_class.Name} (${te_class.Key_Lett}) excluded from code generation.";
  else
    msg = "ERROR:  Class (${obj_key_letters}) not found in component ${te_c.Name}";
    msg = msg + "\n => TagExcludeObjectFromCodeGen( ${obj_key_letters} )";
  end if;
  T::print(s:"${msg}");
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("5c516cdd-fe84-4abb-b684-b54abaa44100",
	"72fc56b6-2434-4402-b80d-5025a9718f6e",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("17c55ef4-16c4-4d35-81cd-f78a30ab5146",
	"72fc56b6-2434-4402-b80d-5025a9718f6e",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"5c516cdd-fe84-4abb-b684-b54abaa44100",
	'');
INSERT INTO PE_PE
	VALUES ("72fc56b6-2434-4402-b80d-5025a9718f6e",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("22b6babe-1efb-46ff-a32f-65c5cef36fef",
	"00000000-0000-0000-0000-000000000000",
	'TagExcludeSubsystemFromCodeGen',
	'',
	'//
//============================================================================
subsystem_name = param.subsystem_name;
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkExcludeSubsystemFromCodeGen( component_name:te_c.Name, subsystem_name:subsystem_name );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("1d12f39a-d402-43ad-b4af-68d92cd81f33",
	"22b6babe-1efb-46ff-a32f-65c5cef36fef",
	'subsystem_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("22b6babe-1efb-46ff-a32f-65c5cef36fef",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("784be06e-e7c1-4cad-9be1-62fbde0cdc90",
	"00000000-0000-0000-0000-000000000000",
	'MarkExcludeSubsystemFromCodeGen',
	'',
	'component_name = param.component_name;
subsystem_name = param.subsystem_name;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  msg = "";
  select many ep_pkgs related by te_c->C_C[R2054]->PE_PE[R8003]->EP_PKG[R8001]->PE_PE[R8000]->EP_PKG[R8001] where ( selected.Name == subsystem_name );
  if ( not_empty ep_pkgs )
    select many te_classes related by ep_pkgs->PE_PE[R8000]->O_OBJ[R8001]->TE_CLASS[R2019];
    for each te_class in te_classes
      te_class.ExcludeFromGen = true;
    end for;
    msg = "All classes in subsystem ${subsystem_name} excluded from code generation.";
  else
    msg = "ERROR:  Subsystem ${subsystem_name} not found in component ${te_c.Name}.";
    msg = msg + "\n => TagExcludeSubsystemFromCodeGen( ${subsystem_name} )";
  end if;
  T::print(s:"${msg}");
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("fd4c868d-cd70-4c30-b7ea-6e20c95d376a",
	"784be06e-e7c1-4cad-9be1-62fbde0cdc90",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("efc42a14-3f1a-40de-b4e4-67ad3c337abc",
	"784be06e-e7c1-4cad-9be1-62fbde0cdc90",
	'subsystem_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"fd4c868d-cd70-4c30-b7ea-6e20c95d376a",
	'');
INSERT INTO PE_PE
	VALUES ("784be06e-e7c1-4cad-9be1-62fbde0cdc90",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("1cb5feef-cead-4bb6-9cd7-914dfcd9b901",
	"00000000-0000-0000-0000-000000000000",
	'TagStateTransitionTracingOn',
	'',
	'//
//============================================================================
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkStateTransitionTracingOn( component_name:te_c.Name );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO PE_PE
	VALUES ("1cb5feef-cead-4bb6-9cd7-914dfcd9b901",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("0c203396-a62e-4458-a03f-6a5b3739d929",
	"00000000-0000-0000-0000-000000000000",
	'MarkStateTransitionTracingOn',
	'',
	'component_name = param.component_name;
T::print(s:"Enabling state transition tracing for component(s) ${component_name}.");
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  te_c.StateTrace = true;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("1daf801f-4c6e-4be0-a2a5-16ed8b684e4b",
	"0c203396-a62e-4458-a03f-6a5b3739d929",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("0c203396-a62e-4458-a03f-6a5b3739d929",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("c5f1a257-8091-459e-8266-06740493a58e",
	"00000000-0000-0000-0000-000000000000",
	'TagActionStatementTracingOn',
	'',
	'//
//============================================================================
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkActionStatementTracingOn( component_name:te_c.Name );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO PE_PE
	VALUES ("c5f1a257-8091-459e-8266-06740493a58e",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("588ccabe-f27a-4505-bd2a-6e4dac1b75d0",
	"00000000-0000-0000-0000-000000000000",
	'MarkActionStatementTracingOn',
	'',
	'component_name = param.component_name;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  te_c.StmtTrace = true;
  T::print(s:"Action statement tracing enabled for component ${te_c.Name}.");
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("fdccb319-8f3e-4641-986c-918429029c8e",
	"588ccabe-f27a-4505-bd2a-6e4dac1b75d0",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("588ccabe-f27a-4505-bd2a-6e4dac1b75d0",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("ffac819f-7d22-4ee9-a90f-d33787f9ccdc",
	"00000000-0000-0000-0000-000000000000",
	'MarkMessageTracingOn',
	'',
	'//
//============================================================================
component_name = param.component_name;
port_name = param.port_name;
message_name = param.message_name;
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
select many te_pos related by te_cs->TE_PO[R2005] where ( selected.Name == port_name );
if ( ( "" == port_name ) or ( "*" == port_name ) )
  select many te_pos related by te_cs->TE_PO[R2005];
end if;
select many te_macts related by te_pos->TE_MACT[R2006] where ( selected.MessageName == message_name );
if ( ( "" == message_name ) or ( "*" == message_name ) )
  select many te_macts related by te_pos->TE_MACT[R2006];
end if;
for each te_mact in te_macts
  te_mact.trace = true;
end for;
if ( empty te_macts )
  T::print(s:"Warning:  No messages found to trace for ${component_name}::${port_name}::${message_name}.");
else
  T::print(s:"Message tracing enabled for ${component_name}::${port_name}::${message_name}.");
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("9733e816-bcb6-435e-9af9-bdb0acc686cc",
	"ffac819f-7d22-4ee9-a90f-d33787f9ccdc",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("d5cf980f-5b3d-4a36-b556-c4372ec582d1",
	"ffac819f-7d22-4ee9-a90f-d33787f9ccdc",
	'port_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"9733e816-bcb6-435e-9af9-bdb0acc686cc",
	'');
INSERT INTO S_SPARM
	VALUES ("b9fd98fc-1f4c-4400-8e0a-e6a01aff8cc5",
	"ffac819f-7d22-4ee9-a90f-d33787f9ccdc",
	'message_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"d5cf980f-5b3d-4a36-b556-c4372ec582d1",
	'');
INSERT INTO PE_PE
	VALUES ("ffac819f-7d22-4ee9-a90f-d33787f9ccdc",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("11b31771-2364-4e49-9bb1-643dcfa81c8b",
	"00000000-0000-0000-0000-000000000000",
	'TagEmptyHandleDetectionOn',
	'',
	'//
//============================================================================
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkEmptyHandleDetectionOn( component_name:te_c.Name );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO PE_PE
	VALUES ("11b31771-2364-4e49-9bb1-643dcfa81c8b",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("2526f102-fe0f-4502-ba95-5a791b8953fd",
	"00000000-0000-0000-0000-000000000000",
	'MarkEmptyHandleDetectionOn',
	'',
	'component_name = param.component_name;
T::print(s:"Enabling detection of empty handles for component(s) ${component_name}.");
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  te_c.DetectEmpty = true;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("32a1a71a-9a2e-4fb1-940b-722d090fb44b",
	"2526f102-fe0f-4502-ba95-5a791b8953fd",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("2526f102-fe0f-4502-ba95-5a791b8953fd",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("b6d1a84d-e230-4faa-a6a6-5401d8efdd05",
	"00000000-0000-0000-0000-000000000000",
	'TagFirstPassOptimizationsOff',
	'',
	'//
//============================================================================
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkFirstPassOptimizationsOff( component_name:te_c.Name );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO PE_PE
	VALUES ("b6d1a84d-e230-4faa-a6a6-5401d8efdd05",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("b5d6a310-1a5b-4fad-852f-903f17ab8d33",
	"00000000-0000-0000-0000-000000000000",
	'MarkFirstPassOptimizationsOff',
	'',
	'component_name = param.component_name;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  te_c.OptDisabled = true;
  T::print(s:"Code optimizations DISABLED for component ${te_c.Name}");
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("615cb21e-ee7b-49b4-bc9e-8ff97e42215d",
	"b5d6a310-1a5b-4fad-852f-903f17ab8d33",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("b5d6a310-1a5b-4fad-852f-903f17ab8d33",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("2cb4396d-9c59-4c99-91a7-76b25eb3ce48",
	"00000000-0000-0000-0000-000000000000",
	'TagStateActionCommentBlocksEnabled',
	'',
	'//
//============================================================================
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkStateActionCommentBlocksEnabled( component_name:te_c.Name );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO PE_PE
	VALUES ("2cb4396d-9c59-4c99-91a7-76b25eb3ce48",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("7ee0f21a-e84a-461e-b343-9701ac7ea99b",
	"00000000-0000-0000-0000-000000000000",
	'MarkStateActionCommentBlocksEnabled',
	'',
	'component_name = param.component_name;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  te_c.RawComments = true;
  T::print(s:"State action sematics will be included as comments for component ${te_c.Name}.");
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("495083d6-3728-4de4-88a8-3c5af7632e29",
	"7ee0f21a-e84a-461e-b343-9701ac7ea99b",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("7ee0f21a-e84a-461e-b343-9701ac7ea99b",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("11d729ab-dd0e-4e33-b11a-e42fccd784f8",
	"00000000-0000-0000-0000-000000000000",
	'TagStateActionStatementCommentsDisabled',
	'',
	'//
//============================================================================
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkStateActionStatementCommentsDisabled( component_name:te_c.Name );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO PE_PE
	VALUES ("11d729ab-dd0e-4e33-b11a-e42fccd784f8",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("77c5b869-df3c-4e08-9256-b9ccc91c21f7",
	"00000000-0000-0000-0000-000000000000",
	'MarkStateActionStatementCommentsDisabled',
	'',
	'component_name = param.component_name;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  te_c.CodeComments = false;
  T::print(s:"State action statement level comments disabled for component ${te_c.Name}");
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("a2b6e064-18e3-436d-a02c-2db5e6c1805b",
	"77c5b869-df3c-4e08-9256-b9ccc91c21f7",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("77c5b869-df3c-4e08-9256-b9ccc91c21f7",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("86b40777-be2b-4138-92c3-ddc428d14e42",
	"00000000-0000-0000-0000-000000000000",
	'TagStateActionVariableNamesEnabled',
	'',
	'//
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO PE_PE
	VALUES ("86b40777-be2b-4138-92c3-ddc428d14e42",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("e5511c67-c84a-4793-a36e-53c9b7b3a956",
	"00000000-0000-0000-0000-000000000000",
	'TagVerboseReflexivePhrasesEnabled',
	'',
	'//
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO PE_PE
	VALUES ("e5511c67-c84a-4793-a36e-53c9b7b3a956",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("f92ed9d9-b8df-4ee7-9895-6da59b5a2b2b",
	"00000000-0000-0000-0000-000000000000",
	'MarkPortWiring',
	'',
	'//
//
// Mark a port as having a component attached even though the component
// is not present in the model.
//
// .invoke MarkPortWiring( <home_component>, <home_port>, <foreign_component>, <foreign_port> )
// where:
//  <home_component> is the local component name.
//  <home_port> is the local port name.
//  <foreign_component> is the name of the component on the other side of
//                      the interface.
//  <foreign_port> is the name of the port on the other side of the interface.
//
//
home_component = param.home_component;
home_port = param.home_port;
foreign_component = param.foreign_component;
foreign_port = param.foreign_port;
select many te_cs from instances of TE_C where ( ( selected.Name == home_component ) and ( selected.included_in_build ) );
select many te_pos related by te_cs->TE_PO[R2005] where ( selected.Name == home_port );
::MarkPortWiringForPort( te_pos:te_pos, component:foreign_component, port:foreign_port );
select many te_cs from instances of TE_C where ( ( selected.Name == foreign_component ) and ( selected.included_in_build ) );
select many te_pos related by te_cs->TE_PO[R2005] where ( selected.Name == foreign_port );
::MarkPortWiringForPort( te_pos:te_pos, component:home_component, port:home_port );
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("37aaf670-baa3-43f4-8ec9-52b04467281d",
	"f92ed9d9-b8df-4ee7-9895-6da59b5a2b2b",
	'home_component',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("50013837-5442-4b7b-8c89-775c252f6e06",
	"f92ed9d9-b8df-4ee7-9895-6da59b5a2b2b",
	'home_port',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"37aaf670-baa3-43f4-8ec9-52b04467281d",
	'');
INSERT INTO S_SPARM
	VALUES ("cb94b898-1710-43b7-8db0-9ebf5bef4c8c",
	"f92ed9d9-b8df-4ee7-9895-6da59b5a2b2b",
	'foreign_component',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"50013837-5442-4b7b-8c89-775c252f6e06",
	'');
INSERT INTO S_SPARM
	VALUES ("a6a64868-7df1-47b6-8dce-404603375df4",
	"f92ed9d9-b8df-4ee7-9895-6da59b5a2b2b",
	'foreign_port',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"cb94b898-1710-43b7-8db0-9ebf5bef4c8c",
	'');
INSERT INTO PE_PE
	VALUES ("f92ed9d9-b8df-4ee7-9895-6da59b5a2b2b",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("b0cb2b66-c951-47ee-83e5-8d1a4438a76f",
	"00000000-0000-0000-0000-000000000000",
	'MarkPortWiringForPort',
	'',
	'//
te_pos = param.te_pos;
component = param.component;
port = param.port;
for each te_po in te_pos
  select many te_iirs related by te_po->TE_IIR[R2080];
  for each te_iir in te_iirs
    if ( te_po.Provision )
      select many sibling_te_iirs related by te_iir->TE_IIR[R2081.''provides or is delegated''];
      if ( empty sibling_te_iirs )
        create object instance sibling_te_iir of TE_IIR;
        sibling_te_iir.component_name = component;
        sibling_te_iir.port_name = port;
        sibling_te_iir.interface_name = te_po.InterfaceName;
        sibling_te_iir.polymorphic = false;
                                relate sibling_te_iir to te_iir across R2081.''provides or is delegated'';
      end if;
    else
      select one sibling_te_iir related by te_iir->TE_IIR[R2081.''requires or delegates''];
      if ( empty sibling_te_iir )
        create object instance sibling_te_iir of TE_IIR;
        sibling_te_iir.component_name = component;
        sibling_te_iir.port_name = port;
        sibling_te_iir.interface_name = te_po.InterfaceName;
        sibling_te_iir.polymorphic = false;
                                relate sibling_te_iir to te_iir across R2081.''provides or is delegated'';
      end if;
    end if;
  end for;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("6e517e3d-c707-431f-9297-bf4b37a0e398",
	"b0cb2b66-c951-47ee-83e5-8d1a4438a76f",
	'te_pos',
	"dc54b007-00da-455e-b263-9baac45247c0",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("dc54b007-00da-455e-b263-9baac45247c0",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref_set<Extended Port>',
	'',
	'',
	'../Translation Extensions/Translation Extensions.xtuml');
INSERT INTO S_SPARM
	VALUES ("273b714c-fa54-469f-a7d9-4d17e7428d77",
	"b0cb2b66-c951-47ee-83e5-8d1a4438a76f",
	'component',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"6e517e3d-c707-431f-9297-bf4b37a0e398",
	'');
INSERT INTO S_SPARM
	VALUES ("8357b73f-64fe-4419-b0e0-61db6bff55bb",
	"b0cb2b66-c951-47ee-83e5-8d1a4438a76f",
	'port',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"273b714c-fa54-469f-a7d9-4d17e7428d77",
	'');
INSERT INTO PE_PE
	VALUES ("b0cb2b66-c951-47ee-83e5-8d1a4438a76f",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("d39af19a-ea21-441c-9218-c9e8f2843746",
	"00000000-0000-0000-0000-000000000000",
	'TagDispatchFlavor',
	'',
	'//============================================================================
// $RCSfile: m.event.arc,v $
//
// Description:
// This archetype file contains the implementation functions for colors
// specified in the (user supplied/modified) event.clr file.
//
// Notice:
// (C) Copyright 1998-2013 Mentor Graphics Corporation
//     All rights reserved.
// Enhancements provided by TOYO Corporation.
//
// This document contains confidential and proprietary information and
// property of Mentor Graphics Corp.  No part of this document may be
// reproduced without the express written permission of Mentor Graphics Corp.
//============================================================================
//
//
//============================================================================
// Choose the type of dispatcher to run.  Zero is the default.
// Selecting 2 will provide a single system level event dispatcher.
//============================================================================
flavor = param.flavor;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("a819b156-914f-44bf-bc93-64892fbca2e5",
	"d39af19a-ea21-441c-9218-c9e8f2843746",
	'flavor',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("d39af19a-ea21-441c-9218-c9e8f2843746",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("0d5bf955-5acd-41d5-8663-4cc22fee2d3e",
	"00000000-0000-0000-0000-000000000000",
	'TagPriorityEvent',
	'',
	'//
//============================================================================
// Color event to higher than default priority.
//============================================================================
evt_label = param.evt_label;
priority_value = param.priority_value;
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkPriorityEvent( component_name:te_c.Name, evt_label:evt_label, priority_value:priority_value );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("7dd93361-52e0-4afb-a10c-dbf36d511b0d",
	"0d5bf955-5acd-41d5-8663-4cc22fee2d3e",
	'evt_label',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("777aef8a-6096-4737-b8ff-b6379d169334",
	"0d5bf955-5acd-41d5-8663-4cc22fee2d3e",
	'priority_value',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"7dd93361-52e0-4afb-a10c-dbf36d511b0d",
	'');
INSERT INTO PE_PE
	VALUES ("0d5bf955-5acd-41d5-8663-4cc22fee2d3e",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("feba6089-d544-4eee-8619-79f55a77535c",
	"00000000-0000-0000-0000-000000000000",
	'MarkPriorityEvent',
	'',
	'component_name = param.component_name;
evt_label = param.evt_label;
priority_value = param.priority_value;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  msg = "";
  //
  // Check for legal range on input priority.
  //
  if ( ( priority_value > 255 ) or ( priority_value < 0 ) )
    msg = "ERROR:  Priority ($t{priority_value}) out of legal range (0-255).";
  end if;
  //
  // Store the priority of the event in an attribute.
  //
  select any sm_evt related by te_c->TE_CLASS[R2064]->O_OBJ[R2019]->SM_ISM[R518]->SM_SM[R517]->SM_EVT[R502] where ( selected.Drv_Lbl == evt_label );
  if ( empty sm_evt )
    select any sm_evt related by te_c->TE_CLASS[R2064]->O_OBJ[R2019]->SM_ASM[R519]->SM_SM[R517]->SM_EVT[R502] where ( selected.Drv_Lbl == evt_label );
  end if;
  if ( not_empty sm_evt )
    //
    // We are not allowing prioritized polymorphic events... yet.
    //
    select one sm_pevt related by sm_evt->SM_PEVT[R525];
    if ( not_empty sm_pevt )
      msg = "ERROR:  Prioritized Polymorphic Event (${evt_label}) component ${te_c.Name}";
      msg = msg + "\nPriority Polys are not supported.";
    end if;
    select one te_evt related by sm_evt->TE_EVT[R2036];
    te_evt.Priority = priority_value;
    msg = "Event ${sm_evt.Drv_Lbl}:${sm_evt.Mning} marked as priority event.";
  else
    msg = "ERROR:  Event (${evt_label}) not found in component ${te_c.Name}";
  end if;
  msg = msg + " => TagPriorityEvent( ${evt_label}, $t{priority_value} )";
  T::print(s:"${msg}");
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("7ae7db44-420c-4633-9d7c-ace25ed036b7",
	"feba6089-d544-4eee-8619-79f55a77535c",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("bb64195d-294d-4ea6-b905-83872ecc2324",
	"feba6089-d544-4eee-8619-79f55a77535c",
	'evt_label',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"7ae7db44-420c-4633-9d7c-ace25ed036b7",
	'');
INSERT INTO S_SPARM
	VALUES ("3e5d654e-d353-46e2-aee0-d2c414c6da87",
	"feba6089-d544-4eee-8619-79f55a77535c",
	'priority_value',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"bb64195d-294d-4ea6-b905-83872ecc2324",
	'');
INSERT INTO PE_PE
	VALUES ("feba6089-d544-4eee-8619-79f55a77535c",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("b89e3856-b350-4644-8513-ffddfc84f92c",
	"00000000-0000-0000-0000-000000000000",
	'EnableTasking',
	'',
	'//============================================================================
// $RCSfile: m.system.arc,v $
//
// Description:
// System level coloring functions are found here.
// Notice that the colors that would normally update TE_SYS are active.
//
// Notice:
// (C) Copyright 1998-2013 Mentor Graphics Corporation
//     All rights reserved.
// Enhancements provided by TOYO Corporation.
//
// This document contains confidential and proprietary information and
// property of Mentor Graphics Corp.  No part of this document may be
// reproduced without the express written permission of Mentor Graphics Corp.
//============================================================================
//
//
//============================================================================
// Enable tasking/threading.
//============================================================================
flavor = param.flavor;
serialize = param.serialize;
number_of_threads = param.number_of_threads;
//
T::print(s:"EnableTasking( ${flavor}, ${serialize}, $t{number_of_threads} )");
select any tm_thread from instances of TM_THREAD;
if ( empty tm_thread )
  create object instance tm_thread of TM_THREAD;
  tm_thread.extra_initialization = "";
end if;
tm_thread.number_of_threads = number_of_threads;
if ( T::l(s:serialize) == "serialize" )
  tm_thread.serialize = true;
else
  tm_thread.serialize = false;
end if;
if ( ( ( ( "Nucleus" == flavor ) or ( "POSIX" == flavor ) ) or ( ( "OSX" == flavor ) or ( "Windows" == flavor ) ) ) or ( ( "AUTOSAR" == flavor ) or ( "SystemC" == flavor ) ) )
  tm_thread.flavor = flavor;
  if ( "SystemC" == flavor )
    // SystemC uses a single thread inside each component.
    // So, no need for an array of threads.
    tm_thread.number_of_threads = 1;
    tm_thread.enabled = false;
  else
    tm_thread.enabled = true;
  end if;
else
  T::print(s:"ERROR:  system.mark:EnableTasking has incorrect tasking/threading type:${flavor}.\n");
  T::exit(i:100);
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("beaf913f-eed1-4c43-bf29-627b2725d282",
	"b89e3856-b350-4644-8513-ffddfc84f92c",
	'flavor',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("d7b2a0e7-7720-4916-b125-7ba8f3f9ed12",
	"b89e3856-b350-4644-8513-ffddfc84f92c",
	'serialize',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"beaf913f-eed1-4c43-bf29-627b2725d282",
	'');
INSERT INTO S_SPARM
	VALUES ("94840438-b0b7-4f0d-9b1b-ebb81838eed8",
	"b89e3856-b350-4644-8513-ffddfc84f92c",
	'number_of_threads',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"d7b2a0e7-7720-4916-b125-7ba8f3f9ed12",
	'');
INSERT INTO PE_PE
	VALUES ("b89e3856-b350-4644-8513-ffddfc84f92c",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("2f98847a-0288-4f15-a779-7966cc89cc1a",
	"00000000-0000-0000-0000-000000000000",
	'SetTaskPriority',
	'',
	'//
//============================================================================
// Establish task priority.
//============================================================================
task_number = param.task_number;
priority = param.priority;
T::print(s:"SetTaskPriority( $t{task_number}, ${priority} )");
select any tm_thread from instances of TM_THREAD;
if ( empty tm_thread )
  create object instance tm_thread of TM_THREAD;
end if;
tm_thread.extra_initialization = tm_thread.extra_initialization + "  xtUML_task_priorities[ $t{task_number} ] = ${priority};\n";
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("548399a2-f058-4083-b592-2acba4ace405",
	"2f98847a-0288-4f15-a779-7966cc89cc1a",
	'task_number',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("f5f6b42a-7a3e-4433-b705-9978e1c09289",
	"2f98847a-0288-4f15-a779-7966cc89cc1a",
	'priority',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"548399a2-f058-4083-b592-2acba4ace405",
	'');
INSERT INTO PE_PE
	VALUES ("2f98847a-0288-4f15-a779-7966cc89cc1a",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("baa3d6f1-3e75-4ae2-940e-1f3f59874b68",
	"00000000-0000-0000-0000-000000000000",
	'TagMaximumStringLength',
	'',
	'//
//============================================================================
max_len = param.max_len;
r = ::TM_SYSTAG_select();
tm_systag = r;
tm_systag.MaxStringLen = max_len;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("270310f9-53fe-4f9e-bb0c-93c1d07891e8",
	"baa3d6f1-3e75-4ae2-940e-1f3f59874b68",
	'max_len',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("baa3d6f1-3e75-4ae2-940e-1f3f59874b68",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("f3740465-3e7e-4f3b-901b-e2356ce3ad8f",
	"00000000-0000-0000-0000-000000000000",
	'TagMaximumRelationshipExtentSize',
	'',
	'//
//============================================================================
user_specified_size = param.user_specified_size;
r = ::TM_SYSTAG_select();
tm_systag = r;
tm_systag.MaxRelExtent = user_specified_size;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("a20b98e8-1779-4b44-9299-580a0d8f404f",
	"f3740465-3e7e-4f3b-901b-e2356ce3ad8f",
	'user_specified_size',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("f3740465-3e7e-4f3b-901b-e2356ce3ad8f",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("abd45a22-fe65-432f-9e75-eed58636c8bb",
	"00000000-0000-0000-0000-000000000000",
	'TagMaximumSelectionExtentSize',
	'',
	'//
//============================================================================
user_specified_size = param.user_specified_size;
r = ::TM_SYSTAG_select();
tm_systag = r;
tm_systag.MaxSelectExtent = user_specified_size;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("3169d60d-26d1-493f-ab50-fbb1a181d32f",
	"abd45a22-fe65-432f-9e75-eed58636c8bb",
	'user_specified_size',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("abd45a22-fe65-432f-9e75-eed58636c8bb",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("a5a0d0cc-8ba1-4977-a557-13bd679df2bf",
	"00000000-0000-0000-0000-000000000000",
	'TagMaximumSelfDirectedEvents',
	'',
	'//
//============================================================================
user_specified_size = param.user_specified_size;
r = ::TM_SYSTAG_select();
tm_systag = r;
tm_systag.MaxSelfEvents = user_specified_size;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("6937083a-51f7-4067-aa83-e789ee255da1",
	"a5a0d0cc-8ba1-4977-a557-13bd679df2bf",
	'user_specified_size',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("a5a0d0cc-8ba1-4977-a557-13bd679df2bf",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("ac87774c-d707-4ed5-857d-7bf910d67743",
	"00000000-0000-0000-0000-000000000000",
	'TagMaximumNonSelfDirectedEvents',
	'',
	'//
//============================================================================
user_specified_size = param.user_specified_size;
r = ::TM_SYSTAG_select();
tm_systag = r;
tm_systag.MaxNonSelfEvents = user_specified_size;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("64621cd5-0cf3-441c-a558-494fb1d08341",
	"ac87774c-d707-4ed5-857d-7bf910d67743",
	'user_specified_size',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("ac87774c-d707-4ed5-857d-7bf910d67743",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("4675f571-1208-4ea8-b9b9-0408651dbe32",
	"00000000-0000-0000-0000-000000000000",
	'TagMaximumPendingOoaTimers',
	'',
	'//
//============================================================================
user_specified_size = param.user_specified_size;
r = ::TM_SYSTAG_select();
tm_systag = r;
tm_systag.MaxTimers = user_specified_size;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("988d7785-2d2d-43f0-ba37-69e64be236a4",
	"4675f571-1208-4ea8-b9b9-0408651dbe32",
	'user_specified_size',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("4675f571-1208-4ea8-b9b9-0408651dbe32",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("14570c02-49ef-490c-94dc-40f66e8efa15",
	"00000000-0000-0000-0000-000000000000",
	'TagMaximumInterleavedBridges',
	'',
	'//
//============================================================================
user_specified_size = param.user_specified_size;
r = ::TM_SYSTAG_select();
tm_systag = r;
tm_systag.MaxInterleavedBridges = user_specified_size;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("318972e5-ceac-47ea-9993-1bf43dfecde1",
	"14570c02-49ef-490c-94dc-40f66e8efa15",
	'user_specified_size',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("14570c02-49ef-490c-94dc-40f66e8efa15",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("bd22982c-9069-4bfd-950d-2fee130b0443",
	"00000000-0000-0000-0000-000000000000",
	'TagInterleavedBridgeDataSize',
	'',
	'//
//============================================================================
user_specified_size = param.user_specified_size;
r = ::TM_SYSTAG_select();
tm_systag = r;
tm_systag.MaxInterleavedBridgeDataSize = user_specified_size;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("878020e5-487f-46da-b84e-00b4f6e81f26",
	"bd22982c-9069-4bfd-950d-2fee130b0443",
	'user_specified_size',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("bd22982c-9069-4bfd-950d-2fee130b0443",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("a32ef7ac-1a14-429a-901d-0f44223f777c",
	"00000000-0000-0000-0000-000000000000",
	'TagCollectionsFlavor',
	'',
	'//
//============================================================================
// Use doubly linked lists for collections.  This speeds up deletes.
//============================================================================
collections_flavor = param.collections_flavor;
r = ::TM_SYSTAG_select();
tm_systag = r;
tm_systag.CollectionsFlavor = collections_flavor;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("90ac5837-93f0-4a8f-ad34-09eebb570596",
	"a32ef7ac-1a14-429a-901d-0f44223f777c",
	'collections_flavor',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("a32ef7ac-1a14-429a-901d-0f44223f777c",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("33840f33-2915-4154-aae7-21bac1b8c646",
	"00000000-0000-0000-0000-000000000000",
	'MarkPersistenceCacheDepth',
	'',
	'//
//============================================================================
// Mark Depth of Persistence Cache Queue
//
// This color is used to specify the maximum number of instances and
// links that can be queued waiting to be flushed to non-volatile
// storage (NVS).  As instances and links become "dirty" they get
// queued to NVS.  When Persist::Commit is called this queue is flushed.
//
// MarkPersistenceCacheDepth( instance_depth, link_depth )
//
// Where the input parameter(s) are:
//   instance_depth = the integer depth of the linked list of instances
//   link_depth = the integer depth of the linked list of persistent links
//============================================================================
instance_depth = param.instance_depth;
link_depth = param.link_depth;
r = ::TM_SYSTAG_select();
tm_systag = r;
tm_systag.PersistInstanceCacheDepth = instance_depth;
tm_systag.PersistLinkCacheDepth = link_depth;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("a8802c7d-5b26-46b2-97b3-912a7905f122",
	"33840f33-2915-4154-aae7-21bac1b8c646",
	'instance_depth',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("a48804b6-87e1-4e72-8dfc-45e5c1f787af",
	"33840f33-2915-4154-aae7-21bac1b8c646",
	'link_depth',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"a8802c7d-5b26-46b2-97b3-912a7905f122",
	'');
INSERT INTO PE_PE
	VALUES ("33840f33-2915-4154-aae7-21bac1b8c646",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("8bfbb0a6-c585-4d50-8c6f-c2002dbd5cfc",
	"00000000-0000-0000-0000-000000000000",
	'TagDynamicMemoryAllocationOn',
	'',
	'//
//============================================================================
units_to_allocate = param.units_to_allocate;
r = ::TM_SYSTAG_select();
tm_systag = r;
tm_systag.UnitsToDynamicallyAllocate = units_to_allocate;
if ( tm_systag.UnitsToDynamicallyAllocate < 1 )
  tm_systag.UnitsToDynamicallyAllocate = 1;
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("a6f145b0-72bf-4200-b2e0-5fa21ab2e8db",
	"8bfbb0a6-c585-4d50-8c6f-c2002dbd5cfc",
	'units_to_allocate',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("8bfbb0a6-c585-4d50-8c6f-c2002dbd5cfc",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("1d6b59db-3d14-4b66-93bc-7e99040ed8ab",
	"00000000-0000-0000-0000-000000000000",
	'TagInstanceLoading',
	'',
	'//
//============================================================================
r = ::TM_SYSTAG_select();
tm_systag = r;
tm_systag.InstanceLoading = true;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO PE_PE
	VALUES ("1d6b59db-3d14-4b66-93bc-7e99040ed8ab",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("6108f8e1-3bda-4241-9dfa-bab855a19401",
	"00000000-0000-0000-0000-000000000000",
	'VFBEnable',
	'',
	'//
//============================================================================
// Enable Virtual Function Bus (VFB) for AUTOSAR.
//============================================================================
r = ::TM_SYSTAG_select();
tm_systag = r;
tm_systag.VFB = true;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO PE_PE
	VALUES ("6108f8e1-3bda-4241-9dfa-bab855a19401",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("e817bb77-b316-4d1a-b7ee-0ef18af190c1",
	"00000000-0000-0000-0000-000000000000",
	'TM_SYSTAG_select',
	'',
	'//
select any tm_systag from instances of TM_SYSTAG;
if ( empty tm_systag )
  create object instance tm_systag of TM_SYSTAG;
  tm_systag.MaxStringLen = 32;
  tm_systag.PersistInstanceCacheDepth = 128;
  tm_systag.PersistLinkCacheDepth = 128;
  tm_systag.SystemCPortsType = "sc_interface";
end if;
return tm_systag;
',
	"67a6ef0a-7a73-4370-9d87-d743c0801099",
	3,
	'');
INSERT INTO PE_PE
	VALUES ("e817bb77-b316-4d1a-b7ee-0ef18af190c1",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_DT_PROXY
	VALUES ("67a6ef0a-7a73-4370-9d87-d743c0801099",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<System Tags>',
	'',
	'',
	'../Translation Marking/Translation Marking.xtuml');
INSERT INTO S_SYNC
	VALUES ("bbbc10f9-b448-49d5-bbb4-86607bc5b7c1",
	"00000000-0000-0000-0000-000000000000",
	'MarkSystemConfigurationPackage',
	'',
	'//
//============================================================================
// Mark a package as containing the system configuration.  Code will be
// generated for components contained in this package (and referred to
// from this package).
//============================================================================
package_name = param.package_name;
select any tm_build from instances of TM_BUILD;
if ( empty tm_build )
  create object instance tm_build of TM_BUILD;
else
  T::print(s:"Warning:  Re-marking system configuration.  Last configuration marked will be built.");
end if;
tm_build.package_to_build = package_name;
tm_build.package_obj_name = package_name + "_sys";
tm_build.package_inst_name = package_name + "_top";
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("7559dd08-cee3-471a-ae28-5ee1757a8314",
	"bbbc10f9-b448-49d5-bbb4-86607bc5b7c1",
	'package_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("bbbc10f9-b448-49d5-bbb4-86607bc5b7c1",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("b82cf66b-ce03-4823-b27a-21e84cb0eba6",
	"00000000-0000-0000-0000-000000000000",
	'MarkSystemCPortType',
	'',
	'//
//============================================================================
// Enable Channel binding instead of Signal Binding.
//============================================================================
port_type = param.port_type;
r = ::TM_SYSTAG_select();
tm_systag = r;
if ( ( ( port_type == "TLM" ) or ( port_type == "BitLevelSignals" ) ) or ( port_type == "sc_interface" ) )
  tm_systag.SystemCPortsType = port_type;
else
  T::print(s:"Warning:  Unrecognized SystemC Port Type(${port_type}). Please choose either TLM, BitLevelSignals or sc_interface. Default configuration will be used.");
  tm_systag.SystemCPortsType = "sc_interface";
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("4b5c1682-4a3e-42a3-9301-a6e5d080f871",
	"b82cf66b-ce03-4823-b27a-21e84cb0eba6",
	'port_type',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("b82cf66b-ce03-4823-b27a-21e84cb0eba6",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("948e9c1e-eae1-4931-81e9-c2743d9bce4a",
	"00000000-0000-0000-0000-000000000000",
	'MarkAllPortsPolymorphic',
	'',
	'//
//============================================================================
// Force all ports to be polymorphic (where a component implements the same 
// interface going in the same direction more than once). 
//============================================================================
r = ::TM_SYSTAG_select();
tm_systag = r;
tm_systag.AllPortsPoly = true;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO PE_PE
	VALUES ("948e9c1e-eae1-4931-81e9-c2743d9bce4a",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("c7b9712f-0280-4523-941e-966c087f9446",
	"00000000-0000-0000-0000-000000000000",
	'mark_all',
	'',
	'//
pass = param.pass;
f = param.f;
p1 = param.p1;
p2 = param.p2;
p3 = param.p3;
p4 = param.p4;
p5 = param.p5;
if ( "1" == pass )
  // bridge
  if ( "WireSynchServiceOoaBridge" == f )
    // WireSynchServiceOoaBridge("initiant","ee_key_letters","recipient")
    ::WireSynchServiceOoaBridge( initiant:p1, ee_key_letters:p2, recipient:p3 );
  elif ( "WireRealizeExternalEntity" == f )
    // WireRealizeExternalEntity("a","b","c","d","e")
    ::WireRealizeExternalEntity( a:p1, b:p2, c:p3, d:p4, e:p5 );
  elif ( "WireRealizedExternalEntity" == f )
    // WireRealizedExternalEntity("a","b","c","d","e")
    ::WireRealizedExternalEntity( a:p1, b:p2, c:p3, d:p4, e:p5 );
  elif ( "TagSyncServiceSafeForInterrupts" == f )
    // TagSyncServiceSafeForInterrupts("component_name","function_name")
    ::TagSyncServiceSafeForInterrupts( component_name:p1, function_name:p2 );
    // datatype
  elif ( "TagDataTypePrecision" == f )
    // TagDataTypePrecision("component_name","dt_name","tagged_name","initial_value")
    ::TagDataTypePrecision( component_name:p1, dt_name:p2, tagged_name:p3, initial_value:p4 );
  elif ( "MapDataTypeAsPointer" == f )
    // MapDataTypeAsPointer("component_name","dt_name","pointer_type","include_file")
    ::MapDataTypeAsPointer( component_name:p1, dt_name:p2, pointer_type:p3, include_file:p4 );
  elif ( "TagEnumeratorDiscreteValue" == f )
    // TagEnumeratorDiscreteValue("component_name","enumeration","enumerator","value")
    ::TagEnumeratorDiscreteValue( component_name:p1, enumeration:p2, enumerator:p3, value:p4 );
  elif ( "TagUninitializedEnumerationValue" == f )
    // TagUninitializedEnumerationValue("component_name","enumeration","value")
    ::TagUninitializedEnumerationValue( component_name:p1, enumeration:p2, value:p3 );
  elif ( "AssignDirectToUDTPackage" == f )
    // AssignDirectToUDTPackage("package_name")
    ::AssignDirectToUDTPackage( package_name:p1 );
    // system
  elif ( "EnableTasking" == f )
    // EnableTasking("flavor","serialize","number_of_threads":integer)
    r = ::T_atoi( s:p3 );
    i3 = r;
    ::EnableTasking( flavor:p1, serialize:p2, number_of_threads:i3 );
  elif ( "SetTaskPriority" == f )
    // SetTaskPriority("task_number":integer"priority")
    r = ::T_atoi( s:p1 );
    i1 = r;
    ::SetTaskPriority( task_number:i1, priority:p2 );
  elif ( "TagMaximumStringLength" == f )
    // TagMaximumStringLength("max_len":integer)
    r = ::T_atoi( s:p1 );
    i1 = r;
    ::TagMaximumStringLength( max_len:i1 );
  elif ( "TagMaximumRelationshipExtentSize" == f )
    // TagMaximumRelationshipExtentSize("user_specified_size":integer)
    r = ::T_atoi( s:p1 );
    i1 = r;
    ::TagMaximumRelationshipExtentSize( user_specified_size:i1 );
  elif ( "TagMaximumSelectionExtentSize" == f )
    // TagMaximumSelectionExtentSize("user_specified_size":integer)
    r = ::T_atoi( s:p1 );
    i1 = r;
    ::TagMaximumSelectionExtentSize( user_specified_size:i1 );
  elif ( "TagMaximumSelfDirectedEvents" == f )
    // TagMaximumSelfDirectedEvents("user_specified_size":integer)
    r = ::T_atoi( s:p1 );
    i1 = r;
    ::TagMaximumSelfDirectedEvents( user_specified_size:i1 );
  elif ( "TagMaximumNonSelfDirectedEvents" == f )
    // TagMaximumNonSelfDirectedEvents("user_specified_size":integer)
    r = ::T_atoi( s:p1 );
    i1 = r;
    ::TagMaximumNonSelfDirectedEvents( user_specified_size:i1 );
  elif ( "TagMaximumPendingOoaTimers" == f )
    // TagMaximumPendingOoaTimers("user_specified_size":integer)
    r = ::T_atoi( s:p1 );
    i1 = r;
    ::TagMaximumPendingOoaTimers( user_specified_size:i1 );
  elif ( "TagMaximumInterleavedBridges" == f )
    // TagMaximumInterleavedBridges("user_specified_size":integer)
    r = ::T_atoi( s:p1 );
    i1 = r;
    ::TagMaximumInterleavedBridges( user_specified_size:i1 );
  elif ( "TagInterleavedBridgeDataSize" == f )
    // TagInterleavedBridgeDataSize("user_specified_size":integer)
    r = ::T_atoi( s:p1 );
    i1 = r;
    ::TagInterleavedBridgeDataSize( user_specified_size:i1 );
  elif ( "TagCollectionsFlavor" == f )
    // TagCollectionsFlavor("collections_flavor":integer)
    r = ::T_atoi( s:p1 );
    i1 = r;
    ::TagCollectionsFlavor( collections_flavor:i1 );
  elif ( "MarkPersistenceCacheDepth" == f )
    // MarkPersistenceCacheDepth("instance_depth":integer"link_depth":integer)
    r = ::T_atoi( s:p1 );
    i1 = r;
    r = ::T_atoi( s:p2 );
    i2 = r;
    ::MarkPersistenceCacheDepth( instance_depth:i1, link_depth:i2 );
  elif ( "TagDynamicMemoryAllocationOn" == f )
    // TagDynamicMemoryAllocationOn("units_to_allocate":integer)
    r = ::T_atoi( s:p1 );
    i1 = r;
    ::TagDynamicMemoryAllocationOn( units_to_allocate:i1 );
  elif ( "TagInstanceLoading" == f )
    ::TagInstanceLoading();
  elif ( "VFBEnable" == f )
    ::VFBEnable();
  elif ( "MarkSystemConfigurationPackage" == f )
    // MarkSystemConfigurationPackage("package_name")
    ::MarkSystemConfigurationPackage( package_name:p1 );
  elif ( "MarkSystemCPortType" == f )
    // MarkSystemCPortType("port_type")
    ::MarkSystemCPortType( port_type:p1 );
  elif ( "MarkAllPortsPolymorphic" == f )
    ::MarkAllPortsPolymorphic();
    // component
  elif ( "MarkAsChannel" == f )
    // MarkAsChannel("package_name","component_name","inc_file")
    ::MarkAsChannel( package_name:p1, component_name:p2, inc_file:p3 );
  elif ( "MarkComponentAsChannel" == f )
    // MarkComponentAsChannel("package_name","component_name","inc_file")
    ::MarkComponentAsChannel( package_name:p1, component_name:p2, inc_file:p3 );
  elif ( "MarkComponentWithTemplate" == f )
    // MarkComponentWithTemplate("package_name","component_name")
    ::MarkComponentWithTemplate( package_name:p1, component_name:p2 );
  elif ( "MarkInterfaceWithTemplate" == f )
    // MarkInterfaceWithTemplate("package_name","interface_name")
    ::MarkInterfaceWithTemplate( package_name:p1, interface_name:p2 );
  elif ( "AddTemplateParameter" == f )
    // AddTemplateParameter("package_name","component_name","type_name","variable_name","default_value")
    ::AddTemplateParameter( package_name:p1, component_name:p2, type_name:p3, variable_name:p4, default_value:p5 );
  elif ( "SetTemplateParameter" == f )
    // SetTemplateParameter("package_name","instance","variable_name","value")
    ::SetTemplateParameter( package_name:p1, instance:p2, variable_name:p3, value:p4 );
  elif ( "SetTPV" == f )
    // CDS - not supported here
    // SetTPV("package_name","parent_component","component","classifier_name","port","variable_name","value")
    ::SetTPV( package_name:p1, parent_component:p2, component:p3, classifier_name:p4, port:p5, variable_name:"", value:"" );
  elif ( "MarkInterfacePrefix" == f )
    // MarkInterfacePrefix("provided_port","required_port","channel")
    ::MarkInterfacePrefix( provided_port:p1, required_port:p2, channel:p3 );
  elif ( "MarkComponentAsRealized" == f )
    // MarkComponentAsRealized("package_name","component_name","inc_file")
    ::MarkComponentAsRealized( package_name:p1, component_name:p2, inc_file:p3 );
  else
    // not in this pass
  end if;
else
  // class
  if ( "TagSystemObjectDefaultExtentSize" == f )
    // TagSystemObjectDefaultExtentSize("extent_size":integer)
    r = ::T_atoi( s:p1 );
    i1 = r;
    ::TagSystemObjectDefaultExtentSize( extent_size:i1 );
  elif ( "MarkSystemObjectDefaultExtentSize" == f )
    // MarkSystemObjectDefaultExtentSize("extent_size":integer)
    r = ::T_atoi( s:p1 );
    i1 = r;
    ::MarkSystemObjectDefaultExtentSize( extent_size:i1 );
  elif ( "TagObjectExtentSize" == f )
    // TagObjectExtentSize("obj_key_letters","extent_size":integer)
    r = ::T_atoi( s:p2 );
    i2 = r;
    ::TagObjectExtentSize( obj_key_letters:p1, extent_size:i2 );
  elif ( "MarkObjectExtentSize" == f )
    // MarkObjectExtentSize("component_name","obj_key_letters","extent_size":integer)
    r = ::T_atoi( s:p3 );
    i3 = r;
    ::MarkObjectExtentSize( component_name:p1, obj_key_letters:p2, extent_size:i3 );
  elif ( "TagTransformerGeneration" == f )
    // TagTransformerGeneration("obj_key_letters","transformer_name")
    ::TagTransformerGeneration( obj_key_letters:p1, transformer_name:p2 );
  elif ( "TagClassOperationTranslationOff" == f )
    // TagClassOperationTranslationOff("obj_key_letters","op_name")
    ::TagClassOperationTranslationOff( obj_key_letters:p1, op_name:p2 );
  elif ( "MarkClassOperationTranslationOff" == f )
    // MarkClassOperationTranslationOff("component_name","obj_key_letters","op_name")
    ::MarkClassOperationTranslationOff( component_name:p1, obj_key_letters:p2, op_name:p3 );
  elif ( "TagObjectTraceOff" == f )
    // TagObjectTraceOff("obj_key_letters")
    ::TagObjectTraceOff( obj_key_letters:p1 );
  elif ( "MarkObjectTraceOff" == f )
    // MarkObjectTraceOff("component_name","obj_key_letters")
    ::MarkObjectTraceOff( component_name:p1, obj_key_letters:p2 );
  elif ( "TagObjectTraceOn" == f )
    // TagObjectTraceOn("obj_key_letters")
    ::TagObjectTraceOn( obj_key_letters:p1 );
  elif ( "MarkObjectTraceOn" == f )
    // MarkObjectTraceOn("component_name","obj_key_letters")
    ::MarkObjectTraceOn( component_name:p1, obj_key_letters:p2 );
  elif ( "TagPEIsDefinedInData" == f )
    // TagPEIsDefinedInData("ss_prefix","obj_key_letters")
    ::TagPEIsDefinedInData( ss_prefix:p1, obj_key_letters:p2 );
  elif ( "MarkPEIsDefinedInData" == f )
    // MarkPEIsDefinedInData("component_name","ss_prefix","obj_key_letters")
    ::MarkPEIsDefinedInData( component_name:p1, ss_prefix:p2, obj_key_letters:p3 );
  elif ( "TagStaticInstancePopulation" == f )
    // TagStaticInstancePopulation("ss_prefix","obj_key_letters")
    ::TagStaticInstancePopulation( ss_prefix:p1, obj_key_letters:p2 );
  elif ( "MarkStaticInstancePopulation" == f )
    // MarkStaticInstancePopulation("component_name","ss_prefix","obj_key_letters")
    ::MarkStaticInstancePopulation( component_name:p1, ss_prefix:p2, obj_key_letters:p3 );
  elif ( "TagReadOnly" == f )
    // TagReadOnly("ss_prefix","obj_key_letters")
    ::TagReadOnly( ss_prefix:p1, obj_key_letters:p2 );
  elif ( "MarkReadOnly" == f )
    // MarkReadOnly("component_name","ss_prefix","obj_key_letters")
    ::MarkReadOnly( component_name:p1, ss_prefix:p2, obj_key_letters:p3 );
  elif ( "TagPersistentClass" == f )
    // TagPersistentClass("ss_prefix","obj_key_letters")
    ::TagPersistentClass( ss_prefix:p1, obj_key_letters:p2 );
  elif ( "MarkPersistentClass" == f )
    // MarkPersistentClass("component_name","ss_prefix","obj_key_letters")
    ::MarkPersistentClass( component_name:p1, ss_prefix:p2, obj_key_letters:p3 );
  elif ( "TagNonPersistentClass" == f )
    // TagNonPersistentClass("ss_prefix","obj_key_letters")
    ::TagNonPersistentClass( ss_prefix:p1, obj_key_letters:p2 );
  elif ( "MarkNonPersistentClass" == f )
    // MarkNonPersistentClass("component_name","ss_prefix","obj_key_letters")
    ::MarkNonPersistentClass( component_name:p1, ss_prefix:p2, obj_key_letters:p3 );
  elif ( "MapClassToTask" == f )
    // MapClassToTask("ss_prefix","obj_key_letters","task":integer)
    r = ::T_atoi( s:p3 );
    i3 = r;
    ::MapClassToTask( ss_prefix:p1, obj_key_letters:p2, task:i3 );
  elif ( "MarkClassToTask" == f )
    // MarkClassToTask("component_name","ss_prefix","obj_key_letters","task":integer)
    r = ::T_atoi( s:p4 );
    i4 = r;
    ::MarkClassToTask( component_name:p1, ss_prefix:p2, obj_key_letters:p3, task:i4 );
    // domain
  elif ( "TagFunctionTranslationOff" == f )
    // TagFunctionTranslationOff("function_name")
    ::TagFunctionTranslationOff( function_name:p1 );
  elif ( "MarkFunctionTranslationOff" == f )
    // MarkFunctionTranslationOff("component_name","function_name")
    ::MarkFunctionTranslationOff( component_name:p1, function_name:p2 );
  elif ( "TagInitializationFunction" == f )
    // TagInitializationFunction("function_name")
    ::TagInitializationFunction( function_name:p1 );
  elif ( "MarkInitializationFunction" == f )
    // MarkInitializationFunction("component_name","function_name")
    ::MarkInitializationFunction( component_name:p1, function_name:p2 );
  elif ( "TagExcludeObjectFromCodeGen" == f )
    // TagExcludeObjectFromCodeGen("obj_key_letters")
    ::TagExcludeObjectFromCodeGen( obj_key_letters:p1 );
  elif ( "MarkExcludeObjectFromCodeGen" == f )
    // MarkExcludeObjectFromCodeGen("component_name","obj_key_letters")
    ::MarkExcludeObjectFromCodeGen( component_name:p1, obj_key_letters:p2 );
  elif ( "TagExcludeSubsystemFromCodeGen" == f )
    // TagExcludeSubsystemFromCodeGen("subsystem_name")
    ::TagExcludeSubsystemFromCodeGen( subsystem_name:p1 );
  elif ( "MarkExcludeSubsystemFromCodeGen" == f )
    // MarkExcludeSubsystemFromCodeGen("component_name","subsystem_name")
    ::MarkExcludeSubsystemFromCodeGen( component_name:p1, subsystem_name:p2 );
  elif ( "TagStateTransitionTracingOn" == f )
    ::TagStateTransitionTracingOn();
  elif ( "MarkStateTransitionTracingOn" == f )
    // MarkStateTransitionTracingOn("component_name")
    ::MarkStateTransitionTracingOn( component_name:p1 );
  elif ( "TagActionStatementTracingOn" == f )
    ::TagActionStatementTracingOn();
  elif ( "MarkActionStatementTracingOn" == f )
    // MarkActionStatementTracingOn("component_name")
    ::MarkActionStatementTracingOn( component_name:p1 );
  elif ( "MarkMessageTracingOn" == f )
    // MarkMessageTracingOn("component_name","port_name","message_name")
    ::MarkMessageTracingOn( component_name:p1, port_name:p2, message_name:p3 );
  elif ( "TagEmptyHandleDetectionOn" == f )
    ::TagEmptyHandleDetectionOn();
  elif ( "MarkEmptyHandleDetectionOn" == f )
    // MarkEmptyHandleDetectionOn("component_name")
    ::MarkEmptyHandleDetectionOn( component_name:p1 );
  elif ( "TagFirstPassOptimizationsOff" == f )
    ::TagFirstPassOptimizationsOff();
  elif ( "MarkFirstPassOptimizationsOff" == f )
    // MarkFirstPassOptimizationsOff("component_name")
    ::MarkFirstPassOptimizationsOff( component_name:p1 );
  elif ( "TagStateActionCommentBlocksEnabled" == f )
    ::TagStateActionCommentBlocksEnabled();
  elif ( "MarkStateActionCommentBlocksEnabled" == f )
    // MarkStateActionCommentBlocksEnabled("component_name")
    ::MarkStateActionCommentBlocksEnabled( component_name:p1 );
  elif ( "TagStateActionStatementCommentsDisabled" == f )
    ::TagStateActionStatementCommentsDisabled();
  elif ( "MarkStateActionStatementCommentsDisabled" == f )
    // MarkStateActionStatementCommentsDisabled("component_name")
    ::MarkStateActionStatementCommentsDisabled( component_name:p1 );
  elif ( "TagStateActionVariableNamesEnabled" == f )
    ::TagStateActionVariableNamesEnabled();
  elif ( "TagVerboseReflexivePhrasesEnabled" == f )
    ::TagVerboseReflexivePhrasesEnabled();
  elif ( "MarkPortWiring" == f )
    // MarkPortWiring("home_component","home_port","foreign_component","foreign_port")
    ::MarkPortWiring( home_component:p1, home_port:p2, foreign_component:p3, foreign_port:p4 );
  elif ( "TagDispatchFlavor" == f )
    // TagDispatchFlavor("flavor":integer)
    r = ::T_atoi( s:p1 );
    i1 = r;
    ::TagDispatchFlavor( flavor:i1 );
    // event
  elif ( "TagPriorityEvent" == f )
    // TagPriorityEvent("evt_label","priority_value":integer)
    r = ::T_atoi( s:p2 );
    i2 = r;
    ::TagPriorityEvent( evt_label:p1, priority_value:i2 );
  elif ( "MarkPriorityEvent" == f )
    // MarkPriorityEvent("component_name","evt_label","priority_value":integer)
    r = ::T_atoi( s:p3 );
    i3 = r;
    ::MarkPriorityEvent( component_name:p1, evt_label:p2, priority_value:i3 );
  else
    // not in this pass
  end if;
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("0cb55cf4-dc91-4b65-ab34-b3a82b0b61d7",
	"c7b9712f-0280-4523-941e-966c087f9446",
	'pass',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("e0dac021-b340-414c-ad3c-89766acfa082",
	"c7b9712f-0280-4523-941e-966c087f9446",
	'f',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"0cb55cf4-dc91-4b65-ab34-b3a82b0b61d7",
	'');
INSERT INTO S_SPARM
	VALUES ("aa966637-e69b-44c4-a9c6-4fc78a482acb",
	"c7b9712f-0280-4523-941e-966c087f9446",
	'p1',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"e0dac021-b340-414c-ad3c-89766acfa082",
	'');
INSERT INTO S_SPARM
	VALUES ("d3550cee-05da-42a7-857d-9c8bfdb48034",
	"c7b9712f-0280-4523-941e-966c087f9446",
	'p2',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"aa966637-e69b-44c4-a9c6-4fc78a482acb",
	'');
INSERT INTO S_SPARM
	VALUES ("422c0182-7f59-4160-ba57-2be5e13bb836",
	"c7b9712f-0280-4523-941e-966c087f9446",
	'p3',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"d3550cee-05da-42a7-857d-9c8bfdb48034",
	'');
INSERT INTO S_SPARM
	VALUES ("5e68fdc6-f04d-460e-8853-f0dc7947c3b3",
	"c7b9712f-0280-4523-941e-966c087f9446",
	'p4',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"422c0182-7f59-4160-ba57-2be5e13bb836",
	'');
INSERT INTO S_SPARM
	VALUES ("103de1ee-3ded-4142-912c-a6ecf370a856",
	"c7b9712f-0280-4523-941e-966c087f9446",
	'p5',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"5e68fdc6-f04d-460e-8853-f0dc7947c3b3",
	'');
INSERT INTO PE_PE
	VALUES ("c7b9712f-0280-4523-941e-966c087f9446",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("b2637dfe-2a08-4f07-8790-9af547fdf783",
	"00000000-0000-0000-0000-000000000000",
	'T_atoi',
	'',
	'//
s = param.s;
r = 0; //::STRING_TO_INTEGER( component_name:s );
return r;
',
	"ba5eda7a-def5-0000-0000-000000000002",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("76385dff-e05d-4701-bcf5-9f8553cda368",
	"b2637dfe-2a08-4f07-8790-9af547fdf783",
	's',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("b2637dfe-2a08-4f07-8790-9af547fdf783",
	1,
	"42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO PE_PE
	VALUES ("42fcf253-17c5-4a7c-ab04-63452e7a46ce",
	1,
	"efb614c1-5af5-40ee-92c8-706430a99db3",
	"00000000-0000-0000-0000-000000000000",
	7);
INSERT INTO EP_PKG_PROXY
	VALUES ("efb614c1-5af5-40ee-92c8-706430a99db3",
	"00000000-0000-0000-0000-000000000000",
	"d9bc5487-4193-4817-be1c-6c3f3339aebf",
	'ooaofooa',
	'========================================================================

File:          $RCSfile: ooaofooa.xtuml,v $
Version:   $Revision: 1.127 $
Modified:  $Date: 2006/09/26 15:10:20 $

(c) Copyright 2004-2012 by Mentor Graphics Corp. All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Mentor Graphics Corp. and is not for external distribution.
========================================================================

This is the application domain for the Tiger project.

The processing in this model describes the activities
for model capture.



',
	0,
	'../ooaofooa.xtuml');
INSERT INTO S_SYS_PROXY
	VALUES ("d9bc5487-4193-4817-be1c-6c3f3339aebf",
	'com.mentor.nucleus.bp.core',
	1,
	'../../../../com.mentor.nucleus.bp.core.xtuml');

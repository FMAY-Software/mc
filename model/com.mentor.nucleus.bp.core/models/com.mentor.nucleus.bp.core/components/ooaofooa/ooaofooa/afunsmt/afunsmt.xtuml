-- BP 7.1.6 content: Package syschar: 3 persistence-version: 7.1.6

INSERT INTO EP_PKG
	VALUES ("bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	"d9bc5487-4193-4817-be1c-6c3f3339aebf",
	'afunsmt',
	'',
	0);
INSERT INTO GD_MD
	VALUES ("0a9fc76e-cec9-4f92-9d8e-6c488698b137",
	112,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	108,
	0,
	0,
	1,
	1,
	1,
	12,
	1,
	0,
	0,
	0,
	0,
	0,
	'',
	'com.mentor.nucleus.bp.core::components::ooaofooa::ooaofooa::afunsmt');
INSERT INTO DIM_DIA
	VALUES ("0a9fc76e-cec9-4f92-9d8e-6c488698b137",
	'',
	1.000000,
	4000.000000,
	3000.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_SYNC
	VALUES ("593255e1-576a-4d95-8c52-1e4c004d509a",
	"00000000-0000-0000-0000-000000000000",
	'GetFixedSizeClassExtentInfo',
	'',
	'//============================================================================
// $RCSfile: q.names.arc,v $
//
// Description:
// This archetype file contains utility functions for implementation namings
// that span multiple archetype files.
//
// Notice:
// (C) Copyright 1998-2013 Mentor Graphics Corporation
//     All rights reserved.
//
// This document contains confidential and proprietary information and
// property of Mentor Graphics Corp.  No part of this document may be
// reproduced without the express written permission of Mentor Graphics Corp.
//============================================================================
//
//
//============================================================================
// Return a information on variables and types used in defining the
// instance collections for a class.
//============================================================================
te_class = param.te_class;
return ( "pG_" + te_class.GeneratedName ) + "_extent";
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("285d71da-e477-4444-b3ec-722f908e24a8",
	"593255e1-576a-4d95-8c52-1e4c004d509a",
	'te_class',
	"f975acb7-4246-4a87-9c5a-75481f096785",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("f975acb7-4246-4a87-9c5a-75481f096785",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Extended Class>',
	'',
	'',
	'../Translation Extensions/Translation Extensions.xtuml');
INSERT INTO PE_PE
	VALUES ("593255e1-576a-4d95-8c52-1e4c004d509a",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("e079af1b-1ed6-43cc-9e91-004aa9d528c8",
	"00000000-0000-0000-0000-000000000000",
	'GetNavigateLinkMethodName',
	'',
	'//
//============================================================================
from_o_obj = param.from_o_obj;
to_o_obj = param.to_o_obj;
r_rel = param.r_rel;
rel_phrase = param.rel_phrase;
//
result = "";
select one te_c related by to_o_obj->TE_CLASS[R2019]->TE_C[R2064];
if ( not_empty te_c )
  result = "${te_c.Name}_${to_o_obj.Key_Lett}_R$t{r_rel.Numb}_From_${from_o_obj.Key_Lett}";
  //
  r = ::GetRelationshipSuffix( right_o_obj:to_o_obj, r_rel:r_rel, rel_phrase:rel_phrase );
  suffix = r;
  if ( "" != suffix )
    result = ( result + "_" ) + suffix;
  end if;
end if;
return result;
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("e060d910-e2a3-45c9-a883-a725c349645f",
	"e079af1b-1ed6-43cc-9e91-004aa9d528c8",
	'from_o_obj',
	"d6b21eeb-39da-43bf-b503-c7bbc9ddf242",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("d6b21eeb-39da-43bf-b503-c7bbc9ddf242",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Model Class>',
	'',
	'',
	'../Instance Reference Data Types/Instance Reference Data Types.xtuml');
INSERT INTO S_SPARM
	VALUES ("97bc21f1-d350-47f0-a4c9-51e38e272dc2",
	"e079af1b-1ed6-43cc-9e91-004aa9d528c8",
	'to_o_obj',
	"d6b21eeb-39da-43bf-b503-c7bbc9ddf242",
	0,
	'',
	"e060d910-e2a3-45c9-a883-a725c349645f",
	'');
INSERT INTO S_SPARM
	VALUES ("59a94597-29bc-44da-9472-8a96f16b6ae9",
	"e079af1b-1ed6-43cc-9e91-004aa9d528c8",
	'r_rel',
	"620e9be8-e289-47ed-9279-69b359c269c5",
	0,
	'',
	"97bc21f1-d350-47f0-a4c9-51e38e272dc2",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("620e9be8-e289-47ed-9279-69b359c269c5",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Association>',
	'',
	'',
	'../Association/Association.xtuml');
INSERT INTO S_SPARM
	VALUES ("3580d5d8-e4f8-4bb0-9f07-1b986375671e",
	"e079af1b-1ed6-43cc-9e91-004aa9d528c8",
	'rel_phrase',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"59a94597-29bc-44da-9472-8a96f16b6ae9",
	'');
INSERT INTO PE_PE
	VALUES ("e079af1b-1ed6-43cc-9e91-004aa9d528c8",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("feec3d28-8648-4fa1-98e4-1a344278d4dc",
	"00000000-0000-0000-0000-000000000000",
	'GetRelateToName',
	'',
	'//
//============================================================================
o_obj = param.o_obj;
r_rel = param.r_rel;
rel_phrase = param.rel_phrase;
result = "";
select one te_class related by o_obj->TE_CLASS[R2019];
if ( not_empty te_class )
  result = te_class.GeneratedName + "_R$t{r_rel.Numb}_Link";
  r = ::GetRelationshipSuffix( right_o_obj:o_obj, r_rel:r_rel, rel_phrase:rel_phrase );
  suffix = r;
  if ( "" != suffix )
    result = ( result + "_" ) + suffix;
  end if;
end if;
return result;
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("5ec870c7-6ff1-4df2-8854-8a2579dfdb7f",
	"feec3d28-8648-4fa1-98e4-1a344278d4dc",
	'o_obj',
	"d6b21eeb-39da-43bf-b503-c7bbc9ddf242",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("7000e420-af20-4272-8752-fedfd34ee1b8",
	"feec3d28-8648-4fa1-98e4-1a344278d4dc",
	'r_rel',
	"620e9be8-e289-47ed-9279-69b359c269c5",
	0,
	'',
	"5ec870c7-6ff1-4df2-8854-8a2579dfdb7f",
	'');
INSERT INTO S_SPARM
	VALUES ("ff9cb085-9231-4e37-ad13-ebbd9eb7d158",
	"feec3d28-8648-4fa1-98e4-1a344278d4dc",
	'rel_phrase',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"7000e420-af20-4272-8752-fedfd34ee1b8",
	'');
INSERT INTO PE_PE
	VALUES ("feec3d28-8648-4fa1-98e4-1a344278d4dc",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("232b9c4e-cfc3-4f55-9d6e-fea161ab98a7",
	"00000000-0000-0000-0000-000000000000",
	'GetUnrelateFromName',
	'',
	'//
//============================================================================
o_obj = param.o_obj;
r_rel = param.r_rel;
rel_phrase = param.rel_phrase;
result = "";
select one te_class related by o_obj->TE_CLASS[R2019];
if ( not_empty te_class )
  result = te_class.GeneratedName + "_R$t{r_rel.Numb}_Unlink";
  r = ::GetRelationshipSuffix( right_o_obj:o_obj, r_rel:r_rel, rel_phrase:rel_phrase );
  suffix = r;
  if ( "" != suffix )
    result = ( result + "_" ) + suffix;
  end if;
end if;
return result;
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("b18cc01a-5b28-45b0-8fe6-7139993cda67",
	"232b9c4e-cfc3-4f55-9d6e-fea161ab98a7",
	'o_obj',
	"d6b21eeb-39da-43bf-b503-c7bbc9ddf242",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("c507c6fc-d65a-457a-965b-67bd61b42c85",
	"232b9c4e-cfc3-4f55-9d6e-fea161ab98a7",
	'r_rel',
	"620e9be8-e289-47ed-9279-69b359c269c5",
	0,
	'',
	"b18cc01a-5b28-45b0-8fe6-7139993cda67",
	'');
INSERT INTO S_SPARM
	VALUES ("f13a244f-c88e-43c4-9bd7-d18ce5a2a3e7",
	"232b9c4e-cfc3-4f55-9d6e-fea161ab98a7",
	'rel_phrase',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"c507c6fc-d65a-457a-965b-67bd61b42c85",
	'');
INSERT INTO PE_PE
	VALUES ("232b9c4e-cfc3-4f55-9d6e-fea161ab98a7",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("73c13b34-3271-4055-a4f6-684a2ce3639c",
	"00000000-0000-0000-0000-000000000000",
	'PEIGetRelationshipSetContainerName',
	'',
	'//
//============================================================================
// Return the name of the object relationship container array.
// This array of containoids is used to optimize relationships when
// there are preexisting instances.
//============================================================================
te_class = param.te_class;
return te_class.GeneratedName + "_rel_set_lists";
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("94358ea3-ca36-4dde-93e5-81207e1b5052",
	"73c13b34-3271-4055-a4f6-684a2ce3639c",
	'te_class',
	"f975acb7-4246-4a87-9c5a-75481f096785",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("73c13b34-3271-4055-a4f6-684a2ce3639c",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("add776ba-6ba3-4b9b-9c42-e6adcc63ca14",
	"00000000-0000-0000-0000-000000000000",
	'GetDomainDispatcherTableName',
	'',
	'//
//============================================================================
// Return the name and type of the domain dispatcher.
//============================================================================
registered_name = param.registered_name;
return registered_name + "_EventDispatcher";
return "EventTaker_t";
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("2454a80f-4a9e-42e9-9403-22cab5d7e055",
	"add776ba-6ba3-4b9b-9c42-e6adcc63ca14",
	'registered_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("add776ba-6ba3-4b9b-9c42-e6adcc63ca14",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("04c0db94-6edc-412c-82cf-2fa6366e4969",
	"00000000-0000-0000-0000-000000000000",
	'GetSuperTypePolymorphicEventMethodName',
	'',
	'//
//============================================================================
te_class = param.te_class;
r_rel = param.r_rel;
return te_class.GeneratedName + "_R$t{r_rel.Numb}PolymorphicEvent";
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("23cd30a6-a29d-4402-ba8c-9440fc30ca1c",
	"04c0db94-6edc-412c-82cf-2fa6366e4969",
	'te_class',
	"f975acb7-4246-4a87-9c5a-75481f096785",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("c18908c7-96d9-4a1b-9100-bc9f9a3df851",
	"04c0db94-6edc-412c-82cf-2fa6366e4969",
	'r_rel',
	"620e9be8-e289-47ed-9279-69b359c269c5",
	0,
	'',
	"23cd30a6-a29d-4402-ba8c-9440fc30ca1c",
	'');
INSERT INTO PE_PE
	VALUES ("04c0db94-6edc-412c-82cf-2fa6366e4969",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("4f1091ff-f0c7-4514-9cc0-98c2b8351432",
	"00000000-0000-0000-0000-000000000000",
	'GetDomainTypeIDFromString',
	'',
	'//
//============================================================================
dom_name = param.dom_name;
return T::r(s:dom_name) + "_DOMAIN_ID";
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("44f83698-f9d3-49c5-b4f7-a94253d9459e",
	"4f1091ff-f0c7-4514-9cc0-98c2b8351432",
	'dom_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("4f1091ff-f0c7-4514-9cc0-98c2b8351432",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("a68a54ef-a3ea-4dbd-8a47-02b1ad1c51e4",
	"00000000-0000-0000-0000-000000000000",
	'GetPersistentCheckMarkPostName',
	'',
	'//
//============================================================================
// Provide a name for the routine that will check if an instance is
// dirty, mark it if is not and queue it for flusing later.
//============================================================================
select any te_instance from instances of TE_INSTANCE;
select any te_prefix from instances of TE_PREFIX;
select any te_typemap from instances of TE_TYPEMAP;
return te_prefix.result + "PersistenceCheckMarkPost";
return "void";
return "  ${te_instance.handle},\n  const ${te_typemap.domain_number_name},\n  const ${te_typemap.object_number_name}";
return "  ${te_instance.handle} instance,\n  const ${te_typemap.domain_number_name} domain_num,\n  const ${te_typemap.object_number_name} class_num";
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("a68a54ef-a3ea-4dbd-8a47-02b1ad1c51e4",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("5e87decf-1e6e-4d42-8bf2-1d35ad0a1c59",
	"00000000-0000-0000-0000-000000000000",
	'GetPersistentPostLinkName',
	'',
	'//
//============================================================================
// Provide a name for the routine that will post links to the persistence
// flush queue.
//============================================================================
select any te_instance from instances of TE_INSTANCE;
select any te_prefix from instances of TE_PREFIX;
select any te_typemap from instances of TE_TYPEMAP;
return te_prefix.result + "PersistencePostLink";
return "void";
return "  const s1_t, const ${te_typemap.domain_number_name},\n  const ${te_typemap.object_number_name}, const ${te_typemap.instance_index_name},\n  ${te_instance.handle}, const ${te_typemap.object_number_name},\n  ${te_instance.handle}, const ${te_typemap.object_number_name},\n  ${te_instance.handle}, const ${te_typemap.object_number_name}";
return "  const s1_t operation, const ${te_typemap.domain_number_name} domain,\n  const ${te_typemap.object_number_name} owning_class, const ${te_typemap.instance_index_name} ri,\n  ${te_instance.handle} left, const ${te_typemap.object_number_name} l,\n   ${te_instance.handle} right, const ${te_typemap.object_number_name} r,\n  ${te_instance.handle} assoc, const ${te_typemap.object_number_name} a";
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("5e87decf-1e6e-4d42-8bf2-1d35ad0a1c59",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("62b65546-6d54-4e2c-b10a-80fb13e0e444",
	"00000000-0000-0000-0000-000000000000",
	'blck_xlate',
	'',
	'//============================================================================
// $RCSfile: q.oal.act_blk.arc,v $
//
// Description:
// This function provides indirection and a single point of turning for
// fragment versus OAL instance based code generation.
//
// Notice:
// (C) Copyright 1998-2013 Mentor Graphics Corporation
//     All rights reserved.
//
// This document contains confidential and proprietary information and
// property of Mentor Graphics Corp.  No part of this document may be
// reproduced without the express written permission of Mentor Graphics Corp.
//============================================================================
//
//
// This function produces the code for an action given the outer
// block.  It traverses each statement in order and generates for it.
//
// If the statement is a control statement, then there are two
// buffers of generated code, otherwise there is only one.
//
trace = param.trace;
te_blk = param.te_blk;
te_aba = param.te_aba;
if ( "" != te_blk.declaration )
  ::aba_code_append( te_aba:te_aba, s:te_blk.indentation );
  ::aba_code_append( te_aba:te_aba, s:te_blk.declaration );
  ::aba_code_append( te_aba:te_aba, s:"\n" );
end if;
select one te_smt related by te_blk->TE_SMT[R2014];
if ( not_empty te_smt )
  select one act_smt related by te_smt->ACT_SMT[R2038];
  // We have statements in this block.
  // Get empty handles into scope.
  select one current_act_if related by act_smt->ACT_IF[R603] where ( false );
  select one empty_act_smt related by current_act_if->ACT_SMT[R603] where ( false );
  while ( not_empty act_smt )
    next = empty_act_smt;
    select one te_smt related by act_smt->TE_SMT[R2038];
    if ( "" != te_smt.OAL )
      statement_comment = ( ( te_blk.indentation + "/" ) + ( "* " + te_smt.OAL ) ) + ( " *" + "/\n" );
      ::aba_code_append( te_aba:te_aba, s:statement_comment );
      if ( trace )
        statement_trace = ( ( te_blk.indentation + "XTUML_OAL_STMT_TRACE( " ) + ( T::s(i:te_blk.depth) + ", &quot;" ) ) + ( te_smt.OAL + "&quot; );\n" );
        ::aba_code_append( te_aba:te_aba, s:statement_trace );
      end if;
    end if;
    ::aba_code_append( te_aba:te_aba, s:te_smt.buffer );
    select one for_te_blk related by act_smt->ACT_FOR[R603]->ACT_BLK[R605]->TE_BLK[R2016];
    if ( not_empty for_te_blk )
      ::blck_xlate( trace:trace, te_blk:for_te_blk, te_aba:te_aba );
    else
      select one whl_te_blk related by act_smt->ACT_WHL[R603]->ACT_BLK[R608]->TE_BLK[R2016];
      if ( not_empty whl_te_blk )
        ::blck_xlate( trace:trace, te_blk:whl_te_blk, te_aba:te_aba );
      else
        select one act_if related by act_smt->ACT_IF[R603];
        if ( not_empty act_if )
          current_act_if = act_if;
          select one if_te_blk related by act_if->ACT_BLK[R607]->TE_BLK[R2016];
          if ( not_empty if_te_blk )
            ::blck_xlate( trace:trace, te_blk:if_te_blk, te_aba:te_aba );
          end if;
          // ELIF and ELSE are not linked across R661.  So, get the next
          // one from here.
          select any next related by act_if->ACT_EL[R682]->ACT_SMT[R603];
          if ( empty next )
            select one next related by act_if->ACT_E[R683]->ACT_SMT[R603];
          else
            select many next_elif_act_smts related by act_if->ACT_EL[R682]->ACT_SMT[R603];
            for each next_elif_act_smt in next_elif_act_smts
              if ( next_elif_act_smt.LineNumber < next.LineNumber )
                next = next_elif_act_smt;
              end if;
            end for;
          end if;
        else
          select one eli_te_blk related by act_smt->ACT_EL[R603]->ACT_BLK[R658]->TE_BLK[R2016];
          if ( not_empty eli_te_blk )
            ::blck_xlate( trace:trace, te_blk:eli_te_blk, te_aba:te_aba );
            // ELIF and ELSE are not linked across R661.  So, get the next
            // one from here.
            select any next related by current_act_if->ACT_EL[R682]->ACT_SMT[R603] where ( selected.LineNumber > act_smt.LineNumber );
            if ( empty next )
              select one next related by current_act_if->ACT_E[R683]->ACT_SMT[R603];
              if ( empty next )
                select one next related by current_act_if->ACT_SMT[R603]->ACT_SMT[R661.''succeeds''];
              end if;
            else
              select many next_elif_act_smts related by current_act_if->ACT_EL[R682]->ACT_SMT[R603] where ( selected.LineNumber > act_smt.LineNumber );
              for each next_elif_act_smt in next_elif_act_smts
                if ( next_elif_act_smt.LineNumber < next.LineNumber )
                  next = next_elif_act_smt;
                end if;
              end for;
            end if;
          else
            select one else_te_blk related by act_smt->ACT_E[R603]->ACT_BLK[R606]->TE_BLK[R2016];
            if ( not_empty else_te_blk )
              ::blck_xlate( trace:trace, te_blk:else_te_blk, te_aba:te_aba );
              select one next related by current_act_if->ACT_SMT[R603]->ACT_SMT[R661.''succeeds''];
            end if;
          end if;
        end if;
      end if;
    end if;
    if ( "" != te_smt.buffer2 )
      ::aba_code_append( te_aba:te_aba, s:te_smt.buffer2 );
      ::aba_code_append( te_aba:te_aba, s:"\n" );
    end if;
    if ( empty next )
      select one next related by act_smt->ACT_SMT[R661.''succeeds''];
    end if;
    act_smt = next;
  end while;
  if ( "" != te_blk.deallocation )
    ::aba_code_append( te_aba:te_aba, s:te_blk.indentation );
    ::aba_code_append( te_aba:te_aba, s:te_blk.deallocation );
    ::aba_code_append( te_aba:te_aba, s:"\n" );
  end if;
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("4c8f4722-b2e2-412f-b6bb-7a11baa14a34",
	"62b65546-6d54-4e2c-b10a-80fb13e0e444",
	'trace',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("44bd24b5-4703-45ae-a202-edcda337605d",
	"62b65546-6d54-4e2c-b10a-80fb13e0e444",
	'te_blk',
	"5a29d9fb-8b19-4624-9076-30bd2407c215",
	0,
	'',
	"4c8f4722-b2e2-412f-b6bb-7a11baa14a34",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("5a29d9fb-8b19-4624-9076-30bd2407c215",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Extended Block>',
	'',
	'',
	'../Translation OAL/Translation OAL.xtuml');
INSERT INTO S_SPARM
	VALUES ("17008467-9b89-4c68-aa4d-221974579682",
	"62b65546-6d54-4e2c-b10a-80fb13e0e444",
	'te_aba',
	"5fb4bb14-9533-4d0c-bec8-44e5e22fbbfd",
	0,
	'',
	"44bd24b5-4703-45ae-a202-edcda337605d",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("5fb4bb14-9533-4d0c-bec8-44e5e22fbbfd",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Action Block Anchor>',
	'',
	'',
	'../Translation Extensions/Translation Extensions.xtuml');
INSERT INTO PE_PE
	VALUES ("62b65546-6d54-4e2c-b10a-80fb13e0e444",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("5a9b9ab4-157b-4f3f-8192-777fdc796933",
	"00000000-0000-0000-0000-000000000000",
	'smt_buffer_append',
	'',
	'//
te_smt = param.te_smt;
s = param.s;
te_smt.buffer = te_smt.buffer + s;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("434cd130-b7ba-4a75-979b-f2c77d31639d",
	"5a9b9ab4-157b-4f3f-8192-777fdc796933",
	'te_smt',
	"20eb7827-fd8a-4b79-b705-c928064fb55d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("20eb7827-fd8a-4b79-b705-c928064fb55d",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Extended Statement>',
	'',
	'',
	'../Translation OAL/Translation OAL.xtuml');
INSERT INTO S_SPARM
	VALUES ("44dfd72b-eb46-4736-b1c4-c6468e676dcb",
	"5a9b9ab4-157b-4f3f-8192-777fdc796933",
	's',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"434cd130-b7ba-4a75-979b-f2c77d31639d",
	'');
INSERT INTO PE_PE
	VALUES ("5a9b9ab4-157b-4f3f-8192-777fdc796933",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("3901777d-2f07-423e-a43f-67fe9ba312d2",
	"00000000-0000-0000-0000-000000000000",
	'blk_declaration_append',
	'',
	'//
te_blk = param.te_blk;
s = param.s;
te_blk.declaration = te_blk.declaration + s;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("2cb645ff-55b3-4fd3-b594-26dfc1d5eac2",
	"3901777d-2f07-423e-a43f-67fe9ba312d2",
	'te_blk',
	"5a29d9fb-8b19-4624-9076-30bd2407c215",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("fc38a406-ea98-46ef-94e9-9b6920452eb1",
	"3901777d-2f07-423e-a43f-67fe9ba312d2",
	's',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"2cb645ff-55b3-4fd3-b594-26dfc1d5eac2",
	'');
INSERT INTO PE_PE
	VALUES ("3901777d-2f07-423e-a43f-67fe9ba312d2",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("d961acda-69da-4797-aa2c-ebec84e3ea63",
	"00000000-0000-0000-0000-000000000000",
	'blk_deallocation_append',
	'',
	'//
te_blk = param.te_blk;
s = param.s;
te_blk.deallocation = te_blk.deallocation + s;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("42f2f8b0-72fe-4cb5-9e3d-810cfd9d05ce",
	"d961acda-69da-4797-aa2c-ebec84e3ea63",
	'te_blk',
	"5a29d9fb-8b19-4624-9076-30bd2407c215",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("6a98c2fb-722b-4c4f-bd48-54cf1c0e51b2",
	"d961acda-69da-4797-aa2c-ebec84e3ea63",
	's',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"42f2f8b0-72fe-4cb5-9e3d-810cfd9d05ce",
	'');
INSERT INTO PE_PE
	VALUES ("d961acda-69da-4797-aa2c-ebec84e3ea63",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("c89a121c-05f8-4873-85bf-56f7415afd9c",
	"00000000-0000-0000-0000-000000000000",
	'aba_code_append',
	'',
	'//
te_aba = param.te_aba;
s = param.s;
te_aba.code = te_aba.code + s;
oal = "strcat( te_aba->code, p_s );";
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("7c85184f-395d-42a8-ac7e-299828a0be9f",
	"c89a121c-05f8-4873-85bf-56f7415afd9c",
	'te_aba',
	"5fb4bb14-9533-4d0c-bec8-44e5e22fbbfd",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("87d352f9-98a9-4025-92bd-76610a9a9058",
	"c89a121c-05f8-4873-85bf-56f7415afd9c",
	's',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"7c85184f-395d-42a8-ac7e-299828a0be9f",
	'');
INSERT INTO PE_PE
	VALUES ("c89a121c-05f8-4873-85bf-56f7415afd9c",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("423a8977-127e-4bb1-bb02-5a9fd6487876",
	"00000000-0000-0000-0000-000000000000",
	'TE_ABA_rollup',
	'',
	'//============================================================================
// $RCSfile: q.oal.action.arc,v $
//
// Description:
// This query rolls up (accumulates) the translated statements into
// a single string attribute on the action block anchor (TE_ABA).
// After this roll-up, the ACT_* and V_* instances are no longer needed.
//
// Notice:
// (C) Copyright 1998-2013 Mentor Graphics Corporation
//     All rights reserved.
//
// This document contains confidential and proprietary information and
// property of Mentor Graphics Corp.  No part of this document may be
// reproduced without the express written permission of Mentor Graphics Corp.
//============================================================================
//
//
oal = "char b[1000000];";
parseSuccessful = ParseStatus::parseSuccessful;
select any empty_act_blk from instances of ACT_BLK where ( false );
select many te_cs from instances of TE_C where ( selected.included_in_build );
for each te_c in te_cs
  select many te_abas related by te_c->TE_ABA[R2088];
  for each te_aba in te_abas
    select one te_blk related by te_aba->TE_BLK[R2011];
    if ( not_empty te_blk )
      oal = "te_aba->code = &b[0]; *te_aba->code = 0;";
      ::blck_xlate( trace:te_c.StmtTrace, te_blk:te_blk, te_aba:te_aba );
      oal = "te_aba->code = Escher_strcpy( te_aba->code, &b[0] );";
    else
      te_aba.code = ( "\n  /" + "* WARNING!  Skipping unsuccessful or unparsed action.  *" ) + "/\n";
    end if;
  end for;
end for;
// Process EEs outside of components.
select many te_ees from instances of TE_EE where ( ( selected.RegisteredName != "TIM" ) and selected.Included );
for each te_ee in te_ees
  select one te_c related by te_ee->TE_C[R2085];
  if ( empty te_c )
    select many s_brgs related by te_ee->S_EE[R2020]->S_BRG[R19];
    for each s_brg in s_brgs
      select one act_blk related by s_brg->ACT_BRB[R697]->ACT_ACT[R698]->ACT_BLK[R666];
      select one te_aba related by s_brg->TE_BRG[R2025]->TE_ABA[R2010];
      if ( not_empty act_blk )
        select one te_blk related by act_blk->TE_BLK[R2016];
        oal = "te_aba->code = &b[0]; *te_aba->code = 0;";
        ::blck_xlate( trace:false, te_blk:te_blk, te_aba:te_aba );
        oal = "te_aba->code = Escher_strcpy( te_aba->code, &b[0] );";
      end if;
    end for;
  end if;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("423a8977-127e-4bb1-bb02-5a9fd6487876",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("82e1a3a1-65f6-4343-8938-964b707516bd",
	"00000000-0000-0000-0000-000000000000",
	'smt_translate_control_statements',
	'',
	'//====================================================================
//
// File:      $RCSfile: q.oal.translate.arc,v $
//
// (c) Copyright 1998-2013 Mentor Graphics Corporation  All rights reserved.
//
//====================================================================
//
//    Purpose:    This file contains the functions that generate
//                action language from the populated OOA of BPAL.
//
//============================================================================
//
//  These functions are part one of a two-step translation of
//  the action language from the model of OAL.  Each of the invoked
//  functions below translate a specific part of the OAL.  For
//  example the val_literal_boolean_values() function generates all
//  of the code for each literal boolean value found in all of the
//  actions for a domain.  The function smt_ifs()
//  generates the code for all of the if statements found in the
//  actions for a domain.  
//
//  Each of the functions places the generated code for its
//  element in an attribute of the supertype, called _buffer_.
//  In the case of a value, the supertype is V_VAL, for a
//  statement, the supertype is ACT_SMT.
//
//  Once all of the values and statements have been translated,
//  and all of the code is in the buffers,  the function
//  blck_xlate is called to order the statements.
//
//============================================================================
//
::smt_ifs();
::smt_elses();
::smt_fors();
::smt_whiles();
::smt_elifs();
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("82e1a3a1-65f6-4343-8938-964b707516bd",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("d6b70cf5-2497-4253-88b3-9cb57184ec02",
	"00000000-0000-0000-0000-000000000000",
	'smt_translate_other_statements',
	'',
	'//
::smt_assigns();
::smt_create_instances();
::smt_delete_instances();
::smt_create_events_to_instance();
::smt_create_events_to_class();
::smt_create_events_to_creator();
::smt_relates();
::smt_unrelates();
::smt_selects();
::smt_select_wheres();
::smt_select_relateds();
::smt_select_related_wheres();
::smt_relate_usings();
::smt_unrelate_usings();
::smt_generate_precreated_events();
::smt_generate_events();
::smt_generate_class_events();
::smt_generate_creator_events();
::smt_sgns();
::smt_iops();
::smt_operates();
::smt_bridges();
::smt_functions();
::smt_returns();
::smt_controls();
::smt_breaks();
::smt_continues();
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("d6b70cf5-2497-4253-88b3-9cb57184ec02",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("8d9e957e-9977-4785-a056-c29729c0f017",
	"00000000-0000-0000-0000-000000000000",
	'oal_translate',
	'',
	'//
// 
//
//.print "translating values"
//.invoke val_translate()
//.print "showing values"
//.invoke oal_v_val_test()
T::print(s:"translating control statements");
::smt_translate_control_statements();
T::print(s:"translating other statements");
::smt_translate_other_statements();
T::print(s:"rolling up statements into action bodies");
::TE_ABA_rollup();
T::print(s:"done translating statements");
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("8d9e957e-9977-4785-a056-c29729c0f017",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("ef6e8994-20aa-4533-a457-b2d164eec4f9",
	"00000000-0000-0000-0000-000000000000",
	'smt_fors',
	'',
	'//====================================================================
// $RCSfile: q.smt.generate.arc,v $
//
// (c) Copyright 1998-2013 Mentor Graphics Corporation  All rights reserved.
//====================================================================
// ----------------------------------------------------------
// gen for statements
// ----------------------------------------------------------
select many act_fors from instances of ACT_FOR;
for each act_for in act_fors
  select one te_smt related by act_for->ACT_SMT[R603]->TE_SMT[R2038];
  r = ::smt_for( te_smt:te_smt, act_for:act_for );
  ::smt_buffer_append( te_smt:te_smt, s:r );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("ef6e8994-20aa-4533-a457-b2d164eec4f9",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("05cdf67a-a5c4-4128-a823-bc3b8e170025",
	"00000000-0000-0000-0000-000000000000",
	'smt_for',
	'',
	'// --------------------------------------------------------
// gen for statement
// --------------------------------------------------------
te_smt = param.te_smt;
act_for = param.act_for;
select one te_class related by act_for->O_OBJ[R670]->TE_CLASS[R2019] where ( not selected.ExcludeFromGen );
if ( not_empty te_class )
  select any te_file from instances of TE_FILE;
  select any te_for from instances of TE_FOR;
  select one te_blk related by te_smt->TE_BLK[R2078];
  select any te_set from instances of TE_SET;
  select one v_var related by act_for->V_VAR[R614];
  select one te_var related by v_var->TE_VAR[R2039];
  select one set_v_var related by act_for->V_VAR[R652];
  select one set_te_var related by set_v_var->TE_VAR[R2039];
  te_for.isImplicit = act_for.is_implicit;
  te_for.class_name = te_class.GeneratedName;
  te_for.loop_variable = te_var.buffer;
  te_for.set_variable = set_te_var.buffer;
  ws = te_blk.indentation;
  te_smt.buffer2 = ws + "}}}";
  if ( te_for.isImplicit )
    d = ( te_for.class_name + " * " ) + ( te_for.loop_variable + "=0;" );
    ::blk_declaration_append( te_blk:te_blk, s:d );
  end if;
  iterator = "iter" + te_for.loop_variable;
  current_instance = "ii" + te_for.loop_variable;
  T::include(file:"c/t.smt.for.c");
  te_smt.OAL = "FOR EACH ${v_var.Name} IN ${set_v_var.Name}";
end if;
return T::body();
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("c627050b-390c-412f-bce1-58f476a6aa85",
	"05cdf67a-a5c4-4128-a823-bc3b8e170025",
	'te_smt',
	"20eb7827-fd8a-4b79-b705-c928064fb55d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("a21a762e-5893-4c13-8681-71cc8bd61288",
	"05cdf67a-a5c4-4128-a823-bc3b8e170025",
	'act_for',
	"cdc78e42-9cd6-4373-9b04-eba50aba4501",
	0,
	'',
	"c627050b-390c-412f-bce1-58f476a6aa85",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("cdc78e42-9cd6-4373-9b04-eba50aba4501",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<For Stmt>',
	'',
	'',
	'../Body/Body.xtuml');
INSERT INTO PE_PE
	VALUES ("05cdf67a-a5c4-4128-a823-bc3b8e170025",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("ede9a804-7e05-4aa2-b762-b63c9c9c7560",
	"00000000-0000-0000-0000-000000000000",
	'smt_ifs',
	'',
	'//
// ----------------------------------------------------------
// gen if statements
// ----------------------------------------------------------
select many act_ifs from instances of ACT_IF;
for each act_if in act_ifs
  select one te_smt related by act_if->ACT_SMT[R603]->TE_SMT[R2038];
  r = ::smt_if( te_smt:te_smt, act_if:act_if );
  ::smt_buffer_append( te_smt:te_smt, s:r );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("ede9a804-7e05-4aa2-b762-b63c9c9c7560",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("d67844f8-8253-4319-beb2-a3b400b8e2fb",
	"00000000-0000-0000-0000-000000000000",
	'smt_if',
	'',
	'// --------------------------------------------------------
// gen if statement
// --------------------------------------------------------
te_smt = param.te_smt;
act_if = param.act_if;
select any te_file from instances of TE_FILE;
select one condition_te_val related by act_if->V_VAL[R625]->TE_VAL[R2040];
select one te_blk related by te_smt->TE_BLK[R2078];
ws = te_blk.indentation;
te_smt.buffer2 = ws + "}";
T::include(file:"c/t.smt.if.c");
te_smt.OAL = "IF ( ${condition_te_val.OAL} )";
return T::body();
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("b85a1bbe-5676-40c2-be08-06d61efcfa80",
	"d67844f8-8253-4319-beb2-a3b400b8e2fb",
	'te_smt',
	"20eb7827-fd8a-4b79-b705-c928064fb55d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("e54f7be1-6ce4-4ff3-a6c5-ebf8d633e8c3",
	"d67844f8-8253-4319-beb2-a3b400b8e2fb",
	'act_if',
	"93460d33-1ae8-436f-a8be-11dbbfad9306",
	0,
	'',
	"b85a1bbe-5676-40c2-be08-06d61efcfa80",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("93460d33-1ae8-436f-a8be-11dbbfad9306",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<If Stmt>',
	'',
	'',
	'../Body/Body.xtuml');
INSERT INTO PE_PE
	VALUES ("d67844f8-8253-4319-beb2-a3b400b8e2fb",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("1d33e1f5-0999-44ed-901a-49de536a8097",
	"00000000-0000-0000-0000-000000000000",
	'smt_whiles',
	'',
	'// ----------------------------------------------------------
// gen while statements
// ----------------------------------------------------------
select many act_whls from instances of ACT_WHL;
for each act_whl in act_whls
  select one te_smt related by act_whl->ACT_SMT[R603]->TE_SMT[R2038];
  r = ::smt_while( te_smt:te_smt, act_whl:act_whl );
  ::smt_buffer_append( te_smt:te_smt, s:r );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("1d33e1f5-0999-44ed-901a-49de536a8097",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("850e65b9-561f-4be3-9924-a1a4765da06f",
	"00000000-0000-0000-0000-000000000000",
	'smt_while',
	'',
	'// --------------------------------------------------------
// gen while statement
// --------------------------------------------------------
te_smt = param.te_smt;
act_whl = param.act_whl;
select any te_file from instances of TE_FILE;
select one condition_te_val related by act_whl->V_VAL[R626]->TE_VAL[R2040];
select one te_blk related by te_smt->TE_BLK[R2078];
ws = te_blk.indentation;
te_smt.buffer2 = ws + "}";
T::include(file:"c/t.smt.while.c");
te_smt.OAL = "WHILE ( ${condition_te_val.OAL} )";
return T::body();
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("090245b5-20eb-4f3e-8c66-22f347d175d6",
	"850e65b9-561f-4be3-9924-a1a4765da06f",
	'te_smt',
	"20eb7827-fd8a-4b79-b705-c928064fb55d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("d0fa5761-b777-41bc-83f3-3129fe36badd",
	"850e65b9-561f-4be3-9924-a1a4765da06f",
	'act_whl',
	"4928f995-a119-4cb9-96e3-0d5ac8c9bcb6",
	0,
	'',
	"090245b5-20eb-4f3e-8c66-22f347d175d6",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("4928f995-a119-4cb9-96e3-0d5ac8c9bcb6",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<While Stmt>',
	'',
	'',
	'../Body/Body.xtuml');
INSERT INTO PE_PE
	VALUES ("850e65b9-561f-4be3-9924-a1a4765da06f",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("84c16547-9321-4a36-8784-10641da58cd6",
	"00000000-0000-0000-0000-000000000000",
	'smt_elses',
	'',
	'// ----------------------------------------------------------
// gen else statements
// ----------------------------------------------------------
select many act_es from instances of ACT_E;
for each act_e in act_es
  select one te_smt related by act_e->ACT_SMT[R603]->TE_SMT[R2038];
  r = ::smt_else( te_smt:te_smt, act_e:act_e );
  ::smt_buffer_append( te_smt:te_smt, s:r );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("84c16547-9321-4a36-8784-10641da58cd6",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("2ccbda1c-bb6e-4ab1-8911-b90acb121c26",
	"00000000-0000-0000-0000-000000000000",
	'smt_else',
	'',
	'// --------------------------------------------------------
// gen else statement
// --------------------------------------------------------
te_smt = param.te_smt;
act_e = param.act_e;
select any te_file from instances of TE_FILE;
select one te_blk related by te_smt->TE_BLK[R2078];
ws = te_blk.indentation;
te_smt.buffer2 = ws + "}";
T::include(file:"c/t.smt.else.c");
// Skip tracing ELSE because it falls between } and else.
//.assign te_smt.OAL = "ELSE"
te_smt.OAL = "";
return T::body();
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("256882a2-e0fb-4cdb-9595-748fe0c869e7",
	"2ccbda1c-bb6e-4ab1-8911-b90acb121c26",
	'te_smt',
	"20eb7827-fd8a-4b79-b705-c928064fb55d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("38299158-1a89-476d-8f7e-cf89317b1745",
	"2ccbda1c-bb6e-4ab1-8911-b90acb121c26",
	'act_e',
	"226ec964-d322-4524-b102-3584d0ef9d20",
	0,
	'',
	"256882a2-e0fb-4cdb-9595-748fe0c869e7",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("226ec964-d322-4524-b102-3584d0ef9d20",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Else Stmt>',
	'',
	'',
	'../Body/Body.xtuml');
INSERT INTO PE_PE
	VALUES ("2ccbda1c-bb6e-4ab1-8911-b90acb121c26",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("879758cb-f649-49da-9486-bc915dfc8e1b",
	"00000000-0000-0000-0000-000000000000",
	'smt_elifs',
	'',
	'//
// ----------------------------------------------------------
// gen elif statements
// ----------------------------------------------------------
select many act_els from instances of ACT_EL;
for each act_el in act_els
  select one te_smt related by act_el->ACT_SMT[R603]->TE_SMT[R2038];
  r = ::smt_elif( te_smt:te_smt, act_el:act_el );
  ::smt_buffer_append( te_smt:te_smt, s:r );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("879758cb-f649-49da-9486-bc915dfc8e1b",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("6dedfa92-5428-47d9-be46-329d021be79c",
	"00000000-0000-0000-0000-000000000000",
	'smt_elif',
	'',
	'// --------------------------------------------------------
// gen elif statement
// --------------------------------------------------------
te_smt = param.te_smt;
act_el = param.act_el;
select any te_file from instances of TE_FILE;
select one condition_te_val related by act_el->V_VAL[R659]->TE_VAL[R2040];
select one te_blk related by te_smt->TE_BLK[R2078];
ws = te_blk.indentation;
te_smt.buffer2 = ws + "}";
T::include(file:"c/t.smt.elif.c");
// Skip tracing ELIF because it falls between } and else.
//.assign te_smt.OAL = "ELIF ( ${condition.OAL} )"
te_smt.OAL = "";
return T::body();
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("ba511a0c-8994-4cfd-b720-c8bbd99f13b6",
	"6dedfa92-5428-47d9-be46-329d021be79c",
	'te_smt',
	"20eb7827-fd8a-4b79-b705-c928064fb55d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("514bf9b8-1bb1-4f69-88e5-0ddbcc32e0db",
	"6dedfa92-5428-47d9-be46-329d021be79c",
	'act_el',
	"17a98c4a-2218-46ab-b38b-b353ab34586a",
	0,
	'',
	"ba511a0c-8994-4cfd-b720-c8bbd99f13b6",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("17a98c4a-2218-46ab-b38b-b353ab34586a",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<ElseIf Stmt>',
	'',
	'',
	'../Body/Body.xtuml');
INSERT INTO PE_PE
	VALUES ("6dedfa92-5428-47d9-be46-329d021be79c",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("dad8f809-724a-49b7-8848-a55bcb28dbfb",
	"00000000-0000-0000-0000-000000000000",
	'smt_assigns',
	'',
	'//
// --------------------------------------------------------
// assignment to attribute statements
// --------------------------------------------------------
select many act_ais from instances of ACT_AI;
for each act_ai in act_ais
  select one te_smt related by act_ai->ACT_SMT[R603]->TE_SMT[R2038];
  r = ::smt_assign( te_smt:te_smt, act_ai:act_ai );
  ::smt_buffer_append( te_smt:te_smt, s:r );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("dad8f809-724a-49b7-8848-a55bcb28dbfb",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("546b7e15-4d23-4f4c-8ef7-c92329f83db7",
	"00000000-0000-0000-0000-000000000000",
	'smt_assign',
	'',
	'//
// --------------------------------------------------------
// gen_asgn_attr_statement
// --------------------------------------------------------
te_smt = param.te_smt;
act_ai = param.act_ai;
select any te_assign from instances of TE_ASSIGN;
select any te_file from instances of TE_FILE;
select any te_instance from instances of TE_INSTANCE;
select any te_set from instances of TE_SET;
select any te_string from instances of TE_STRING;
select any te_sys from instances of TE_SYS;
select one te_blk related by te_smt->TE_BLK[R2078];
ws = te_blk.indentation;
select one r_v_val related by act_ai->V_VAL[R609];
select one l_v_val related by act_ai->V_VAL[R689];
select one r_te_dt related by r_v_val->S_DT[R820]->TE_DT[R2021];
select one l_te_dt related by l_v_val->S_DT[R820]->TE_DT[R2021];
select one r_te_val related by r_v_val->TE_VAL[R2040];
select one l_te_val related by l_v_val->TE_VAL[R2040];
if ( empty l_te_dt )
  l_te_dt = r_te_dt;
end if;
te_assign.Core_Typ = r_te_dt.Core_Typ;
te_assign.rval_dimensions = r_te_val.dimensions;
te_assign.dimensions = l_te_val.dimensions;
te_assign.array_spec = l_te_val.array_spec;
te_assign.left_declaration = "";
te_assign.lval = l_te_val.buffer;
te_assign.rval = r_te_val.buffer;
r = ::V_VAL_drill_for_V_VAL_root( v_val:l_v_val );
root_v_val = r;
element_count = 0;
select one r_te_dim related by r_te_val->TE_DIM[R2079];
if ( not_empty r_te_dim )
  element_count = r_te_dim.elementCount;
end if;
te_assign.isImplicit = root_v_val.isImplicit;
if ( te_assign.isImplicit )
  select one root_te_val related by root_v_val->TE_VAL[R2040];
  te_assign.left_declaration = ( r_te_dt.ExtName + " " ) + root_te_val.buffer;
  if ( 8 == r_te_dt.Core_Typ )
    select one te_class related by root_v_val->V_IRF[R801]->V_VAR[R808]->V_INT[R814]->O_OBJ[R818]->TE_CLASS[R2019] where ( not selected.ExcludeFromGen );
    if ( not_empty te_class )
      te_assign.left_declaration = ( te_class.GeneratedName + " * " ) + ( root_te_val.buffer + ";" );
      ::blk_declaration_append( te_blk:te_blk, s:te_assign.left_declaration );
    end if;
  elif ( ( 9 == te_assign.Core_Typ ) or ( 21 == te_assign.Core_Typ ) )
    // First OAL use of inst_ref_set<Object> handle set. Initialize with class extent.
    selection_result_variable = te_assign.lval;
    d = "${te_set.scope}${te_set.base_class} ${selection_result_variable}_space={0}; ${te_set.scope}${te_set.base_class} * ${selection_result_variable} = &${selection_result_variable}_space;";
    ::blk_declaration_append( te_blk:te_blk, s:d );
    // Push deallocation into the block so that it is available at gen time for break/continue/return.
    d = ( ( te_set.module + te_set.clear ) + ( "( " + te_assign.lval ) ) + " );";
    ::blk_deallocation_append( te_blk:te_blk, s:d );
  elif ( ( 4 == r_te_dt.Core_Typ ) and ( te_sys.InstanceLoading ) )
    // CDS 128 is a bit arbitrary.  It is intended to be a reasonable
    // maximum for a transient array of strings needing initialization.
    // string
    d = te_assign.left_declaration + te_assign.array_spec;
    if ( "" == te_assign.array_spec )
      d = d + "=0";
    else
      if ( te_sys.InstanceLoading )
        d = d + "={0";
        if ( element_count < 128 )
          i = element_count - 1;
          // Only provide initializer for arrays of reasonable size.
          while ( i > 0 )
            i = i - 1;
            d = d + ",0";
          end while;
        end if;
        d = d + "}";
      end if;
    end if;
    d = d + ";";
    ::blk_declaration_append( te_blk:te_blk, s:d );
  else
    d = ( te_assign.left_declaration + te_assign.array_spec ) + ";";
    ::blk_declaration_append( te_blk:te_blk, s:d );
  end if;
end if;
is_parameter = false;
select one v_pvl related by r_v_val->V_PVL[R801];
if ( not_empty v_pvl )
  is_parameter = true;
end if;
T::include(file:"c/t.smt.assign.c");
te_smt.OAL = "ASSIGN ${l_te_val.OAL} = ${r_te_val.OAL}";
return T::body();
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("fa9cf8f1-8d2f-46d8-bae0-296be4b3a43b",
	"546b7e15-4d23-4f4c-8ef7-c92329f83db7",
	'te_smt',
	"20eb7827-fd8a-4b79-b705-c928064fb55d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("e21fc6c4-f04f-4e10-9ad6-ba2875de1d2d",
	"546b7e15-4d23-4f4c-8ef7-c92329f83db7",
	'act_ai',
	"7bee7ca6-822c-4add-96b4-6f0703edad25",
	0,
	'',
	"fa9cf8f1-8d2f-46d8-bae0-296be4b3a43b",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("7bee7ca6-822c-4add-96b4-6f0703edad25",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Assign to Member>',
	'',
	'',
	'../Instance Access/Instance Access.xtuml');
INSERT INTO PE_PE
	VALUES ("546b7e15-4d23-4f4c-8ef7-c92329f83db7",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("511e0c9c-e8c8-47b4-a47e-2cf44a297256",
	"00000000-0000-0000-0000-000000000000",
	'V_VAL_drill_for_V_VAL_root',
	'',
	'//
// Find the root of the given value instance.  We may need to
// recurse down in the case of structures and arrays.
v_val = param.v_val;
result = v_val;
select one root_v_val related by v_val->V_AER[R801]->V_VAL[R838];
if ( not_empty root_v_val )
  r = ::V_VAL_drill_for_V_VAL_root( v_val:root_v_val );
  result = r;
else
  select one root_v_val related by v_val->V_MVL[R801]->V_VAL[R837];
  if ( not_empty root_v_val )
    r = ::V_VAL_drill_for_V_VAL_root( v_val:root_v_val );
    result = r;
  end if;
end if;
return result;
',
	"6c890e9d-8533-4087-ac72-ea19e3290a3c",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("4bb4578f-a738-4e29-a116-747aa51d039a",
	"511e0c9c-e8c8-47b4-a47e-2cf44a297256",
	'v_val',
	"6c890e9d-8533-4087-ac72-ea19e3290a3c",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("6c890e9d-8533-4087-ac72-ea19e3290a3c",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Value>',
	'',
	'',
	'../Value/Value.xtuml');
INSERT INTO PE_PE
	VALUES ("511e0c9c-e8c8-47b4-a47e-2cf44a297256",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("de26016e-5068-4aaa-8f86-f70f21de7d00",
	"00000000-0000-0000-0000-000000000000",
	'smt_create_instances',
	'',
	'//
//
// --------------------------------------------------------
// create instance statements
// --------------------------------------------------------
select many act_crs from instances of ACT_CR;
for each act_cr in act_crs
  select one te_smt related by act_cr->ACT_SMT[R603]->TE_SMT[R2038];
  r = ::smt_create_instance( te_smt:te_smt, act_cr:act_cr );
  ::smt_buffer_append( te_smt:te_smt, s:r );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("de26016e-5068-4aaa-8f86-f70f21de7d00",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("5064f096-bd4c-481e-a7e5-b0a7e37ccc73",
	"00000000-0000-0000-0000-000000000000",
	'smt_create_instance',
	'',
	'//
// --------------------------------------------------------
// create instance statement
// --------------------------------------------------------
te_smt = param.te_smt;
act_cr = param.act_cr;
select one o_obj related by act_cr->O_OBJ[R671];
select one te_class related by o_obj->TE_CLASS[R2019] where ( not selected.ExcludeFromGen );
if ( not_empty te_class )
  select any te_file from instances of TE_FILE;
  select one te_blk related by te_smt->TE_BLK[R2078];
  ws = te_blk.indentation;
  select one v_var related by act_cr->V_VAR[R633];
  select one te_var related by v_var->TE_VAR[R2039];
  select one te_c related by te_class->TE_C[R2064];
  select any te_instance from instances of TE_INSTANCE;
  r = ::GetDomainTypeIDFromString( dom_name:te_c.Name );
  dom_id = r;
  r = ::AutoInitializeUniqueIDs( te_class:te_class, instance:te_var.buffer );
  init_uniques = r;
  if ( act_cr.is_implicit )
    d = ( te_class.GeneratedName + " * " ) + ( te_var.buffer + ";" );
    ::blk_declaration_append( te_blk:te_blk, s:d );
  end if;
  T::include(file:"c/t.smt.create_instance.c");
  te_smt.OAL = "CREATE OBJECT INSTANCE ${v_var.Name} OF ${te_class.Key_Lett}";
end if;
return T::body();
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("2099a5bc-5afb-475a-91e8-28c05dccf1db",
	"5064f096-bd4c-481e-a7e5-b0a7e37ccc73",
	'te_smt',
	"20eb7827-fd8a-4b79-b705-c928064fb55d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("764f5138-87b6-428b-a4d5-e646eacaf32c",
	"5064f096-bd4c-481e-a7e5-b0a7e37ccc73",
	'act_cr',
	"528c3b46-471a-4fed-92ed-ff4b84dc5137",
	0,
	'',
	"2099a5bc-5afb-475a-91e8-28c05dccf1db",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("528c3b46-471a-4fed-92ed-ff4b84dc5137",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Create>',
	'',
	'',
	'../Instance Access/Instance Access.xtuml');
INSERT INTO PE_PE
	VALUES ("5064f096-bd4c-481e-a7e5-b0a7e37ccc73",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("6252b0e1-a753-4384-ac45-4b1e1ff93ced",
	"00000000-0000-0000-0000-000000000000",
	'smt_delete_instances',
	'',
	'//
// --------------------------------------------------------
// delete instance statements
// --------------------------------------------------------
select many act_dels from instances of ACT_DEL;
del_count = 0;
for each act_del in act_dels
  select one te_smt related by act_del->ACT_SMT[R603]->TE_SMT[R2038];
  r = ::smt_delete_instance( te_smt:te_smt, act_del:act_del );
  ::smt_buffer_append( te_smt:te_smt, s:r );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("6252b0e1-a753-4384-ac45-4b1e1ff93ced",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("b1f60160-b7b7-413b-a755-bac2fe18a1eb",
	"00000000-0000-0000-0000-000000000000",
	'smt_delete_instance',
	'',
	'//
// --------------------------------------------------------
// delete instance statement
// --------------------------------------------------------
te_smt = param.te_smt;
act_del = param.act_del;
select one v_var related by act_del->V_VAR[R634];
select one te_class related by v_var->V_INT[R814]->O_OBJ[R818]->TE_CLASS[R2019] where ( not selected.ExcludeFromGen );
if ( not_empty te_class )
  select any te_file from instances of TE_FILE;
  select any te_instance from instances of TE_INSTANCE;
  select one te_blk related by te_smt->TE_BLK[R2078];
  ws = te_blk.indentation;
  select one te_var related by v_var->TE_VAR[R2039];
  select one te_c related by te_class->TE_C[R2064];
  r = ::GetDomainTypeIDFromString( dom_name:te_c.Name );
  dom_id = r;
  T::include(file:"c/t.smt.delete_instance.c");
  te_smt.OAL = "DELETE OBJECT INSTANCE ${v_var.Name}";
end if;
return T::body();
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("65a01b24-d03d-49c7-8ee1-1ce86816457c",
	"b1f60160-b7b7-413b-a755-bac2fe18a1eb",
	'te_smt',
	"20eb7827-fd8a-4b79-b705-c928064fb55d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("1c409d97-9987-486d-9d12-afb94ffae635",
	"b1f60160-b7b7-413b-a755-bac2fe18a1eb",
	'act_del',
	"e208c327-0aa9-4cd5-9c95-47be6ada1cd5",
	0,
	'',
	"65a01b24-d03d-49c7-8ee1-1ce86816457c",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("e208c327-0aa9-4cd5-9c95-47be6ada1cd5",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Delete>',
	'',
	'',
	'../Instance Access/Instance Access.xtuml');
INSERT INTO PE_PE
	VALUES ("b1f60160-b7b7-413b-a755-bac2fe18a1eb",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("b8de52f7-3f46-4134-b318-b073370775aa",
	"00000000-0000-0000-0000-000000000000",
	'smt_create_events_to_instance',
	'',
	'// --------------------------------------------------------
// create event instance to instance statements
// --------------------------------------------------------
select many e_ceis from instances of E_CEI;
for each e_cei in e_ceis
  select one e_csme related by e_cei->E_CSME[R704];
  select one te_smt related by e_csme->E_CES[R702]->E_ESS[R701]->ACT_SMT[R603]->TE_SMT[R2038];
  select one recipient_v_var related by e_cei->V_VAR[R711];
  select one recipient_te_var related by recipient_v_var->TE_VAR[R2039];
  r = ::smt_create_event( te_smt:te_smt, e_csme:e_csme, recipient:recipient_te_var.buffer, recipient_OAL:recipient_v_var.Name );
  ::smt_buffer_append( te_smt:te_smt, s:r );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("b8de52f7-3f46-4134-b318-b073370775aa",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("ac1f029e-377b-4975-9a35-57e65f00804b",
	"00000000-0000-0000-0000-000000000000",
	'smt_create_events_to_class',
	'',
	'//
// --------------------------------------------------------
// create event instance to class statements
// --------------------------------------------------------
select many e_ceas from instances of E_CEA;
for each e_cea in e_ceas
  select one e_csme related by e_cea->E_CSME[R704];
  select one te_smt related by e_csme->E_CES[R702]->E_ESS[R701]->ACT_SMT[R603]->TE_SMT[R2038];
  r = ::smt_create_event( te_smt:te_smt, e_csme:e_csme, recipient:"0", recipient_OAL:"CLASS" );
  ::smt_buffer_append( te_smt:te_smt, s:r );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("ac1f029e-377b-4975-9a35-57e65f00804b",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("444e3061-3b75-4ea0-8cc9-a2f00879c5d3",
	"00000000-0000-0000-0000-000000000000",
	'smt_create_events_to_creator',
	'',
	'//
// --------------------------------------------------------
// create event instance to creator statements
// --------------------------------------------------------
select many e_cecs from instances of E_CEC;
for each e_cec in e_cecs
  select one e_csme related by e_cec->E_CSME[R704];
  select one te_smt related by e_csme->E_CES[R702]->E_ESS[R701]->ACT_SMT[R603]->TE_SMT[R2038];
  r = ::smt_create_event( te_smt:te_smt, e_csme:e_csme, recipient:"0", recipient_OAL:"CREATOR" );
  ::smt_buffer_append( te_smt:te_smt, s:r );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("444e3061-3b75-4ea0-8cc9-a2f00879c5d3",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("53ae8919-aaad-439c-9707-beca26d3c18f",
	"00000000-0000-0000-0000-000000000000",
	'smt_create_event',
	'',
	'//
// --------------------------------------------------------
// create event instance statement
// --------------------------------------------------------
te_smt = param.te_smt;
e_csme = param.e_csme;
recipient = param.recipient;
recipient_OAL = param.recipient_OAL;
select one e_ces related by e_csme->E_CES[R702];
select one e_ess related by e_ces->E_ESS[R701];
select one sm_evt related by e_csme->SM_EVT[R706];
select one o_obj related by sm_evt->SM_SM[R502]->SM_ISM[R517]->O_OBJ[R518];
if ( empty o_obj )
  select one o_obj related by sm_evt->SM_SM[R502]->SM_ASM[R517]->O_OBJ[R519];
end if;
select one te_class related by o_obj->TE_CLASS[R2019] where ( not selected.ExcludeFromGen );
if ( not_empty te_class )
  select one sm_pevt related by sm_evt->SM_PEVT[R525];
  if ( not_empty sm_pevt )
    select any poly_sm_evt related by o_obj->SM_ISM[R518]->SM_SM[R517]->SM_EVT[R502] where ( selected.Drv_Lbl == ( sm_evt.Drv_Lbl + "*" ) );
    if ( not_empty poly_sm_evt )
      sm_evt = poly_sm_evt;
    end if;
  end if;
  select one te_evt related by sm_evt->TE_EVT[R2036];
  if ( te_evt.Used )
    select any te_file from instances of TE_FILE;
    select any te_eq from instances of TE_EQ;
    select any te_thread from instances of TE_THREAD;
    select any te_instance from instances of TE_INSTANCE;
    select one te_blk related by te_smt->TE_BLK[R2078];
    ws = te_blk.indentation;
    select one v_var related by e_ces->V_VAR[R710];
    select one te_var related by v_var->TE_VAR[R2039];
    select many v_pars related by e_ess->V_PAR[R700];
    parameters = "";
    parameter_OAL = "";
    if ( not_empty v_pars )
      delimeter = "";
      for each v_par in v_pars
        select one par_te_dt related by v_par->V_VAL[R800]->S_DT[R820]->TE_DT[R2021];
        select one par_te_val related by v_par->V_VAL[R800]->TE_VAL[R2040];
        r = ::t_oal_smt_event_parameters( evt_msg_var:te_var.buffer, parameter:v_par.Name, value:par_te_val.buffer, value_type:par_te_dt.Core_Typ, ws:te_blk.indentation );
        parameters = parameters + r;
        parameter_OAL = ( parameter_OAL + delimeter ) + par_te_val.OAL;
        delimeter = ", ";
      end for;
    end if;
    if ( e_ces.is_implicit )
      d = "";
      if ( "" == parameters )
        d = ( te_eq.base_event_type + " * " ) + ( te_var.buffer + ";" );
      else
        d = ( te_evt.GeneratedName + " * " ) + ( te_var.buffer + ";" );
      end if;
      ::blk_declaration_append( te_blk:te_blk, s:d );
    end if;
    T::include(file:"c/t.smt.create_event.c");
    te_smt.OAL = "CREATE EVENT INSTANCE ${v_var.Name}( ${parameter_OAL} ) TO ${recipient_OAL}";
  end if;
end if;
return T::body();
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("3624a7be-60d0-4969-a54c-cdf9b6b61303",
	"53ae8919-aaad-439c-9707-beca26d3c18f",
	'te_smt',
	"20eb7827-fd8a-4b79-b705-c928064fb55d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("fe79177e-6301-45d5-89bf-f961262685ea",
	"53ae8919-aaad-439c-9707-beca26d3c18f",
	'e_csme',
	"2e981d36-5dd1-42db-b777-f4ebdad03733",
	0,
	'',
	"3624a7be-60d0-4969-a54c-cdf9b6b61303",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("2e981d36-5dd1-42db-b777-f4ebdad03733",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Create SM Event Statement>',
	'',
	'',
	'../Event/Event.xtuml');
INSERT INTO S_SPARM
	VALUES ("046bc630-97e4-4b34-a788-566bad18cab7",
	"53ae8919-aaad-439c-9707-beca26d3c18f",
	'recipient',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"fe79177e-6301-45d5-89bf-f961262685ea",
	'');
INSERT INTO S_SPARM
	VALUES ("605f1c23-c8ed-4346-a6cf-d50f2c3b4e82",
	"53ae8919-aaad-439c-9707-beca26d3c18f",
	'recipient_OAL',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"046bc630-97e4-4b34-a788-566bad18cab7",
	'');
INSERT INTO PE_PE
	VALUES ("53ae8919-aaad-439c-9707-beca26d3c18f",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("fea24bc4-ac1c-4a23-ba32-65bf6b4912ad",
	"00000000-0000-0000-0000-000000000000",
	'smt_relates',
	'',
	'//
// --------------------------------------------------------
//  relate statements
// --------------------------------------------------------
select many act_rels from instances of ACT_REL;
for each act_rel in act_rels
  select one te_smt related by act_rel->ACT_SMT[R603]->TE_SMT[R2038];
  r = ::smt_relate( te_smt:te_smt, act_rel:act_rel );
  ::smt_buffer_append( te_smt:te_smt, s:r );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("fea24bc4-ac1c-4a23-ba32-65bf6b4912ad",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("67c315c8-6998-4f6a-8a76-7f0d77840b43",
	"00000000-0000-0000-0000-000000000000",
	'smt_relate',
	'',
	'//
// --------------------------------------------------------
//  relate statement
// --------------------------------------------------------
te_smt = param.te_smt;
act_rel = param.act_rel;
select one one_v_var related by act_rel->V_VAR[R615];
select one one_o_obj related by one_v_var->V_INT[R814]->O_OBJ[R818];
select one te_class related by one_o_obj->TE_CLASS[R2019] where ( not selected.ExcludeFromGen );
if ( not_empty te_class )
  select any te_file from instances of TE_FILE;
  select any te_target from instances of TE_TARGET;
  select one te_blk related by te_smt->TE_BLK[R2078];
  ws = te_blk.indentation;
  select one one_te_var related by one_v_var->TE_VAR[R2039];
  select one oth_v_var related by act_rel->V_VAR[R616];
  select one oth_te_var related by oth_v_var->TE_VAR[R2039];
  select one oth_o_obj related by oth_v_var->V_INT[R814]->O_OBJ[R818];
  select one r_rel related by act_rel->R_REL[R653];
  r1 = ::is_reflexive( r_rel:r_rel );
  is_reflexive = r1;
  r2 = ::TE_REL_IsLeftFormalizer( left_o_obj:one_o_obj, r_rel:r_rel, rel_phrase:act_rel.relationship_phrase );
  left_is_formalizer = r2;
  o_obj = oth_o_obj;
  if ( left_is_formalizer )
    o_obj = one_o_obj;
  end if;
  r = ::GetRelateToName( o_obj:o_obj, r_rel:r_rel, rel_phrase:act_rel.relationship_phrase );
  relate_method = r;
  select one te_class related by o_obj->TE_CLASS[R2019];
  thismodule = "";
  if ( "C" != te_target.language )
    thismodule = ", thismodule";
  end if;
  T::include(file:"c/t.smt.relate.c");
  te_smt.OAL = "RELATE ${one_v_var.Name} TO ${oth_v_var.Name} ACROSS R$t{r_rel.Numb}";
end if;
return T::body();
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("cec9ad1a-e9c7-4727-a184-92ea0108ae9a",
	"67c315c8-6998-4f6a-8a76-7f0d77840b43",
	'te_smt',
	"20eb7827-fd8a-4b79-b705-c928064fb55d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("5b936c31-3c6f-4c1d-9da6-5e9156f6e872",
	"67c315c8-6998-4f6a-8a76-7f0d77840b43",
	'act_rel',
	"f1fd3e4e-7abd-4897-838f-91d7ad1f8bdd",
	0,
	'',
	"cec9ad1a-e9c7-4727-a184-92ea0108ae9a",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("f1fd3e4e-7abd-4897-838f-91d7ad1f8bdd",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Relate>',
	'',
	'',
	'../Relate And Unrelate/Relate And Unrelate.xtuml');
INSERT INTO PE_PE
	VALUES ("67c315c8-6998-4f6a-8a76-7f0d77840b43",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("147ae781-5342-4d33-8bd1-92370d1bb481",
	"00000000-0000-0000-0000-000000000000",
	'smt_relate_usings',
	'',
	'//
// --------------------------------------------------------
select many act_rus from instances of ACT_RU;
for each act_ru in act_rus
  select one te_smt related by act_ru->ACT_SMT[R603]->TE_SMT[R2038];
  r = ::smt_relate_using( te_smt:te_smt, act_ru:act_ru );
  ::smt_buffer_append( te_smt:te_smt, s:r );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("147ae781-5342-4d33-8bd1-92370d1bb481",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("4ba49980-0634-4fab-a736-49a0fae0266a",
	"00000000-0000-0000-0000-000000000000",
	'smt_relate_using',
	'',
	'//
// --------------------------------------------------------
te_smt = param.te_smt;
act_ru = param.act_ru;
select one te_blk related by te_smt->TE_BLK[R2078];
ws = te_blk.indentation;
select one r_rel related by act_ru->R_REL[R654];
r = ::is_reflexive( r_rel:r_rel );
is_reflexive = r;
one_rel_phrase = "";
oth_rel_phrase = "";
if ( is_reflexive )
  select one aone related by r_rel->R_ASSOC[R206]->R_AONE[R209];
  select one aoth related by r_rel->R_ASSOC[R206]->R_AOTH[R210];
  select one one_obj related by act_ru->V_VAR[R617]->V_INT[R814]->O_OBJ[R818];
  if ( one_obj.Obj_ID == aone.Obj_ID )
    if ( aone.Txt_Phrs == act_ru.relationship_phrase )
      one_rel_phrase = aone.Txt_Phrs;
      oth_rel_phrase = aoth.Txt_Phrs;
    else
      one_rel_phrase = aoth.Txt_Phrs;
      oth_rel_phrase = aone.Txt_Phrs;
    end if;
  else
    if ( aoth.Txt_Phrs == act_ru.relationship_phrase )
      one_rel_phrase = aoth.Txt_Phrs;
      oth_rel_phrase = aone.Txt_Phrs;
    else
      one_rel_phrase = aone.Txt_Phrs;
      oth_rel_phrase = aoth.Txt_Phrs;
    end if;
  end if;
end if;
select one one_v_var related by act_ru->V_VAR[R617];
select one one_te_var related by one_v_var->TE_VAR[R2039];
select one one_o_obj related by one_v_var->V_INT[R814]->O_OBJ[R818];
select one oth_v_var related by act_ru->V_VAR[R618];
select one oth_te_var related by oth_v_var->TE_VAR[R2039];
select one oth_o_obj related by oth_v_var->V_INT[R814]->O_OBJ[R818];
select one ass_v_var related by act_ru->V_VAR[R619];
select one ass_te_var related by ass_v_var->TE_VAR[R2039];
select one ass_o_obj related by ass_v_var->V_INT[R814]->O_OBJ[R818];
select one ass_te_class related by ass_o_obj->TE_CLASS[R2019] where ( not selected.ExcludeFromGen );
if ( not_empty ass_te_class )
  select any te_file from instances of TE_FILE;
  select any te_target from instances of TE_TARGET;
  thismodule = "";
  if ( "C" != te_target.language )
    thismodule = ", thismodule";
  end if;
  r1 = ::GetRelateToName( o_obj:ass_o_obj, r_rel:r_rel, rel_phrase:act_ru.relationship_phrase );
  relate_method = r1;
  left_obj_is_aone = false;
  select one r_aone related by r_rel->R_ASSOC[R206]->R_AONE[R209];
  if ( one_o_obj.Obj_ID == r_aone.Obj_ID )
    left_obj_is_aone = true;
  end if;
  T::include(file:"c/t.smt.relate_using.c");
  te_smt.OAL = "RELATE ${one_te_var.OAL} TO ${oth_te_var.OAL} ACROSS R$t{r_rel.Numb} USING ${ass_te_var.OAL}";
end if;
return T::body();
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("fcdc480f-344a-49b9-8f07-aa66633f9dbd",
	"4ba49980-0634-4fab-a736-49a0fae0266a",
	'te_smt',
	"20eb7827-fd8a-4b79-b705-c928064fb55d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("ad7fe72f-fd75-4768-a0b7-5af818bcfa1e",
	"4ba49980-0634-4fab-a736-49a0fae0266a",
	'act_ru',
	"0bc12e99-e525-4061-9a2f-722aa9576102",
	0,
	'',
	"fcdc480f-344a-49b9-8f07-aa66633f9dbd",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("0bc12e99-e525-4061-9a2f-722aa9576102",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Relate Using>',
	'',
	'',
	'../Relate And Unrelate/Relate And Unrelate.xtuml');
INSERT INTO PE_PE
	VALUES ("4ba49980-0634-4fab-a736-49a0fae0266a",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("1dd6c58a-335f-40af-9de9-26859229dda7",
	"00000000-0000-0000-0000-000000000000",
	'smt_unrelates',
	'',
	'//
// --------------------------------------------------------
select many act_unrs from instances of ACT_UNR;
for each act_unr in act_unrs
  select one te_smt related by act_unr->ACT_SMT[R603]->TE_SMT[R2038];
  r = ::smt_unrelate( te_smt:te_smt, act_unr:act_unr );
  ::smt_buffer_append( te_smt:te_smt, s:r );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("1dd6c58a-335f-40af-9de9-26859229dda7",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("d44b47db-026d-4acd-a7fa-89a1d319fbdd",
	"00000000-0000-0000-0000-000000000000",
	'smt_unrelate',
	'',
	'//
// --------------------------------------------------------
te_smt = param.te_smt;
act_unr = param.act_unr;
select one one_v_var related by act_unr->V_VAR[R620];
select one one_o_obj related by one_v_var->V_INT[R814]->O_OBJ[R818];
select one te_class related by one_o_obj->TE_CLASS[R2019] where ( not selected.ExcludeFromGen );
if ( not_empty te_class )
  select any te_file from instances of TE_FILE;
  select any te_target from instances of TE_TARGET;
  select one te_blk related by te_smt->TE_BLK[R2078];
  ws = te_blk.indentation;
  select one one_te_var related by one_v_var->TE_VAR[R2039];
  select one oth_v_var related by act_unr->V_VAR[R621];
  select one oth_te_var related by oth_v_var->TE_VAR[R2039];
  select one oth_o_obj related by oth_v_var->V_INT[R814]->O_OBJ[R818];
  select one r_rel related by act_unr->R_REL[R655];
  r1 = ::is_reflexive( r_rel:r_rel );
  is_reflexive = r1;
  r2 = ::TE_REL_IsLeftFormalizer( left_o_obj:one_o_obj, r_rel:r_rel, rel_phrase:act_unr.relationship_phrase );
  left_is_formalizer = r2;
  o_obj = oth_o_obj;
  if ( left_is_formalizer )
    o_obj = one_o_obj;
  end if;
  r = ::GetUnrelateFromName( o_obj:o_obj, r_rel:r_rel, rel_phrase:act_unr.relationship_phrase );
  unrelate_method = r;
  select one te_class related by o_obj->TE_CLASS[R2019];
  thismodule = "";
  if ( "C" != te_target.language )
    thismodule = ", thismodule";
  end if;
  T::include(file:"c/t.smt.unrelate.c");
  te_smt.OAL = "UNRELATE ${one_te_var.OAL} FROM ${oth_te_var.OAL} ACROSS R$t{r_rel.Numb}";
end if;
return T::body();
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("88a240b9-9848-4af9-8489-35ca63c3d9c1",
	"d44b47db-026d-4acd-a7fa-89a1d319fbdd",
	'te_smt',
	"20eb7827-fd8a-4b79-b705-c928064fb55d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("e8182676-9c09-4f68-af5a-6dea8147be61",
	"d44b47db-026d-4acd-a7fa-89a1d319fbdd",
	'act_unr',
	"027da7b2-41e8-496d-bd23-4e885028c3fa",
	0,
	'',
	"88a240b9-9848-4af9-8489-35ca63c3d9c1",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("027da7b2-41e8-496d-bd23-4e885028c3fa",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Unrelate>',
	'',
	'',
	'../Relate And Unrelate/Relate And Unrelate.xtuml');
INSERT INTO PE_PE
	VALUES ("d44b47db-026d-4acd-a7fa-89a1d319fbdd",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("5d8acaca-48d6-4a62-ba35-c5756a9b4c3d",
	"00000000-0000-0000-0000-000000000000",
	'smt_unrelate_usings',
	'',
	'//
// --------------------------------------------------------
select many act_urus from instances of ACT_URU;
for each act_uru in act_urus
  select one te_smt related by act_uru->ACT_SMT[R603]->TE_SMT[R2038];
  r = ::smt_unrelate_using( te_smt:te_smt, act_uru:act_uru );
  ::smt_buffer_append( te_smt:te_smt, s:r );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("5d8acaca-48d6-4a62-ba35-c5756a9b4c3d",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("f116629f-239a-499a-9a7f-c8a5e6df9cee",
	"00000000-0000-0000-0000-000000000000",
	'smt_unrelate_using',
	'',
	'//
te_smt = param.te_smt;
act_uru = param.act_uru;
select one te_blk related by te_smt->TE_BLK[R2078];
ws = te_blk.indentation;
select one r_rel related by act_uru->R_REL[R656];
r = ::is_reflexive( r_rel:r_rel );
is_reflexive = r;
one_rel_phrase = "";
oth_rel_phrase = "";
if ( is_reflexive )
  select one aone related by r_rel->R_ASSOC[R206]->R_AONE[R209];
  select one aoth related by r_rel->R_ASSOC[R206]->R_AOTH[R210];
  select one one_obj related by act_uru->V_VAR[R622]->V_INT[R814]->O_OBJ[R818];
  if ( one_obj.Obj_ID == aone.Obj_ID )
    if ( aone.Txt_Phrs == act_uru.relationship_phrase )
      one_rel_phrase = aone.Txt_Phrs;
      oth_rel_phrase = aoth.Txt_Phrs;
    else
      one_rel_phrase = aoth.Txt_Phrs;
      oth_rel_phrase = aone.Txt_Phrs;
    end if;
  else
    if ( aoth.Txt_Phrs == act_uru.relationship_phrase )
      one_rel_phrase = aoth.Txt_Phrs;
      oth_rel_phrase = aone.Txt_Phrs;
    else
      one_rel_phrase = aone.Txt_Phrs;
      oth_rel_phrase = aoth.Txt_Phrs;
    end if;
  end if;
end if;
select one one_v_var related by act_uru->V_VAR[R622];
select one one_te_var related by one_v_var->TE_VAR[R2039];
select one one_o_obj related by one_v_var->V_INT[R814]->O_OBJ[R818];
select one oth_v_var related by act_uru->V_VAR[R623];
select one oth_te_var related by oth_v_var->TE_VAR[R2039];
select one oth_o_obj related by oth_v_var->V_INT[R814]->O_OBJ[R818];
select one ass_v_var related by act_uru->V_VAR[R624];
select one ass_te_var related by ass_v_var->TE_VAR[R2039];
select one ass_o_obj related by ass_v_var->V_INT[R814]->O_OBJ[R818];
select one ass_te_class related by ass_o_obj->TE_CLASS[R2019] where ( not selected.ExcludeFromGen );
if ( not_empty ass_te_class )
  select any te_file from instances of TE_FILE;
  select any te_target from instances of TE_TARGET;
  thismodule = "";
  if ( "C" != te_target.language )
    thismodule = ", thismodule";
  end if;
  r1 = ::GetUnrelateFromName( o_obj:ass_o_obj, r_rel:r_rel, rel_phrase:act_uru.relationship_phrase );
  unrelate_method = r1;
  left_obj_is_aone = false;
  select one r_aone related by r_rel->R_ASSOC[R206]->R_AONE[R209];
  if ( one_o_obj.Obj_ID == r_aone.Obj_ID )
    left_obj_is_aone = true;
  end if;
  T::include(file:"c/t.smt.unrelate_using.c");
  te_smt.OAL = "UNRELATE ${one_te_var.OAL} FROM ${oth_te_var.OAL} ACROSS R$t{r_rel.Numb} USING ${ass_te_var.OAL}";
end if;
return T::body();
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("ddd05874-54aa-4446-820e-cf259445079c",
	"f116629f-239a-499a-9a7f-c8a5e6df9cee",
	'te_smt',
	"20eb7827-fd8a-4b79-b705-c928064fb55d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("eafb6252-d296-41e8-8f0d-ea44d530d65e",
	"f116629f-239a-499a-9a7f-c8a5e6df9cee",
	'act_uru',
	"0241bbac-67e0-4ca8-a2ab-5ee6aac4a6a4",
	0,
	'',
	"ddd05874-54aa-4446-820e-cf259445079c",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("0241bbac-67e0-4ca8-a2ab-5ee6aac4a6a4",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Unrelate Using>',
	'',
	'',
	'../Relate And Unrelate/Relate And Unrelate.xtuml');
INSERT INTO PE_PE
	VALUES ("f116629f-239a-499a-9a7f-c8a5e6df9cee",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("4c360cd8-2888-413d-9093-403292dc39f5",
	"00000000-0000-0000-0000-000000000000",
	'smt_selects',
	'',
	'//
// --------------------------------------------------------
// select statements
// --------------------------------------------------------
select many act_fios from instances of ACT_FIO;
for each act_fio in act_fios
  select one te_smt related by act_fio->ACT_SMT[R603]->TE_SMT[R2038];
  r = ::smt_select( te_smt:te_smt, act_fio:act_fio );
  ::smt_buffer_append( te_smt:te_smt, s:r );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("4c360cd8-2888-413d-9093-403292dc39f5",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("a770046c-145b-403b-bfa7-eab36ef16f74",
	"00000000-0000-0000-0000-000000000000",
	'smt_select',
	'',
	'//
// --------------------------------------------------------
// select instance statement
// --------------------------------------------------------
te_smt = param.te_smt;
act_fio = param.act_fio;
select one o_obj related by act_fio->O_OBJ[R677];
select one te_class related by o_obj->TE_CLASS[R2019] where ( not selected.ExcludeFromGen );
if ( not_empty te_class )
  select any te_file from instances of TE_FILE;
  select any te_extent from instances of TE_EXTENT;
  select any te_select from instances of TE_SELECT;
  select any te_set from instances of TE_SET;
  select one te_blk related by te_smt->TE_BLK[R2078];
  ws = te_blk.indentation;
  select one v_var related by act_fio->V_VAR[R639];
  select one te_var related by v_var->TE_VAR[R2039];
  te_select.is_implicit = act_fio.is_implicit;
  te_select.class_name = te_class.GeneratedName;
  te_select.target_class_name = te_class.Name;
  te_select.multiplicity = act_fio.cardinality;
  te_select.var_name = te_var.buffer;
  r = ::GetFixedSizeClassExtentInfo( te_class:te_class );
  extent = r;
  if ( "any" == te_select.multiplicity )
    if ( te_select.is_implicit )
      // Declare (first OAL usage of) inst_ref<Object> handle variable.
      d = ( te_select.class_name + " * " ) + ( te_select.var_name + "=0;" );
      ::blk_declaration_append( te_blk:te_blk, s:d );
    end if;
  elif ( "many" == te_select.multiplicity )
    if ( te_select.is_implicit )
      // First OAL use of inst_ref_set<Object> handle set. Initialize with class extent.
      selection_result_variable = te_select.var_name;
      d = "${te_set.scope}${te_set.base_class} ${selection_result_variable}_space={0}; ${te_set.scope}${te_set.base_class} * ${selection_result_variable} = &${selection_result_variable}_space;";
      ::blk_declaration_append( te_blk:te_blk, s:d );
      // Push deallocation into the block so that it is available at gen time for break/continue/return.
      d = ( ( te_set.module + te_set.clear ) + ( "( " + te_select.var_name ) ) + " );";
      ::blk_deallocation_append( te_blk:te_blk, s:d );
    end if;
  else
    T::print(s:"\nERROR:  select ${te_select.multiplicity} is not any or many.");
    T::exit(i:101);
  end if;
  T::include(file:"c/t.smt.select.c");
  te_smt.OAL = "SELECT ${act_fio.cardinality} ${v_var.Name} FROM INSTANCES OF ${te_class.Key_Lett}";
end if;
return T::body();
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("7907efe7-e740-410a-9f75-cb4576d5afd2",
	"a770046c-145b-403b-bfa7-eab36ef16f74",
	'te_smt',
	"20eb7827-fd8a-4b79-b705-c928064fb55d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("d23cac56-ae27-4042-8065-844aa18427a1",
	"a770046c-145b-403b-bfa7-eab36ef16f74",
	'act_fio',
	"7c224141-b812-43f9-b35b-3b50adc6266d",
	0,
	'',
	"7907efe7-e740-410a-9f75-cb4576d5afd2",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("7c224141-b812-43f9-b35b-3b50adc6266d",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Select From Instances>',
	'',
	'',
	'../Selection/Selection.xtuml');
INSERT INTO PE_PE
	VALUES ("a770046c-145b-403b-bfa7-eab36ef16f74",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("37a6f34c-76ef-4f04-849c-9363d2814008",
	"00000000-0000-0000-0000-000000000000",
	'smt_select_wheres',
	'',
	'//
// --------------------------------------------------------
// select instance where statements
// --------------------------------------------------------
select many act_fiws from instances of ACT_FIW;
for each act_fiw in act_fiws
  select one te_smt related by act_fiw->ACT_SMT[R603]->TE_SMT[R2038];
  r = ::smt_select_where( te_smt:te_smt, act_fiw:act_fiw );
  ::smt_buffer_append( te_smt:te_smt, s:r );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("37a6f34c-76ef-4f04-849c-9363d2814008",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("15decbfb-ada6-4159-b6e7-69e7bc84c4a6",
	"00000000-0000-0000-0000-000000000000",
	'v_val_find_v_slr_return_buffer',
	'',
	'//
//
//
// Recursively drill down into the where clause expression marking
// selected attributes along the way.
//
v_val = param.v_val;
result = "selected";
select one v_slr related by v_val->V_SLR[R801];
if ( not_empty v_slr )
  select one te_val related by v_val->TE_VAL[R2040];
  result = te_val.buffer;
else
  select one v_avl related by v_val->V_AVL[R801];
  if ( not_empty v_avl )
    select one root_v_val related by v_avl->V_VAL[R807];
    r = ::v_val_find_v_slr_return_buffer( v_val:root_v_val );
    result = r;
  else
    select one v_bin related by v_val->V_BIN[R801];
    if ( not_empty v_bin )
      select one left_v_val related by v_bin->V_VAL[R802];
      r = ::v_val_find_v_slr_return_buffer( v_val:left_v_val );
      result = r;
      if ( "selected" != result )
        select one right_v_val related by v_bin->V_VAL[R803];
        r = ::v_val_find_v_slr_return_buffer( v_val:right_v_val );
        result = r;
      end if;
    else
      select one v_uny related by v_val->V_UNY[R801];
      if ( not_empty v_uny )
        select one uny_v_val related by v_uny->V_VAL[R804];
        r = ::v_val_find_v_slr_return_buffer( v_val:uny_v_val );
        result = r;
      end if;
    end if;
  end if;
end if;
return result;
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("33677631-c7f3-4ed4-a1c8-f77106dab040",
	"15decbfb-ada6-4159-b6e7-69e7bc84c4a6",
	'v_val',
	"6c890e9d-8533-4087-ac72-ea19e3290a3c",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("15decbfb-ada6-4159-b6e7-69e7bc84c4a6",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("36e4b901-34dd-462f-a458-852180f6fff9",
	"00000000-0000-0000-0000-000000000000",
	'smt_select_where',
	'',
	'// --------------------------------------------------------
// select instance where statement
// --------------------------------------------------------
te_smt = param.te_smt;
act_fiw = param.act_fiw;
select one o_obj related by act_fiw->O_OBJ[R676];
select one te_class related by o_obj->TE_CLASS[R2019] where ( not selected.ExcludeFromGen );
if ( not_empty te_class )
  select any te_extent from instances of TE_EXTENT;
  select any te_file from instances of TE_FILE;
  select any te_select_where from instances of TE_SELECT_WHERE;
  select any te_set from instances of TE_SET;
  select one te_blk related by te_smt->TE_BLK[R2078];
  ws = te_blk.indentation;
  select one v_var related by act_fiw->V_VAR[R665];
  select one te_var related by v_var->TE_VAR[R2039];
  select one where_v_val related by act_fiw->V_VAL[R610];
  select one where_te_val related by where_v_val->TE_VAL[R2040];
  r = ::v_val_find_v_slr_return_buffer( v_val:where_v_val );
  slrname = r;
  te_select_where.is_implicit = act_fiw.is_implicit;
  te_select_where.class_name = te_class.GeneratedName;
  te_select_where.oal_var_name = o_obj.Name;
  te_select_where.class_description = o_obj.Descrip;
  te_select_where.multiplicity = act_fiw.cardinality;
  te_select_where.var_name = te_var.buffer;
  te_select_where.selected_var_name = slrname;
  te_select_where.where_clause = where_te_val.buffer;
  te_select_where.special = false;
  if ( "any" == te_select_where.multiplicity )
    if ( te_select_where.is_implicit )
      // Declare (first OAL usage of) inst_ref<Object> handle variable.
      d = ( te_select_where.class_name + " * " ) + ( te_select_where.var_name + "=0;" );
      ::blk_declaration_append( te_blk:te_blk, s:d );
    end if;
  elif ( "many" == te_select_where.multiplicity )
    if ( te_select_where.is_implicit )
      // First OAL usage of inst_ref_set<Object> handle set
      selection_result_variable = te_select_where.var_name;
      d = "${te_set.scope}${te_set.base_class} ${selection_result_variable}_space={0}; ${te_set.scope}${te_set.base_class} * ${selection_result_variable} = &${selection_result_variable}_space;";
      ::blk_declaration_append( te_blk:te_blk, s:d );
      // Push deallocation into the block so that it is available at gen time for break/continue/return.
      d = ( ( te_set.module + te_set.clear ) + ( "( " + te_select_where.var_name ) ) + " );";
      ::blk_deallocation_append( te_blk:te_blk, s:d );
    end if;
  else
    T::print(s:"\nERROR:  stmt_select_from_instances_of_where: Select ${te_select_where.multiplicity} is not any or many.");
    T::exit(i:101);
  end if;
  r = ::GetFixedSizeClassExtentInfo( te_class:te_class );
  extent = r;
  r = ::ExpandNonOptimizedSpecialWhereComparison( o_obj:o_obj, special:te_select_where.special, selected_var_name:te_select_where.selected_var_name );
  where_comp = r;
  iterator = ( "iter" + te_select_where.var_name ) + te_select_where.class_name;
  // *** Built in select any special where clause.
  select any o_id related by o_obj->O_ID[R104] where ( selected.Oid_ID == -1 );
  select one te_where related by o_id->TE_WHERE[R2032];
  r = ::CreateSpecialWhereComparisonArguments( te_class:te_class, o_id:o_id );
  arguments = r;
  T::include(file:"c/t.smt.select_where.c");
  te_smt.OAL = "SELECT ${act_fiw.cardinality} ${v_var.Name} FROM INSTANCES OF ${te_class.Key_Lett} WHERE ${where_te_val.OAL}";
end if;
return T::body();
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("dc64c8ce-1038-4d35-8206-20f8624dca1a",
	"36e4b901-34dd-462f-a458-852180f6fff9",
	'te_smt',
	"20eb7827-fd8a-4b79-b705-c928064fb55d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("2c015c08-bcba-44b6-bf81-2ca9c1dfc92a",
	"36e4b901-34dd-462f-a458-852180f6fff9",
	'act_fiw',
	"95efa184-df88-42fe-8068-f0050e6fff8a",
	0,
	'',
	"dc64c8ce-1038-4d35-8206-20f8624dca1a",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("95efa184-df88-42fe-8068-f0050e6fff8a",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Select From Instances Where>',
	'',
	'',
	'../Selection/Selection.xtuml');
INSERT INTO PE_PE
	VALUES ("36e4b901-34dd-462f-a458-852180f6fff9",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("7976b8fe-e5ce-45e2-92ef-d660c56808ee",
	"00000000-0000-0000-0000-000000000000",
	'smt_select_relateds',
	'',
	'// --------------------------------------------------------
// select instance related by statement
// --------------------------------------------------------
select many act_srs from instances of ACT_SR;
for each act_sr in act_srs
  select one act_sel related by act_sr->ACT_SEL[R664];
  select one te_smt related by act_sel->ACT_SMT[R603]->TE_SMT[R2038];
  r = ::smt_select_related( te_smt:te_smt, act_sel:act_sel, by_where:false );
  ::smt_buffer_append( te_smt:te_smt, s:r );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("7976b8fe-e5ce-45e2-92ef-d660c56808ee",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("e6cba735-ce45-46dc-a8d0-aaee7f9909c0",
	"00000000-0000-0000-0000-000000000000",
	'smt_select_related_wheres',
	'',
	'//
// --------------------------------------------------------
// select related by where statements
// --------------------------------------------------------
select many act_srws from instances of ACT_SRW;
for each act_srw in act_srws
  select one act_sel related by act_srw->ACT_SEL[R664];
  select one te_smt related by act_sel->ACT_SMT[R603]->TE_SMT[R2038];
  r = ::smt_select_related( te_smt:te_smt, act_sel:act_sel, by_where:true );
  ::smt_buffer_append( te_smt:te_smt, s:r );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("e6cba735-ce45-46dc-a8d0-aaee7f9909c0",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("0f5bcdcb-4c68-4c83-b94a-eab1a118e208",
	"00000000-0000-0000-0000-000000000000",
	'smt_generate_precreated_events',
	'',
	'//
// --------------------------------------------------------
// generate pre-created event statements
// --------------------------------------------------------
select many e_gprs from instances of E_GPR;
for each e_gpr in e_gprs
  select one te_smt related by e_gpr->ACT_SMT[R603]->TE_SMT[R2038];
  r = ::smt_generate_precreated_event( te_smt:te_smt, e_gpr:e_gpr );
  ::smt_buffer_append( te_smt:te_smt, s:r );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("0f5bcdcb-4c68-4c83-b94a-eab1a118e208",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("c75ff9a0-4922-4244-a206-b21db4cd898e",
	"00000000-0000-0000-0000-000000000000",
	'smt_generate_precreated_event',
	'',
	'//
te_smt = param.te_smt;
e_gpr = param.e_gpr;
select any te_file from instances of TE_FILE;
select any te_eq from instances of TE_EQ;
select any te_instance from instances of TE_INSTANCE;
select one te_blk related by te_smt->TE_BLK[R2078];
ws = te_blk.indentation;
select one te_val related by e_gpr->V_VAL[R714]->TE_VAL[R2040];
// CDS - May need to do some investigating to see how to tell if
// this event is self-directed or not.
self_directed = false;
// CDS - Also may need to dig inside, get the sm_evt and then see if this
// event is polymorphic.
T::include(file:"c/t.smt.generate_precreated_event.c");
te_smt.OAL = "GENERATE ${te_val.OAL}";
return T::body();
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("cc4b790a-5e49-47f3-ae15-12696c73b542",
	"c75ff9a0-4922-4244-a206-b21db4cd898e",
	'te_smt',
	"20eb7827-fd8a-4b79-b705-c928064fb55d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("0afbac4e-5dd8-4b7b-822a-59cd58ccc7ec",
	"c75ff9a0-4922-4244-a206-b21db4cd898e",
	'e_gpr',
	"8b663a15-3d11-4c95-8407-3642dfeeadd7",
	0,
	'',
	"cc4b790a-5e49-47f3-ae15-12696c73b542",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("8b663a15-3d11-4c95-8407-3642dfeeadd7",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Generate Preexisting Event>',
	'',
	'',
	'../Event/Event.xtuml');
INSERT INTO PE_PE
	VALUES ("c75ff9a0-4922-4244-a206-b21db4cd898e",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("534b8656-884a-4018-a2e9-5302f0a5841a",
	"00000000-0000-0000-0000-000000000000",
	'smt_generate_events',
	'',
	'//
//
// --------------------------------------------------------
// generate event statements
// --------------------------------------------------------
select many e_gens from instances of E_GEN;
for each e_gen in e_gens
  select one te_smt related by e_gen->E_GSME[R705]->E_GES[R703]->E_ESS[R701]->ACT_SMT[R603]->TE_SMT[R2038];
  r = ::smt_generate_event( te_smt:te_smt, e_gen:e_gen );
  ::smt_buffer_append( te_smt:te_smt, s:r );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("534b8656-884a-4018-a2e9-5302f0a5841a",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("edc662b3-b1ab-40e2-bf7b-4b4c9fcc814a",
	"00000000-0000-0000-0000-000000000000",
	'print_v_pars',
	'',
	'//
v_par = param.v_par;
done = false;
while ( not done )
  if ( empty v_par )
    done = true;
  else
    T::print(s:"-=-=-=-=-=-=-=-=-=-=-=-=-=- v_par is ${v_par.Name}");
    select any sm_evtdi related by v_par->V_VAL[R800]->V_EDV[R801]->V_EPR[R834]->SM_EVTDI[R846];
    if ( not_empty sm_evtdi )
      T::print(s:"-=m=m=m=-=-=-=-=-=-=-=-=-=- sm_evtdi is ${sm_evtdi.Name}");
    end if;
    select one v_par related by v_par->V_PAR[R816.''precedes''];
  end if;
end while;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("fb7e449d-79a7-4b33-9225-ab97bd56885e",
	"edc662b3-b1ab-40e2-bf7b-4b4c9fcc814a",
	'v_par',
	"207500c6-1a45-48bc-803f-a6c31bc58ff1",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("207500c6-1a45-48bc-803f-a6c31bc58ff1",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Actual Parameter>',
	'',
	'',
	'../Value/Value.xtuml');
INSERT INTO PE_PE
	VALUES ("edc662b3-b1ab-40e2-bf7b-4b4c9fcc814a",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("dab52686-b4bc-4adf-91f6-75eba5ba525b",
	"00000000-0000-0000-0000-000000000000",
	'smt_generate_event',
	'',
	'//
te_smt = param.te_smt;
e_gen = param.e_gen;
select one e_gsme related by e_gen->E_GSME[R705];
select one e_ess related by e_gsme->E_GES[R703]->E_ESS[R701];
select one sm_evt related by e_gsme->SM_EVT[R707];
select one te_class related by sm_evt->SM_SM[R502]->SM_ISM[R517]->O_OBJ[R518]->TE_CLASS[R2019] where ( not selected.ExcludeFromGen );
select one te_evt related by sm_evt->TE_EVT[R2036];
if ( ( not_empty te_class ) and ( not_empty te_evt ) )
  select any te_file from instances of TE_FILE;
  select any te_eq from instances of TE_EQ;
  select any te_instance from instances of TE_INSTANCE;
  select any te_thread from instances of TE_THREAD;
  select one v_var related by e_gen->V_VAR[R712];
  select one te_var related by v_var->TE_VAR[R2039];
  select one te_blk related by te_smt->TE_BLK[R2078];
  ws = te_blk.indentation;
  te_class.Included = true;
  select many v_pars related by e_ess->V_PAR[R700];
  parameters = "";
  parameter_OAL = "";
  if ( not_empty v_pars )
    delimeter = "";
    for each v_par in v_pars
      select one par_te_dt related by v_par->V_VAL[R800]->S_DT[R820]->TE_DT[R2021];
      select one par_te_val related by v_par->V_VAL[R800]->TE_VAL[R2040];
      r = ::t_oal_smt_event_parameters( evt_msg_var:"", parameter:v_par.Name, value:par_te_val.buffer, value_type:par_te_dt.Core_Typ, ws:te_blk.indentation );
      parameters = parameters + r;
      parameter_OAL = ( parameter_OAL + delimeter ) + par_te_val.OAL;
      delimeter = ", ";
    end for;
  end if;
  self_directed = false;
  if ( "self" == T::l(s:v_var.Name) )
    // CDS - This is a simplistic way to detect event-to-self.
    self_directed = true;
  end if;
  var_name = te_var.buffer;
  T::include(file:"c/t.smt.generate.c");
  te_smt.OAL = "GENERATE ${sm_evt.Drv_Lbl}:${sm_evt.Mning}(${parameter_OAL}) TO ${v_var.Name}";
end if;
return T::body();
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("44715b7e-d8f8-4576-aa45-27c337e8e358",
	"dab52686-b4bc-4adf-91f6-75eba5ba525b",
	'te_smt',
	"20eb7827-fd8a-4b79-b705-c928064fb55d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("7ee87fbc-af49-4134-98e8-92c0daa07bc4",
	"dab52686-b4bc-4adf-91f6-75eba5ba525b",
	'e_gen',
	"c518d401-e546-4ce8-871f-8901dc269705",
	0,
	'',
	"44715b7e-d8f8-4576-aa45-27c337e8e358",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("c518d401-e546-4ce8-871f-8901dc269705",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Generate>',
	'',
	'',
	'../Event/Event.xtuml');
INSERT INTO PE_PE
	VALUES ("dab52686-b4bc-4adf-91f6-75eba5ba525b",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("ddc0a4e5-64d5-47c1-8791-9b09032b339e",
	"00000000-0000-0000-0000-000000000000",
	'smt_generate_creator_events',
	'',
	'//
// --------------------------------------------------------
// generate creator event statement
// --------------------------------------------------------
select many e_gecs from instances of E_GEC;
for each e_gec in e_gecs
  ::smt_generate_creator_event( e_gec:e_gec );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("ddc0a4e5-64d5-47c1-8791-9b09032b339e",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("41307a00-8650-47dd-9603-94862a55efad",
	"00000000-0000-0000-0000-000000000000",
	'smt_generate_creator_event',
	'',
	'//
e_gec = param.e_gec;
select one e_gsme related by e_gec->E_GSME[R705];
select one te_smt related by e_gsme->E_GES[R703]->E_ESS[R701]->ACT_SMT[R603]->TE_SMT[R2038];
r = ::smt_generate_class_event( te_smt:te_smt, e_gsme:e_gsme );
::smt_buffer_append( te_smt:te_smt, s:r );
te_smt.OAL = te_smt.OAL + " CREATOR";
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("8aa31d75-4e4e-4df8-8c65-37f46c8f81cc",
	"41307a00-8650-47dd-9603-94862a55efad",
	'e_gec',
	"9e39f4c4-cdf9-4fec-a290-ce5267810440",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("9e39f4c4-cdf9-4fec-a290-ce5267810440",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Generate to Creator>',
	'',
	'',
	'../Event/Event.xtuml');
INSERT INTO PE_PE
	VALUES ("41307a00-8650-47dd-9603-94862a55efad",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("abebcfa9-5be2-43c8-91da-86a50f352e7e",
	"00000000-0000-0000-0000-000000000000",
	'smt_generate_class_events',
	'',
	'//
// --------------------------------------------------------
// generate class event statement
// --------------------------------------------------------
select many e_gars from instances of E_GAR;
for each e_gar in e_gars
  ::smt_generate_event_to_class( e_gar:e_gar );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("abebcfa9-5be2-43c8-91da-86a50f352e7e",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("2654e004-8086-42df-a965-c4482bb5f127",
	"00000000-0000-0000-0000-000000000000",
	'smt_generate_event_to_class',
	'',
	'//
e_gar = param.e_gar;
select one e_gsme related by e_gar->E_GSME[R705];
select one te_smt related by e_gsme->E_GES[R703]->E_ESS[R701]->ACT_SMT[R603]->TE_SMT[R2038];
r = ::smt_generate_class_event( te_smt:te_smt, e_gsme:e_gsme );
::smt_buffer_append( te_smt:te_smt, s:r );
te_smt.OAL = te_smt.OAL + " CLASS";
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("dd3e389c-a1bb-4a39-bf67-e66886765d6e",
	"2654e004-8086-42df-a965-c4482bb5f127",
	'e_gar',
	"43ed0054-aa11-45eb-adfc-7ef5fbdd4c26",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("43ed0054-aa11-45eb-adfc-7ef5fbdd4c26",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Generate to Class>',
	'',
	'',
	'../Event/Event.xtuml');
INSERT INTO PE_PE
	VALUES ("2654e004-8086-42df-a965-c4482bb5f127",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("e23a1495-9dcd-4f51-95c8-d547ad6f81b9",
	"00000000-0000-0000-0000-000000000000",
	'smt_generate_class_event',
	'',
	'//
te_smt = param.te_smt;
e_gsme = param.e_gsme;
select one e_ess related by e_gsme->E_GES[R703]->E_ESS[R701];
select one te_smt related by e_ess->ACT_SMT[R603]->TE_SMT[R2038];
select one act_act related by e_ess->ACT_SMT[R603]->ACT_BLK[R602]->ACT_ACT[R601];
select one act_sab related by act_act->ACT_SAB[R698];
select one sm_evt related by e_gsme->SM_EVT[R707];
select one o_obj related by act_sab->SM_ACT[R691]->SM_SM[R515]->SM_ISM[R517]->O_OBJ[R518];
if ( empty o_obj )
  select one o_obj related by act_sab->SM_ACT[R691]->SM_SM[R515]->SM_ASM[R517]->O_OBJ[R519];
end if;
select one tgt_o_obj related by sm_evt->SM_SM[R502]->SM_ISM[R517]->O_OBJ[R518];
if ( empty tgt_o_obj )
  select one tgt_o_obj related by sm_evt->SM_SM[R502]->SM_ASM[R517]->O_OBJ[R519];
end if;
select one te_class related by tgt_o_obj->TE_CLASS[R2019] where ( not selected.ExcludeFromGen );
select one te_evt related by sm_evt->TE_EVT[R2036];
if ( ( not_empty te_class ) and ( not_empty te_evt ) )
  select any te_eq from instances of TE_EQ;
  select any te_file from instances of TE_FILE;
  select any te_instance from instances of TE_INSTANCE;
  select any te_thread from instances of TE_THREAD;
  select one te_blk related by te_smt->TE_BLK[R2078];
  ws = te_blk.indentation;
  parameters = "";
  parameter_OAL = "";
  self_directed = false;
  te_class.Included = true;
  if ( "state" == act_act.Type )
    if ( o_obj == tgt_o_obj )
      self_directed = true;
    end if;
  elif ( "transition" == act_act.Type )
    if ( o_obj == tgt_o_obj )
      self_directed = true;
    end if;
  end if;
  select many v_pars related by e_ess->V_PAR[R700];
  if ( not_empty v_pars )
    delimeter = "";
    for each v_par in v_pars
      select one par_te_dt related by v_par->V_VAL[R800]->S_DT[R820]->TE_DT[R2021];
      select one par_te_val related by v_par->V_VAL[R800]->TE_VAL[R2040];
      r = ::t_oal_smt_event_parameters( evt_msg_var:"", parameter:v_par.Name, value:par_te_val.buffer, value_type:par_te_dt.Core_Typ, ws:ws );
      parameters = parameters + r;
      parameter_OAL = ( parameter_OAL + delimeter ) + par_te_val.OAL;
      delimeter = ", ";
    end for;
  end if;
  var_name = "0";
  T::include(file:"c/t.smt.generate.c");
  te_smt.OAL = "GENERATE ${sm_evt.Drv_Lbl}:${sm_evt.Mning}(${parameter_OAL}) TO ${tgt_o_obj.Key_Lett}";
end if;
return T::body();
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("b4d4d64e-6425-4f93-86b2-89e69986466a",
	"e23a1495-9dcd-4f51-95c8-d547ad6f81b9",
	'te_smt',
	"20eb7827-fd8a-4b79-b705-c928064fb55d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("f18def25-f60a-47da-b26a-27ea674f45ad",
	"e23a1495-9dcd-4f51-95c8-d547ad6f81b9",
	'e_gsme',
	"63675bcb-23a0-4df6-88c0-07e6816d0db2",
	0,
	'',
	"b4d4d64e-6425-4f93-86b2-89e69986466a",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("63675bcb-23a0-4df6-88c0-07e6816d0db2",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Generate SM Event Statement>',
	'',
	'',
	'../Event/Event.xtuml');
INSERT INTO PE_PE
	VALUES ("e23a1495-9dcd-4f51-95c8-d547ad6f81b9",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("0dc3dc77-3d16-4007-a574-d69beb0e8214",
	"00000000-0000-0000-0000-000000000000",
	'smt_sgns',
	'',
	'//
// --------------------------------------------------------
// inter-component interface signal
// --------------------------------------------------------
select many act_sgns from instances of ACT_SGN;
for each act_sgn in act_sgns
  ::smt_sgn( act_sgn:act_sgn );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("0dc3dc77-3d16-4007-a574-d69beb0e8214",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("6f6fa9e3-8424-44ff-afbb-1865fb6ab86b",
	"00000000-0000-0000-0000-000000000000",
	'smt_sgn',
	'',
	'//
act_sgn = param.act_sgn;
select one te_smt related by act_sgn->ACT_SMT[R603]->TE_SMT[R2038];
select one te_blk related by te_smt->TE_BLK[R2078];
select one te_mact related by act_sgn->SPR_PS[R663]->TE_MACT[R2051];
if ( empty te_mact )
  select one te_mact related by act_sgn->SPR_RS[R660]->TE_MACT[R2053];
end if;
select many v_pars related by act_sgn->V_PAR[R662];
r = ::q_render_msg( te_mact:te_mact, v_pars:v_pars, te_blk:te_blk, sretvar:"", is_statement:true );
::smt_buffer_append( te_smt:te_smt, s:r );
te_smt.OAL = "SEND ${te_mact.PortName}::${te_mact.MessageName}(${te_mact.OALParamBuffer})";
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("72071bff-2cc1-4790-9a8a-255bd554c28b",
	"6f6fa9e3-8424-44ff-afbb-1865fb6ab86b",
	'act_sgn',
	"75356ebb-c686-49a4-95c7-6a54deaa4225",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("75356ebb-c686-49a4-95c7-6a54deaa4225",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Signal Invocation>',
	'',
	'',
	'../Invocation/Invocation.xtuml');
INSERT INTO PE_PE
	VALUES ("6f6fa9e3-8424-44ff-afbb-1865fb6ab86b",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("3b859f89-053b-4170-864b-fbc6a00914cd",
	"00000000-0000-0000-0000-000000000000",
	'smt_iops',
	'',
	'//
// --------------------------------------------------------
// inter-component interface operation
// --------------------------------------------------------
select many act_iops from instances of ACT_IOP;
for each act_iop in act_iops
  ::smt_iop( act_iop:act_iop );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("3b859f89-053b-4170-864b-fbc6a00914cd",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("e7867e11-1f22-47ca-b467-15bb4dba8caf",
	"00000000-0000-0000-0000-000000000000",
	'smt_iop',
	'',
	'//
act_iop = param.act_iop;
select one te_smt related by act_iop->ACT_SMT[R603]->TE_SMT[R2038];
select one te_blk related by te_smt->TE_BLK[R2078];
select one te_mact related by act_iop->SPR_RO[R657]->TE_MACT[R2052];
if ( empty te_mact )
  select one te_mact related by act_iop->SPR_PO[R680]->TE_MACT[R2050];
end if;
select many v_pars related by act_iop->V_PAR[R679];
r = ::q_render_msg( te_mact:te_mact, v_pars:v_pars, te_blk:te_blk, sretvar:"", is_statement:true );
::smt_buffer_append( te_smt:te_smt, s:r );
te_smt.OAL = "${te_mact.PortName}::${te_mact.MessageName}(${te_mact.OALParamBuffer})";
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("a98313ae-82a6-4ed3-82a2-1ccbe3aca41f",
	"e7867e11-1f22-47ca-b467-15bb4dba8caf",
	'act_iop',
	"45d7ef3c-6fb3-48f3-b2ca-de2c2efcc6dd",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("45d7ef3c-6fb3-48f3-b2ca-de2c2efcc6dd",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Interface Operation Invocation>',
	'',
	'',
	'../Invocation/Invocation.xtuml');
INSERT INTO PE_PE
	VALUES ("e7867e11-1f22-47ca-b467-15bb4dba8caf",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("0cef868d-c954-414e-a0d1-b6d992adafff",
	"00000000-0000-0000-0000-000000000000",
	'q_render_msg',
	'',
	'//
// -------------------------------------------------------------------
// Render the call and parameter list for an inter-component message
// -------------------------------------------------------------------
te_mact = param.te_mact;
v_pars = param.v_pars;
te_blk = param.te_blk;
sretvar = param.sretvar;
is_statement = param.is_statement;
select any te_file from instances of TE_FILE;
select any te_sys from instances of TE_SYS;
select any te_target from instances of TE_TARGET;
parameters = "";
te_mact.OALParamBuffer = "";
ws = "";
if ( is_statement )
  ws = te_blk.indentation;
end if;
if ( not_empty v_pars )
  r = ::gen_parameter_list( v_pars:v_pars, prefix_param_delimiter:false );
  te_parm = r;
  parameters = te_parm.ParamBuffer;
  te_mact.OALParamBuffer = te_parm.OALParamBuffer;
end if;
select one te_aba related by te_mact->TE_ABA[R2010];
// Support by reference string return values.
if ( "c_t *" == te_aba.ReturnDataType )
  if ( not te_sys.InstanceLoading )
    te_blk.declaration = ( ( te_blk.declaration + "c_t " ) + ( sretvar + te_aba.array_spec ) ) + ";";
    if ( "" == parameters )
      parameters = sretvar;
    else
      parameters = ( ( sretvar + ", " ) + parameters );
    end if;
  end if;
end if;
name = te_mact.GeneratedName;
if ( "C++" == te_target.language )
  // Now navigate out across the satisfaction to get the port index of the
  // foreign component (instance).
  select one te_po related by te_mact->TE_PO[R2006];
  foreign_te_po = te_po;
  if ( te_po.Provision )
    direction = IFDirectionType::ServerClient;
    if ( direction == te_mact.Direction )
      name = ( te_mact.PortName + "->" ) + name;
    end if;
    select any foreign_te_po related by te_po->TE_IIR[R2080]->TE_IIR[R2081.''requires or delegates'']->TE_PO[R2080] where ( ( selected.PackageName == te_po.PackageName ) and ( selected.ID != te_po.ID ) );
  else
    direction = IFDirectionType::ClientServer;
    if ( direction == te_mact.Direction )
      name = ( te_mact.PortName + "->" ) + name;
    end if;
    select any foreign_te_po related by te_po->TE_IIR[R2080]->TE_IIR[R2081.''provides or is delegated'']->TE_PO[R2080] where ( ( selected.PackageName == te_po.PackageName ) and ( selected.ID != te_po.ID ) );
  end if;
  name = "thismodule->" + name;
  if ( not_empty foreign_te_po )
    if ( foreign_te_po.polymorphic )
      if ( "" != parameters )
        parameters = ", " + parameters;
      end if;
      parameters = T::s(i:foreign_te_po.sibling) + parameters;
    end if;
  end if;
end if;
T::include(file:"c/t.smt.iop.c");
return T::body();
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("236f8831-af04-4b5b-a0b1-32d91b7733ff",
	"0cef868d-c954-414e-a0d1-b6d992adafff",
	'te_mact',
	"7268e543-f48e-4464-ba70-227deff22727",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("7268e543-f48e-4464-ba70-227deff22727",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Extended Message Action>',
	'',
	'',
	'../Translation Extensions/Translation Extensions.xtuml');
INSERT INTO S_SPARM
	VALUES ("2c7598ea-1998-4be1-8db4-2da0d1ea4e00",
	"0cef868d-c954-414e-a0d1-b6d992adafff",
	'v_pars',
	"ae5b840e-5312-4865-ae17-5c9bba997543",
	0,
	'',
	"236f8831-af04-4b5b-a0b1-32d91b7733ff",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("ae5b840e-5312-4865-ae17-5c9bba997543",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref_set<Actual Parameter>',
	'',
	'',
	'../Value/Value.xtuml');
INSERT INTO S_SPARM
	VALUES ("735c5dc1-cf62-4479-a19e-941aaec8daa8",
	"0cef868d-c954-414e-a0d1-b6d992adafff",
	'te_blk',
	"5a29d9fb-8b19-4624-9076-30bd2407c215",
	0,
	'',
	"2c7598ea-1998-4be1-8db4-2da0d1ea4e00",
	'');
INSERT INTO S_SPARM
	VALUES ("c243e185-4d57-4c81-a8b5-6590de5ea265",
	"0cef868d-c954-414e-a0d1-b6d992adafff",
	'sretvar',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"735c5dc1-cf62-4479-a19e-941aaec8daa8",
	'');
INSERT INTO S_SPARM
	VALUES ("6372ee5d-1ef9-43d7-ac55-5129a65887cc",
	"0cef868d-c954-414e-a0d1-b6d992adafff",
	'is_statement',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"c243e185-4d57-4c81-a8b5-6590de5ea265",
	'');
INSERT INTO PE_PE
	VALUES ("0cef868d-c954-414e-a0d1-b6d992adafff",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("5eef3e58-388b-4a8e-a4bc-b5c678022ca5",
	"00000000-0000-0000-0000-000000000000",
	'smt_operates',
	'',
	'//
// --------------------------------------------------------
// class operation statement
// --------------------------------------------------------
select many act_tfms from instances of ACT_TFM;
for each act_tfm in act_tfms
  select one te_smt related by act_tfm->ACT_SMT[R603]->TE_SMT[R2038];
  r = ::smt_operate( te_smt:te_smt, act_tfm:act_tfm );
  ::smt_buffer_append( te_smt:te_smt, s:r );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("5eef3e58-388b-4a8e-a4bc-b5c678022ca5",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("841a1391-9a67-47ab-af54-faf5052f4491",
	"00000000-0000-0000-0000-000000000000",
	'smt_operate',
	'',
	'//
te_smt = param.te_smt;
act_tfm = param.act_tfm;
select one o_tfr related by act_tfm->O_TFR[R673];
select one te_tfr related by o_tfr->TE_TFR[R2024];
select one te_class related by o_tfr->O_OBJ[R115]->TE_CLASS[R2019] where ( not selected.ExcludeFromGen );
if ( ( not_empty te_tfr ) and ( not_empty te_class ) )
  select any te_file from instances of TE_FILE;
  select any te_target from instances of TE_TARGET;
  select one te_blk related by te_smt->TE_BLK[R2078];
  ws = te_blk.indentation;
  select one te_var related by act_tfm->V_VAR[R667]->TE_VAR[R2039];
  var_name = "";
  instance_based = false;
  if ( te_tfr.Instance_Based == 1 )
    instance_based = true;
    var_name = te_var.buffer;
  end if;
  parameters = "";
  parameter_OAL = "";
  select many v_pars related by act_tfm->V_PAR[R627];
  if ( not_empty v_pars )
    r = ::gen_parameter_list( v_pars:v_pars, prefix_param_delimiter:false );
    te_parm = r;
    parameters = te_parm.ParamBuffer;
    parameter_OAL = te_parm.OALParamBuffer;
  end if;
  operation_name = te_tfr.GeneratedName;
  uses_thismodule = false;
  if ( "C++" == te_target.language )
    uses_thismodule = true;
    if ( not instance_based )
      operation_name = ( te_class.GeneratedName + "::" ) + te_tfr.GeneratedName;
    end if;
  end if;
  T::include(file:"c/t.smt.operation.c");
  if ( instance_based )
    te_smt.OAL = ( te_var.OAL + "." ) + ( te_tfr.Name + "(" );
  else
    te_smt.OAL = ( te_class.Key_Lett + "::" ) + ( te_tfr.Name + "(" );
  end if;
  if ( "" != parameter_OAL )
    te_smt.OAL = ( te_smt.OAL + " " ) + ( parameter_OAL + " " );
  end if;
  te_smt.OAL = te_smt.OAL + ")";
end if;
return T::body();
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("da223366-aa48-487d-8d31-68f28e64338a",
	"841a1391-9a67-47ab-af54-faf5052f4491",
	'te_smt',
	"20eb7827-fd8a-4b79-b705-c928064fb55d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("b283c0ab-02ab-463d-9071-4fc1685764e7",
	"841a1391-9a67-47ab-af54-faf5052f4491",
	'act_tfm',
	"1090fd76-cbf2-431b-8b76-774d8967448d",
	0,
	'',
	"da223366-aa48-487d-8d31-68f28e64338a",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("1090fd76-cbf2-431b-8b76-774d8967448d",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Operation Invocation>',
	'',
	'',
	'../Invocation/Invocation.xtuml');
INSERT INTO PE_PE
	VALUES ("841a1391-9a67-47ab-af54-faf5052f4491",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("8a7b8c79-2ca1-4573-a562-91a27495d0cb",
	"00000000-0000-0000-0000-000000000000",
	'smt_bridges',
	'',
	'//
// --------------------------------------------------------
// bridge statement
// --------------------------------------------------------
select many act_brgs from instances of ACT_BRG;
for each act_brg in act_brgs
  select one te_smt related by act_brg->ACT_SMT[R603]->TE_SMT[R2038];
  r = ::smt_bridge( te_smt:te_smt, act_brg:act_brg );
  ::smt_buffer_append( te_smt:te_smt, s:r );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("8a7b8c79-2ca1-4573-a562-91a27495d0cb",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("3e55b4fd-aac0-448b-b304-b9da9c866bcc",
	"00000000-0000-0000-0000-000000000000",
	'smt_bridge',
	'',
	'//
te_smt = param.te_smt;
act_brg = param.act_brg;
select one s_brg related by act_brg->S_BRG[R674];
select one te_brg related by s_brg->TE_BRG[R2025];
if ( not_empty te_brg )
  select any te_file from instances of TE_FILE;
  select any te_target from instances of TE_TARGET;
  select one te_blk related by te_smt->TE_BLK[R2078];
  ws = te_blk.indentation;
  select one te_ee related by s_brg->S_EE[R19]->TE_EE[R2020];
  te_ee.Included = true;
  parameters = "";
  parameter_OAL = "";
  select many v_pars related by act_brg->V_PAR[R628];
  if ( not_empty v_pars )
    r = ::gen_parameter_list( v_pars:v_pars, prefix_param_delimiter:false );
    te_parm = r;
    parameters = te_parm.ParamBuffer;
    parameter_OAL = te_parm.OALParamBuffer;
  end if;
  bridge_name = te_brg.GeneratedName;
  if ( "C++" == te_target.language )
    bridge_name = ( te_ee.RegisteredName + "::" ) + bridge_name;
    select one te_c related by te_ee->TE_C[R2085];
    if ( ( "TIM" != te_brg.EEkeyletters ) and ( not_empty te_c ) )
      if ( "" == parameters )
        parameters = "thismodule";
      else
        parameters = "thismodule, " + parameters;
      end if;
    end if;
  end if;
  T::include(file:"c/t.smt.bridge.c");
  te_smt.OAL = "${te_brg.EEkeyletters}::${te_brg.Name}( ${parameter_OAL} )";
end if;
return T::body();
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("2820808a-5805-4c60-b43a-5cbe2984c48a",
	"3e55b4fd-aac0-448b-b304-b9da9c866bcc",
	'te_smt',
	"20eb7827-fd8a-4b79-b705-c928064fb55d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("516b0f32-41f2-43b9-a01d-19f7eb76ec91",
	"3e55b4fd-aac0-448b-b304-b9da9c866bcc",
	'act_brg',
	"87af29ba-2da9-411e-9287-ee0b2ca1dd65",
	0,
	'',
	"2820808a-5805-4c60-b43a-5cbe2984c48a",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("87af29ba-2da9-411e-9287-ee0b2ca1dd65",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Bridge Invocation>',
	'',
	'',
	'../Invocation/Invocation.xtuml');
INSERT INTO PE_PE
	VALUES ("3e55b4fd-aac0-448b-b304-b9da9c866bcc",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("5a5a6f36-8979-4065-a385-8e4a2b785470",
	"00000000-0000-0000-0000-000000000000",
	'smt_functions',
	'',
	'//
// --------------------------------------------------------
// function statement
// --------------------------------------------------------
select many act_fncs from instances of ACT_FNC;
for each act_fnc in act_fncs
  select one te_smt related by act_fnc->ACT_SMT[R603]->TE_SMT[R2038];
  r = ::smt_function( te_smt:te_smt, act_fnc:act_fnc );
  ::smt_buffer_append( te_smt:te_smt, s:r );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("5a5a6f36-8979-4065-a385-8e4a2b785470",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("83a22ad6-4004-4a0c-aedc-a573401e93f6",
	"00000000-0000-0000-0000-000000000000",
	'smt_function',
	'',
	'//
te_smt = param.te_smt;
act_fnc = param.act_fnc;
//
select one te_sync related by act_fnc->S_SYNC[R675]->TE_SYNC[R2023];
if ( not_empty te_sync )
  select any te_file from instances of TE_FILE;
  select any te_target from instances of TE_TARGET;
  select one te_blk related by te_smt->TE_BLK[R2078];
  ws = te_blk.indentation;
  parameters = "";
  parameter_OAL = "";
  select many v_pars related by act_fnc->V_PAR[R669];
  if ( not_empty v_pars )
    r = ::gen_parameter_list( v_pars:v_pars, prefix_param_delimiter:false );
    te_parm = r;
    parameters = te_parm.ParamBuffer;
    parameter_OAL = te_parm.OALParamBuffer;
  end if;
  function_name = te_sync.intraface_method;
  if ( "C++" == te_target.language )
    function_name = "thismodule->" + function_name;
  end if;
  T::include(file:"c/t.smt.function.c");
  te_smt.OAL = "::${te_sync.Name}( ${parameter_OAL} )";
end if;
return T::body();
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("8667ec7e-a751-4d68-9796-1a4f8af49713",
	"83a22ad6-4004-4a0c-aedc-a573401e93f6",
	'te_smt',
	"20eb7827-fd8a-4b79-b705-c928064fb55d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("09ed4e1d-3bbd-464a-9aea-7af7b2911077",
	"83a22ad6-4004-4a0c-aedc-a573401e93f6",
	'act_fnc',
	"0261bf9d-1ddb-4836-a9fe-ea608a52d9c3",
	0,
	'',
	"8667ec7e-a751-4d68-9796-1a4f8af49713",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("0261bf9d-1ddb-4836-a9fe-ea608a52d9c3",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Function Invocation>',
	'',
	'',
	'../Invocation/Invocation.xtuml');
INSERT INTO PE_PE
	VALUES ("83a22ad6-4004-4a0c-aedc-a573401e93f6",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("56d6a89d-3ff6-4667-8bc4-858b1da485e3",
	"00000000-0000-0000-0000-000000000000",
	'smt_returns',
	'',
	'//
// --------------------------------------------------------
// return statements
// --------------------------------------------------------
select many act_rets from instances of ACT_RET;
for each act_ret in act_rets
  select one te_smt related by act_ret->ACT_SMT[R603]->TE_SMT[R2038];
  r = ::smt_return( te_smt:te_smt, act_ret:act_ret );
  ::smt_buffer_append( te_smt:te_smt, s:r );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("56d6a89d-3ff6-4667-8bc4-858b1da485e3",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("514095ba-a83f-4078-9a37-1e69f7766a96",
	"00000000-0000-0000-0000-000000000000",
	'smt_return',
	'',
	'//
// --------------------------------------------------------
// return statement
// --------------------------------------------------------
te_smt = param.te_smt;
act_ret = param.act_ret;
select any te_file from instances of TE_FILE;
select any te_instance from instances of TE_INSTANCE;
select any te_string from instances of TE_STRING;
select one te_blk related by te_smt->TE_BLK[R2078];
ws = te_blk.indentation;
select one v_val related by act_ret->V_VAL[R668];
intCast1 = "";
intCast2 = "";
value = "";
value_OAL = "";
// Deallocate any variables allocated from this block and all higher blocks in this action.
deallocation = te_blk.deallocation;
select one parent_te_blk related by te_blk->TE_SMT[R2015]->TE_BLK[R2078];
while ( not_empty parent_te_blk )
  te_blk = parent_te_blk;
  deallocation = deallocation + parent_te_blk.deallocation;
  select one parent_te_blk related by parent_te_blk->TE_SMT[R2015]->TE_BLK[R2078];
end while;
select one te_aba related by te_blk->TE_ABA[R2011];
if ( not_empty v_val )
  if ( ( "i_t" == te_aba.ReturnDataType ) or ( "dt_xtUMLInteger" == te_aba.ReturnDataType ) )
    // resolve the core data type of v_val
    select one s_dt related by v_val->S_DT[R820];
    select any core_s_dt from instances of S_DT where ( false );
    select one s_udt related by s_dt->S_UDT[R17];
    if ( not_empty s_udt )
      r = ::GetBaseTypeForUDT( s_udt:s_udt );
      core_s_dt = r;
    end if;
    if ( not_empty core_s_dt )
      s_dt = core_s_dt;
    end if;
    //
    // if the value is of the _real_ type
    if ( "real" == s_dt.Name )
      // cast the value to an int, to avoid a "possible loss of precision"
      // syntax error in the generated code
      intCast1 = ( "(" + te_aba.ReturnDataType ) + ")(";
      intCast2 = ")";
    end if;
  end if;
  select one te_val related by v_val->TE_VAL[R2040];
  value = te_val.buffer;
  value_OAL = te_val.OAL;
end if;
//
T::include(file:"c/t.smt.return.c");
te_smt.OAL = "RETURN " + value_OAL;
return T::body();
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("cf743fb4-23fd-41bf-8698-045a5ff86e26",
	"514095ba-a83f-4078-9a37-1e69f7766a96",
	'te_smt',
	"20eb7827-fd8a-4b79-b705-c928064fb55d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("ddfe3546-6b6a-4160-94d5-87145e50e7d5",
	"514095ba-a83f-4078-9a37-1e69f7766a96",
	'act_ret',
	"b1cfda35-28f8-45ab-b2b4-5a862d70a718",
	0,
	'',
	"cf743fb4-23fd-41bf-8698-045a5ff86e26",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("b1cfda35-28f8-45ab-b2b4-5a862d70a718",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Return Stmt>',
	'',
	'',
	'../Invocation/Invocation.xtuml');
INSERT INTO PE_PE
	VALUES ("514095ba-a83f-4078-9a37-1e69f7766a96",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("a183a365-2567-49d6-bc65-a8e6f2a15219",
	"00000000-0000-0000-0000-000000000000",
	'smt_controls',
	'',
	'//
// --------------------------------------------------------
// control statements
// --------------------------------------------------------
select many act_ctls from instances of ACT_CTL;
for each act_ctl in act_ctls
  select one te_smt related by act_ctl->ACT_SMT[R603]->TE_SMT[R2038];
  r = ::smt_control( te_smt:te_smt, act_ctl:act_ctl );
  ::smt_buffer_append( te_smt:te_smt, s:r );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("a183a365-2567-49d6-bc65-a8e6f2a15219",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("7d86f934-0426-48ec-aa9d-bb3c34cddd41",
	"00000000-0000-0000-0000-000000000000",
	'smt_control',
	'',
	'//
// --------------------------------------------------------
// control statement
// --------------------------------------------------------
te_smt = param.te_smt;
act_ctl = param.act_ctl;
select any te_file from instances of TE_FILE;
select any te_target from instances of TE_TARGET;
select one te_blk related by te_smt->TE_BLK[R2078];
ws = te_blk.indentation;
T::include(file:"c/t.smt.control.c");
te_smt.OAL = "CONTROL";
return T::body();
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("11ed7b3c-8100-4775-b0e9-4218fc0ae5f4",
	"7d86f934-0426-48ec-aa9d-bb3c34cddd41",
	'te_smt',
	"20eb7827-fd8a-4b79-b705-c928064fb55d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("bfe95c82-310f-4e88-afea-42b6436aad9d",
	"7d86f934-0426-48ec-aa9d-bb3c34cddd41",
	'act_ctl',
	"db293f8e-a7c9-42f5-af85-1cea7adfc77d",
	0,
	'',
	"11ed7b3c-8100-4775-b0e9-4218fc0ae5f4",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("db293f8e-a7c9-42f5-af85-1cea7adfc77d",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Control>',
	'',
	'',
	'../Body/Body.xtuml');
INSERT INTO PE_PE
	VALUES ("7d86f934-0426-48ec-aa9d-bb3c34cddd41",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("85090549-e7b8-4a4c-9135-de4dee7770a4",
	"00000000-0000-0000-0000-000000000000",
	'smt_breaks',
	'',
	'//
// --------------------------------------------------------
// break statements
// --------------------------------------------------------
select many act_brks from instances of ACT_BRK;
for each act_brk in act_brks
  select one te_smt related by act_brk->ACT_SMT[R603]->TE_SMT[R2038];
  r = ::smt_break( te_smt:te_smt, act_brk:act_brk );
  ::smt_buffer_append( te_smt:te_smt, s:r );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("85090549-e7b8-4a4c-9135-de4dee7770a4",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("93f5b6fd-e4c4-4a28-9fb3-c407dc785eb9",
	"00000000-0000-0000-0000-000000000000",
	'smt_break',
	'',
	'//
// --------------------------------------------------------
// break statement
// --------------------------------------------------------
te_smt = param.te_smt;
act_brk = param.act_brk;
select any te_file from instances of TE_FILE;
select one te_blk related by te_smt->TE_BLK[R2078];
ws = te_blk.indentation;
// Deallocate any variables allocated from this block and higher blocks up to containing WHILE or FOR.
deallocation = te_blk.deallocation;
select one parent_te_blk related by te_blk->TE_SMT[R2015]->TE_BLK[R2078];
while ( not_empty parent_te_blk )
  select one parent_te_smt related by parent_te_blk->TE_SMT[R2015];
  if ( not_empty parent_te_smt )
    deallocation = deallocation + parent_te_blk.deallocation;
    if ( ( "TE_WHL" == parent_te_smt.subtypeKL ) or ( "TE_FOR" == parent_te_smt.subtypeKL ) )
      break;
    end if;
  end if;
  select one parent_te_blk related by parent_te_smt->TE_BLK[R2078];
end while;
T::include(file:"c/t.smt.break.c");
te_smt.OAL = "BREAK";
return T::body();
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("46fa3c33-dfe5-4aa8-9be1-e2ebe6f60acd",
	"93f5b6fd-e4c4-4a28-9fb3-c407dc785eb9",
	'te_smt',
	"20eb7827-fd8a-4b79-b705-c928064fb55d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("8dc7c877-16a7-4823-a368-c412bdb81654",
	"93f5b6fd-e4c4-4a28-9fb3-c407dc785eb9",
	'act_brk',
	"48514e79-7302-419e-a905-0948bfc7c063",
	0,
	'',
	"46fa3c33-dfe5-4aa8-9be1-e2ebe6f60acd",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("48514e79-7302-419e-a905-0948bfc7c063",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Break>',
	'',
	'',
	'../Body/Body.xtuml');
INSERT INTO PE_PE
	VALUES ("93f5b6fd-e4c4-4a28-9fb3-c407dc785eb9",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("5fbcf1f0-ab46-45a0-be9e-2e0c5f261914",
	"00000000-0000-0000-0000-000000000000",
	'smt_continues',
	'',
	'//
// --------------------------------------------------------
// continue statements
// --------------------------------------------------------
select many act_cons from instances of ACT_CON;
for each act_con in act_cons
  select one te_smt related by act_con->ACT_SMT[R603]->TE_SMT[R2038];
  r = ::smt_continue( te_smt:te_smt, act_con:act_con );
  ::smt_buffer_append( te_smt:te_smt, s:r );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("5fbcf1f0-ab46-45a0-be9e-2e0c5f261914",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("8fcc6f4d-2e27-4d05-aba0-93546b5e046d",
	"00000000-0000-0000-0000-000000000000",
	'smt_continue',
	'',
	'//
// --------------------------------------------------------
// continue statement
// --------------------------------------------------------
te_smt = param.te_smt;
act_con = param.act_con;
select any te_file from instances of TE_FILE;
select one te_blk related by te_smt->TE_BLK[R2078];
ws = te_blk.indentation;
// Deallocate any variables allocated from this block and higher blocks up to containing WHILE or FOR.
deallocation = te_blk.deallocation;
select one parent_te_blk related by te_blk->TE_SMT[R2015]->TE_BLK[R2078];
while ( not_empty parent_te_blk )
  select one parent_te_smt related by parent_te_blk->TE_SMT[R2015];
  if ( not_empty parent_te_smt )
    deallocation = deallocation + parent_te_blk.deallocation;
    if ( ( "TE_WHL" == parent_te_smt.subtypeKL ) or ( "TE_FOR" == parent_te_smt.subtypeKL ) )
      break;
    end if;
  end if;
  select one parent_te_blk related by parent_te_smt->TE_BLK[R2078];
end while;
T::include(file:"c/t.smt.continue.c");
te_smt.OAL = "CONTINUE";
return T::body();
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("f6563851-e748-45f3-a818-49f1606b08f5",
	"8fcc6f4d-2e27-4d05-aba0-93546b5e046d",
	'te_smt',
	"20eb7827-fd8a-4b79-b705-c928064fb55d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("d734e737-987c-4262-8aef-bc450b79103f",
	"8fcc6f4d-2e27-4d05-aba0-93546b5e046d",
	'act_con',
	"812ed5f2-7905-41fd-9351-05a93ad65d56",
	0,
	'',
	"f6563851-e748-45f3-a818-49f1606b08f5",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("812ed5f2-7905-41fd-9351-05a93ad65d56",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Continue>',
	'',
	'',
	'../Body/Body.xtuml');
INSERT INTO PE_PE
	VALUES ("8fcc6f4d-2e27-4d05-aba0-93546b5e046d",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("3fcf8c9b-e252-4169-ae25-2499770efd2d",
	"00000000-0000-0000-0000-000000000000",
	'smt_select_related',
	'',
	'//
te_smt = param.te_smt;
act_sel = param.act_sel;
by_where = param.by_where;
select any te_file from instances of TE_FILE;
select any te_set from instances of TE_SET;
select any empty_te_lnk from instances of TE_LNK where ( false );
select any empty_act_lnk from instances of ACT_LNK where ( false );
select one te_blk related by te_smt->TE_BLK[R2078];
select one start_v_val related by act_sel->V_VAL[R613];
select one start_te_val related by start_v_val->TE_VAL[R2040];
select one start_v_var related by start_v_val->V_IRF[R801]->V_VAR[R808];
select one start_o_obj related by start_v_var->V_INT[R814]->O_OBJ[R818];
start_many = false;
if ( empty start_v_var )
  start_many = true;
  select one start_v_var related by start_v_val->V_ISR[R801]->V_VAR[R809];
  select one start_o_obj related by start_v_var->V_INS[R814]->O_OBJ[R819];
end if;
select one start_te_class related by start_o_obj->TE_CLASS[R2019] where ( not selected.ExcludeFromGen );
if ( not_empty start_te_class )
  // QUERY and POPULATE:  FactoryTE_SELECT_RELATED
  // Create and link the translation instance for select_related.
  create object instance te_select_related of TE_SELECT_RELATED;
  te_select_related.by_where = by_where;
  te_select_related.is_implicit = act_sel.is_implicit;
  te_select_related.multiplicity = act_sel.cardinality;
  relate te_select_related to start_te_class across R2077;
  select one start_te_var related by start_v_var->TE_VAR[R2039];
  te_select_related.start_var = start_te_val.buffer;
  te_select_related.start_var_OAL = start_te_val.OAL;
  if ( start_many )
    te_select_related.start_many = true;
  end if;
  select one act_lnk related by act_sel->ACT_LNK[R637];
  select one te_lnk related by act_lnk->TE_LNK[R2042];
  // Here we detect and insert a link association if we have
  // traversed directly from aone to aoth (or vice versa) across an
  // associative association.  Insert the associative link between
  // the starting variable and the first link in the chain.
  r = ::detect_and_insert_associator_TE_LNK( te_lnk:empty_te_lnk, next_te_lnk:te_lnk, act_lnk:empty_act_lnk, next_act_lnk:act_lnk, start_o_obj:start_o_obj );
  assr_te_lnk = r;
  if ( not_empty assr_te_lnk )
    te_lnk = assr_te_lnk;
  end if;
  // We detect first here.  We detect last in primary query/populate.
  te_lnk.first = true;
  // For the first link, the left (set) reference is the link start variable.
  te_lnk.left = te_select_related.start_var;
  select one result_v_var related by act_sel->V_VAR[R638];
  select one result_te_var related by result_v_var->TE_VAR[R2039];
  te_select_related.result_var = result_te_var.buffer;
  te_select_related.result_var_OAL = result_te_var.OAL;
  select one te_class related by result_v_var->V_INT[R814]->O_OBJ[R818]->TE_CLASS[R2019];
  if ( "many" == te_select_related.multiplicity )
    select one te_class related by result_v_var->V_INS[R814]->O_OBJ[R819]->TE_CLASS[R2019];
  end if;
  if ( te_select_related.start_many )
    te_lnk.left = te_select_related.te_classGeneratedName + "_linkage";
  end if;
  if ( te_select_related.by_where )
    select one where_te_val related by act_sel->ACT_SRW[R664]->V_VAL[R611]->TE_VAL[R2040];
    relate where_te_val to te_select_related across R2074;
    te_select_related.where_clause = where_te_val.buffer;
    te_select_related.where_clause_OAL = where_te_val.OAL;
  end if;
  relate te_select_related to te_smt across R2069;
  relate te_select_related to start_te_val across R2070;
  relate te_select_related to start_te_var across R2094;
  relate te_select_related to te_lnk across R2073;
  //
  // RENDER
  // Truth Table
  //
  // Notes:
  // 1) Selecting "many" or "any" through a chain that has multiplicity 1
  //    all the way through should not be allowed by the OAL parser.
  //    However, maybe a parser will not catch it.  Therefore, we will
  //    support the construct in the code generator.  We will treat it
  //    like the corresponding "one" case but populate an result set.
  // 2) Selecting "one" through a chain that has multiplicity M should
  //    not be allowed by the OAL parser.  However, maybe a parser will
  //    miss it.  Therefore, we will do something that makes sense.  We
  //    treat it like the "any" case in the code generator.
  //
  //   A <*----R1----1> B <*----R2----1> C
  //     <1----R9----*>   <1----R8----*>
  //
  // single-link chains
  // Declaration based upon multiplicity.
  //  #  | first | last | startmany | multiplicity | linkmult | by_where | example
  //  1  |   T   |  T   |     F     |   "one"      |  0:one   |    F     | select one b related by a->B[R1];
  //  2  |   T   |  T   |     F     |   "one"      |  0:one   |    T     | select one b related by a->B[R1] where ( selected.i == 7 );
  //  3  |   T   |  T   |     F     | "one"->"any" |  1:many  |    F     | select one b related by a->B[R9];                              // Note 2
  //  4  |   T   |  T   |     F     | "one"->"any" |  1:many  |    T     | select one b related by a->B[R9] where ( selected.i == 7 );    // Note 2
  //  5  |   T   |  T   |     F     |   "any"      |  0:one   |    F     | select any b related by a->B[R1];                              // Note 1
  //  6  |   T   |  T   |     F     |   "any"      |  0:one   |    T     | select any b related by a->B[R1] where ( selected.i == 7 );    // Note 1
  //  7  |   T   |  T   |     F     |   "any"      |  1:many  |    F     | select any b related by a->B[R9];
  //  8  |   T   |  T   |     F     |   "any"      |  1:many  |    T     | select any b related by a->B[R9] where ( selected.i == 7 );
  //  9  |   T   |  T   |     F     |   "many"     |  0:one   |    F     | select many bs related by a->B[R1];                            // Note 1
  // 10  |   T   |  T   |     F     |   "many"     |  0:one   |    T     | select many bs related by a->B[R1] where ( selected.i == 7 );  // Note 1
  // 11  |   T   |  T   |     F     |   "many"     |  1:many  |    F     | select many bs related by a->B[R9];
  // 12  |   T   |  T   |     F     |   "many"     |  1:many  |    T     | select many bs related by a->B[R9] where ( selected.i == 7 );
  // 13  |   T   |  T   |     T     | "one"->"any" |  0:one   |    F     | select one b related by as->B[R1];                             // Note 2
  // 14  |   T   |  T   |     T     | "one"->"any" |  0:one   |    T     | select one b related by as->B[R1] where ( selected.i == 7 );   // Note 2
  // 15  |   T   |  T   |     T     | "one"->"any" |  1:many  |    F     | select one b related by as->B[R9];                             // Note 2
  // 16  |   T   |  T   |     T     | "one"->"any" |  1:many  |    T     | select one b related by as->B[R9] where ( selected.i == 7 );   // Note 2
  // 17  |   T   |  T   |     T     |   "any"      |  0:one   |    F     | select any b related by as->B[R1];
  // 18  |   T   |  T   |     T     |   "any"      |  0:one   |    T     | select any b related by as->B[R1] where ( selected.i == 7 );
  // 19  |   T   |  T   |     T     |   "any"      |  1:many  |    F     | select any b related by as->B[R9];
  // 20  |   T   |  T   |     T     |   "any"      |  1:many  |    T     | select any b related by as->B[R9] where ( selected.i == 7 );
  // 21  |   T   |  T   |     T     |   "many"     |  0:one   |    F     | select many bs related by as->B[R1];
  // 22  |   T   |  T   |     T     |   "many"     |  0:one   |    T     | select many bs related by as->B[R1] where ( selected.i == 7 );
  // 23  |   T   |  T   |     T     |   "many"     |  1:many  |    F     | select many bs related by as->B[R9];
  // 24  |   T   |  T   |     T     |   "many"     |  1:many  |    T     | select many bs related by as->B[R9] where ( selected.i == 7 );
  // multi-link chains
  // Declaration/initialization based upon multiplicity.
  // First iterator based upon startmany.
  // Chaining based upon multiplicity (and "any").
  //  #  | first | last | multiplicity | linkmult | by_where | example
  //  1m |   T   |  F   |   "one"      |  0:one   |    F     | select one c related by a(s)->B[R1]->C[R2];
  //  2m |   T   |  F   |   "one"      |  0:one   |    T     | select one c related by a(s)->B[R1]->C[R2] where ( selected.i == 7 );
  //  3m |   T   |  F   | "one"->"any" |  1:many  |    F     | select one c related by a(s)->B[R9]->C[R8];                              // Note 2
  //  4m |   T   |  F   | "one"->"any" |  1:many  |    T     | select one c related by a(s)->B[R9]->C[R8] where ( selected.i == 7 );    // Note 2
  //  5m |   T   |  F   |   "any"      |  0:one   |    F     | select any c related by a(s)->B[R1]->C[R2];                              // Note 1, 2
  //  6m |   T   |  F   |   "any"      |  0:one   |    T     | select any c related by a(s)->B[R1]->C[R2] where ( selected.i == 7 );    // Note 1, 2
  //  7m |   T   |  F   |   "any"      |  1:many  |    F     | select any c related by a(s)->B[R9]->C[R8];
  //  8m |   T   |  F   |   "any"      |  1:many  |    T     | select any c related by a(s)->B[R9]->C[R8] where ( selected.i == 7 );
  //  9m |   T   |  F   |   "many"     |  0:one   |    F     | select many cs related by a(s)->B[R1]->C[R2];                            // Note 1
  // 10m |   T   |  F   |   "many"     |  0:one   |    T     | select many cs related by a(s)->B[R1]->C[R2] where ( selected.i == 7 );  // Note 1
  // 11m |   T   |  F   |   "many"     |  1:many  |    F     | select many cs related by a(s)->B[R9]->C[R8];
  // 12m |   T   |  F   |   "many"     |  1:many  |    T     | select many cs related by a(s)->B[R9]->C[R8] where ( selected.i == 7 );
  //
  ws = te_blk.indentation;
  te_smt.OAL = "SELECT ${te_select_related.multiplicity} ${te_select_related.result_var_OAL} RELATED BY ${te_select_related.start_var_OAL}";
  // declaration
  if ( te_select_related.is_implicit )
    if ( "many" == te_select_related.multiplicity )
      d = "${te_set.scope}${te_set.base_class} ${te_select_related.result_var}_space={0}; ${te_set.scope}${te_set.base_class} * ${te_select_related.result_var} = &${te_select_related.result_var}_space;";
      ::blk_declaration_append( te_blk:te_blk, s:d );
      d = "${te_set.module}${te_set.clear}( ${te_select_related.result_var} ); ";
      // Push deallocation into the block so that it is available at gen time for break/continue/return.
      ::blk_deallocation_append( te_blk:te_blk, s:d );
    else
      d = "${te_class.GeneratedName} * ${te_select_related.result_var}=0;";
      ::blk_declaration_append( te_blk:te_blk, s:d );
    end if;
  end if;
  cast = "";
  subtypecheck = "";
  select any sub_r_rel from instances of R_REL where ( false );
  if ( "subsuper" == te_lnk.assoc_type )
    select any sub_r_rel related by te_class->O_OBJ[R2019]->R_OIR[R201]->R_RGO[R203]->R_SUB[R205]->R_SUBSUP[R213]->R_REL[R206] where ( selected.Numb == te_lnk.rel_number );
    if ( not_empty sub_r_rel )
      lnk_te_class = te_class;
      cast = ( "(" + te_lnk.te_classGeneratedName ) + " *) ";
      subtypecheck = "${ws}if ( ( 0 != ${te_lnk.left} ) && ( ${lnk_te_class.system_class_number} == ${te_lnk.left}->R$t{te_lnk.rel_number}_object_id ) )";
    end if;
  end if;
  // single-link chains
  //  #  | first | last | startmany | multiplicity | linkmult | by_where | example
  if ( ( te_lnk.first ) and ( te_lnk.last ) )
    te_smt.OAL = te_smt.OAL + te_lnk.OAL;
    if ( not te_select_related.start_many )
      if ( "one" == te_select_related.multiplicity )
        if ( 0 == te_lnk.Mult )
          if ( not_empty sub_r_rel )
            T::include(file:"c/t.smt_sr.result_ref_init.c");
T::b(s:subtypecheck);
          end if;
          if ( not te_select_related.by_where )
            //  1  |   T   |  T   |     F     |   "one"      |  0:one   |    F     | select one b related by a->B[R1];
            T::include(file:"c/t.smt_sr.oneany_atob1.c");
          else
            //  2  |   T   |  T   |     F     |   "one"      |  0:one   |    T     | select one b related by a->B[R1] where ( selected.i == 7 );
            T::include(file:"c/t.smt_sr.oneany_atob1where.c");
          end if;
        else
          if ( not te_select_related.by_where )
            //  3  |   T   |  T   |     F     | "one"->"any" |  1:many  |    F     | select one b related by a->B[R9];                              // Note 2
            T::include(file:"c/t.smt_sr.oneany_atobm.c");
          else
            //  4  |   T   |  T   |     F     | "one"->"any" |  1:many  |    T     | select one b related by a->B[R9] where ( selected.i == 7 );    // Note 2
            T::include(file:"c/t.smt_sr.oneany_atobmwhere.c");
          end if;
        end if;
      elif ( "any" == te_select_related.multiplicity )
        if ( 0 == te_lnk.Mult )
          if ( not_empty sub_r_rel )
            T::include(file:"c/t.smt_sr.result_ref_init.c");
T::b(s:subtypecheck);
          end if;
          if ( not te_select_related.by_where )
            //  5  |   T   |  T   |     F     |   "any"      |  0:one   |    F     | select any b related by a->B[R1];                              // Note 1
            T::include(file:"c/t.smt_sr.oneany_atob1.c");
          else
            //  6  |   T   |  T   |     F     |   "any"      |  0:one   |    T     | select any b related by a->B[R1] where ( selected.i == 7 );    // Note 1
            T::include(file:"c/t.smt_sr.oneany_atob1where.c");
          end if;
        else
          if ( not te_select_related.by_where )
            //  7  |   T   |  T   |     F     |   "any"      |  1:many  |    F     | select any b related by a->B[R9];
            T::include(file:"c/t.smt_sr.oneany_atobm.c");
          else
            //  8  |   T   |  T   |     F     |   "any"      |  1:many  |    T     | select any b related by a->B[R9] where ( selected.i == 7 );
            T::include(file:"c/t.smt_sr.oneany_atobmwhere.c");
          end if;
        end if;
      else
        if ( 0 == te_lnk.Mult )
          if ( not te_select_related.by_where )
            //  9  |   T   |  T   |     F     |   "many"     |  0:one   |    F     | select many bs related by a->B[R1];                            // Note 1
            T::include(file:"c/t.smt_sr.many_atob1.c");
          else
            // 10  |   T   |  T   |     F     |   "many"     |  0:one   |    T     | select many bs related by a->B[R1] where ( selected.i == 7 );  // Note 1
            T::include(file:"c/t.smt_sr.many_atob1where.c");
          end if;
        else
          if ( not te_select_related.by_where )
            // 11  |   T   |  T   |     F     |   "many"     |  1:many  |    F     | select many bs related by a->B[R9];
            T::include(file:"c/t.smt_sr.many_atobm.c");
          else
            // 12  |   T   |  T   |     F     |   "many"     |  1:many  |    T     | select many bs related by a->B[R9] where ( selected.i == 7 );
            T::include(file:"c/t.smt_sr.many_atobmwhere.c");
          end if;
        end if;
      end if;
    else
      if ( "one" == te_select_related.multiplicity )
        if ( 0 == te_lnk.Mult )
          if ( not te_select_related.by_where )
            // 13  |   T   |  T   |     T     | "one"->"any" |  0:one   |    F     | select one b related by as->B[R1];                             // Note 2
            T::include(file:"c/t.smt_sr.oneany_astob1.c");
          else
            // 14  |   T   |  T   |     T     | "one"->"any" |  0:one   |    T     | select one b related by as->B[R1] where ( selected.i == 7 );   // Note 2
            T::include(file:"c/t.smt_sr.oneany_astob1where.c");
          end if;
        else
          if ( not te_select_related.by_where )
            // 15  |   T   |  T   |     T     | "one"->"any" |  1:many  |    F     | select one b related by as->B[R9];                             // Note 2
            T::include(file:"c/t.smt_sr.oneany_astobm.c");
          else
            // 16  |   T   |  T   |     T     | "one"->"any" |  1:many  |    T     | select one b related by as->B[R9] where ( selected.i == 7 );   // Note 2
            T::include(file:"c/t.smt_sr.oneany_astobmwhere.c");
          end if;
        end if;
      elif ( "any" == te_select_related.multiplicity )
        if ( 0 == te_lnk.Mult )
          if ( not te_select_related.by_where )
            // 17  |   T   |  T   |     T     |   "any"      |  0:one   |    F     | select any b related by as->B[R1];
            T::include(file:"c/t.smt_sr.oneany_astob1.c");
          else
            // 18  |   T   |  T   |     T     |   "any"      |  0:one   |    T     | select any b related by as->B[R1] where ( selected.i == 7 );
            T::include(file:"c/t.smt_sr.oneany_astob1where.c");
          end if;
        else
          if ( not te_select_related.by_where )
            // 19  |   T   |  T   |     T     |   "any"      |  1:many  |    F     | select any b related by as->B[R9];
            T::include(file:"c/t.smt_sr.oneany_astobm.c");
          else
            // 20  |   T   |  T   |     T     |   "any"      |  1:many  |    T     | select any b related by as->B[R9] where ( selected.i == 7 );
            T::include(file:"c/t.smt_sr.oneany_astobmwhere.c");
          end if;
        end if;
      else
        if ( 0 == te_lnk.Mult )
          if ( not te_select_related.by_where )
            // 21  |   T   |  T   |     T     |   "many"     |  0:one   |    F     | select many bs related by as->B[R1];
            T::include(file:"c/t.smt_sr.many_astob1.c");
          else
            // 22  |   T   |  T   |     T     |   "many"     |  0:one   |    T     | select many bs related by as->B[R1] where ( selected.i == 7 );
            T::include(file:"c/t.smt_sr.many_astob1where.c");
          end if;
        else
          if ( not te_select_related.by_where )
            // 23  |   T   |  T   |     T     |   "many"     |  1:many  |    F     | select many bs related by as->B[R9];
            T::include(file:"c/t.smt_sr.many_astobm.c");
          else
            // 24  |   T   |  T   |     T     |   "many"     |  1:many  |    T     | select many bs related by as->B[R9] where ( selected.i == 7 );
            T::include(file:"c/t.smt_sr.many_astobmwhere.c");
          end if; // by_where
        end if; // last link mult
      end if; // one, any, many
    end if; // start many
  else
    //
    // multi-link chains
    // multi-link chains
    // This may need to be refactored to remove some degree of control.
    depth = 0;
    if ( "many" == te_select_related.multiplicity )
      T::include(file:"c/t.smt_sr.result_set_init.c");
    else
      if ( te_select_related.result_var != te_select_related.start_var )
        // Do not initialize result when it is the same as starting variable.
        T::include(file:"c/t.smt_sr.result_ref_init.c");
      end if;
    end if;
T::b(s:ws + "{");
    depth = depth + 1;
    if ( te_select_related.start_many )
      depth = depth + 1;
      T::include(file:"c/t.smt_sr.start_many.c");
    else
      depth = depth + 1;
      T::include(file:"c/t.smt_sr.start_one.c");
    end if;
    // drill through the chained links
    while ( not te_lnk.last )
      depth = depth + 1;
      te_smt.OAL = te_smt.OAL + te_lnk.OAL;
      if ( 0 == te_lnk.Mult )
        cast = "";
        subtypecheck = "";
        if ( "subsuper" == te_lnk.assoc_type )
          select one lnk_te_class related by te_lnk->TE_CLASS[R2076];
          select any sub_r_rel related by lnk_te_class->O_OBJ[R2019]->R_OIR[R201]->R_RGO[R203]->R_SUB[R205]->R_SUBSUP[R213]->R_REL[R206] where ( selected.Numb == te_lnk.rel_number );
          if ( not_empty sub_r_rel )
            cast = ( "(" + te_lnk.te_classGeneratedName ) + " *) ";
            subtypecheck = "${ws}if ( ( 0 != ${te_lnk.left} ) && ( ${lnk_te_class.system_class_number} == ${te_lnk.left}->R$t{te_lnk.rel_number}_object_id ) )";
          end if;
        end if;
        result_equals_start = false;
        if ( te_select_related.result_var == te_lnk.left )
          result_equals_start = true;
        end if;
        T::include(file:"c/t.smt_sr.chainto1.c");
      else
        T::include(file:"c/t.smt_sr.chaintom.c");
      end if;
      select one te_lnk related by te_lnk->TE_LNK[R2075.''precedes''];
    end while;
    te_smt.OAL = te_smt.OAL + te_lnk.OAL;
    cast = "";
    subtypecheck = "";
    if ( "subsuper" == te_lnk.assoc_type )
      select any sub_r_rel related by te_class->O_OBJ[R2019]->R_OIR[R201]->R_RGO[R203]->R_SUB[R205]->R_SUBSUP[R213]->R_REL[R206] where ( selected.Numb == te_lnk.rel_number );
      if ( not_empty sub_r_rel )
        lnk_te_class = te_class;
        cast = ( "(" + te_lnk.te_classGeneratedName ) + " *) ";
        subtypecheck = "${ws}if ( ( 0 != ${te_lnk.left} ) && ( ${lnk_te_class.system_class_number} == ${te_lnk.left}->R$t{te_lnk.rel_number}_object_id ) )";
      end if;
    end if;
    // now finish up
    if ( "one" == te_select_related.multiplicity )
      if ( 0 == te_lnk.Mult )
        if ( not_empty sub_r_rel )
T::b(s:subtypecheck);
        end if;
        if ( not te_select_related.by_where )
          //  1m |   T   |  F   |   "one"      |  0:one   |    F     | select one c related by a(s)->B[R1]->C[R2];
          T::include(file:"c/t.smt_sr.multi_oneany_astob1.c");
        else
          //  2m |   T   |  F   |   "one"      |  0:one   |    T     | select one c related by a(s)->B[R1]->C[R2] where ( selected.i == 7 );
          T::include(file:"c/t.smt_sr.multi_oneany_astob1where.c");
        end if;
      else
        if ( not te_select_related.by_where )
          //  3m |   T   |  F   | "one"->"any" |  1:many  |    F     | select one c related by a(s)->B[R9]->C[R8];                              // Note 2
          T::include(file:"c/t.smt_sr.oneany_atobm.c");
        else
          //  4m |   T   |  F   | "one"->"any" |  1:many  |    T     | select one c related by a(s)->B[R9]->C[R8] where ( selected.i == 7 );    // Note 2
          T::include(file:"c/t.smt_sr.multi_oneany_astobmwhere.c");
        end if;
      end if;
    elif ( "any" == te_select_related.multiplicity )
      if ( 0 == te_lnk.Mult )
        if ( not_empty sub_r_rel )
T::b(s:subtypecheck);
        end if;
        if ( not te_select_related.by_where )
          //  5m |   T   |  F   |   "any"      |  0:one   |    F     | select any c related by a(s)->B[R1]->C[R2];                              // Note 1, 2
          T::include(file:"c/t.smt_sr.multi_oneany_astob1.c");
        else
          //  6m |   T   |  F   |   "any"      |  0:one   |    T     | select any c related by a(s)->B[R1]->C[R2] where ( selected.i == 7 );    // Note 1, 2
          T::include(file:"c/t.smt_sr.multi_oneany_astob1where.c");
        end if;
      else
        if ( not te_select_related.by_where )
          //  7m |   T   |  F   |   "any"      |  1:many  |    F     | select any c related by a(s)->B[R9]->C[R8];
          T::include(file:"c/t.smt_sr.oneany_atobm.c");
        else
          //  8m |   T   |  F   |   "any"      |  1:many  |    T     | select any c related by a(s)->B[R9]->C[R8] where ( selected.i == 7 );
          T::include(file:"c/t.smt_sr.multi_oneany_astobmwhere.c");
        end if;
      end if;
    else
      if ( 0 == te_lnk.Mult )
        if ( not_empty sub_r_rel )
T::b(s:subtypecheck);
        end if;
        if ( not te_select_related.by_where )
          //  9m |   T   |  F   |   "many"     |  0:one   |    F     | select many cs related by a(s)->B[R1]->C[R2];                            // Note 1
          T::include(file:"c/t.smt_sr.multi_many_astob1.c");
        else
          // 10m |   T   |  F   |   "many"     |  0:one   |    T     | select many cs related by a(s)->B[R1]->C[R2] where ( selected.i == 7 );  // Note 1
          T::include(file:"c/t.smt_sr.multi_many_astob1where.c");
        end if;
      else
        if ( not te_select_related.by_where )
          // 11m |   T   |  F   |   "many"     |  1:many  |    F     | select many cs related by a(s)->B[R9]->C[R8];
          T::include(file:"c/t.smt_sr.multi_many_astobm.c");
        else
          // 12m |   T   |  F   |   "many"     |  1:many  |    T     | select many cs related by a(s)->B[R9]->C[R8] where ( selected.i == 7 );
          T::include(file:"c/t.smt_sr.multi_many_astobmwhere.c");
        end if; // by_where
      end if; // last link mult
    end if; // one, any, many
    //
    while ( depth > 0 )
T::b(s:"}");
      depth = depth - 1;
    end while;
    oal = "T_b( \\n );";

  end if;
  if ( te_select_related.by_where )
    te_smt.OAL = te_smt.OAL + " WHERE ( ${te_select_related.where_clause_OAL} )";
  end if;
end if;
return T::body();
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("b3c4c261-d941-4450-99c6-e688dcca02d4",
	"3fcf8c9b-e252-4169-ae25-2499770efd2d",
	'te_smt',
	"20eb7827-fd8a-4b79-b705-c928064fb55d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("44fdb409-8cc5-464f-9eba-f21e96727d0a",
	"3fcf8c9b-e252-4169-ae25-2499770efd2d",
	'act_sel',
	"601e1da3-d769-4742-b08f-666e38588da0",
	0,
	'',
	"b3c4c261-d941-4450-99c6-e688dcca02d4",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("601e1da3-d769-4742-b08f-666e38588da0",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Select>',
	'',
	'',
	'../Selection/Selection.xtuml');
INSERT INTO S_SPARM
	VALUES ("819b34fb-838f-49bf-b371-7ccd0c2220c5",
	"3fcf8c9b-e252-4169-ae25-2499770efd2d",
	'by_where',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"44fdb409-8cc5-464f-9eba-f21e96727d0a",
	'');
INSERT INTO PE_PE
	VALUES ("3fcf8c9b-e252-4169-ae25-2499770efd2d",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("d793eb4c-0c3e-4422-b85b-eb1153dc0107",
	"00000000-0000-0000-0000-000000000000",
	'GetRelationshipDataMemberName',
	'',
	'//============================================================================
// $RCSfile: q.names.rels.arc,v $
//
// Description:
// This archetype file contains utility functions for relationship namings
// that span multiple archetype files.
//
// Notice:
// (C) Copyright 1998-2013 Mentor Graphics Corporation
//     All rights reserved.
//
// This document contains confidential and proprietary information and
// property of Mentor Graphics Corp.  No part of this document may be
// reproduced without the express written permission of Mentor Graphics Corp.
//============================================================================
//
//
//============================================================================
// This function returns the name of the object member data to be used
// for (optimized) storage of a link to a related object.
//============================================================================
o_obj = param.o_obj;
r_rel = param.r_rel;
rel_phrase = param.rel_phrase;
result = ( o_obj.Key_Lett + "_R" ) + T::s(i:r_rel.Numb);
obj_id = "";
r = ::GetRelationshipSuffix( right_o_obj:o_obj, r_rel:r_rel, rel_phrase:rel_phrase );
suffix = r;
if ( "" != suffix )
  result = result + ( "_" + suffix );
end if;
// Subtype-Supertype relationship?
select one subsup_rel related by r_rel->R_SUBSUP[R206];
if ( not_empty subsup_rel )
  select any subtype related by r_rel->R_SUBSUP[R206]->R_SUB[R213] where ( selected.Obj_ID == o_obj.Obj_ID );
  if ( not_empty subtype )
    result = ( "R" + T::s(i:r_rel.Numb) ) + "_subtype";
    obj_id = ( "R" + T::s(i:r_rel.Numb) ) + "_object_id";
  end if;
end if;
return result;
return obj_id;
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("a197600b-b979-4c38-b43c-c03067aaade0",
	"d793eb4c-0c3e-4422-b85b-eb1153dc0107",
	'o_obj',
	"d6b21eeb-39da-43bf-b503-c7bbc9ddf242",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("405837f1-f86c-4f8e-9a87-68a4c1752301",
	"d793eb4c-0c3e-4422-b85b-eb1153dc0107",
	'r_rel',
	"620e9be8-e289-47ed-9279-69b359c269c5",
	0,
	'',
	"a197600b-b979-4c38-b43c-c03067aaade0",
	'');
INSERT INTO S_SPARM
	VALUES ("42d69b79-5a1f-4bd9-9a4a-87bcf37ebf9b",
	"d793eb4c-0c3e-4422-b85b-eb1153dc0107",
	'rel_phrase',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"405837f1-f86c-4f8e-9a87-68a4c1752301",
	'');
INSERT INTO PE_PE
	VALUES ("d793eb4c-0c3e-4422-b85b-eb1153dc0107",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("34c88eb5-9359-4668-af98-1c10c14ef240",
	"00000000-0000-0000-0000-000000000000",
	'GetRelationshipSuffix',
	'',
	'//
//============================================================================
// Given a relationship <rel> and the object at the other (e.g., right)
// end <right_obj>, determine the suffix to be used in the relationship
// link, unlink, and navigation accessor methods.
// Parameter <rel_phrase> is used for reflexive relationships to determine
// which "end" of the relationship to get the suffix for.
//============================================================================
right_o_obj = param.right_o_obj;
r_rel = param.r_rel;
rel_phrase = param.rel_phrase;
//
result = "";
select one simple_rel related by r_rel->R_SIMP[R206];
if ( not_empty simple_rel )
  select any participant related by simple_rel->R_PART[R207];
  select one formalizer related by simple_rel->R_FORM[R208];
  if ( right_o_obj.Obj_ID == participant.Obj_ID )
    result = T::underscore(s:participant.Txt_Phrs);
  else
    result = T::underscore(s:formalizer.Txt_Phrs);
  end if;
  if ( participant.Obj_ID == formalizer.Obj_ID )
    if ( participant.Txt_Phrs == rel_phrase )
      result = T::underscore(s:participant.Txt_Phrs);
    elif ( formalizer.Txt_Phrs == rel_phrase )
      result = T::underscore(s:formalizer.Txt_Phrs);
    else
      msg = "\nTRANSLATION ERROR:  ${right_o_obj.Key_Lett}[R$t{r_rel.Numb}.''${rel_phrase}'']";
      msg = msg + "\nInternal logic error for reflexive simple relationship.";
      T::print(s:"${msg}");
      T::exit(i:101);
    end if;
  end if;
else
  select one assoc_rel related by r_rel->R_ASSOC[R206];
  if ( not_empty assoc_rel )
    select one assr related by assoc_rel->R_ASSR[R211];
    select one one_side related by assoc_rel->R_AONE[R209];
    select one other_side related by assoc_rel->R_AOTH[R210];
    if ( one_side.Obj_ID == other_side.Obj_ID )
      // Reflexive associative relationship
      if ( rel_phrase == one_side.Txt_Phrs )
        result = T::underscore(s:one_side.Txt_Phrs);
        // CDS Consider checking here for one side versus other side.
        // In a role-symmetric reflexive associative, the relationship
        // phrase may be identical on both ends.
      elif ( rel_phrase == other_side.Txt_Phrs )
        result = T::underscore(s:other_side.Txt_Phrs);
      else
        msg = "\nTRANSLATION ERROR:  ${right_o_obj.Key_Lett}[R$t{r_rel.Numb}.''${rel_phrase}'']";
        msg = msg + "\nInternal logic error for reflexive associative relationship.";
        T::print(s:"${msg}");
        T::exit(i:101);
      end if;
      if ( right_o_obj.Obj_ID == assr.Obj_ID )
      end if;
    else
      if ( right_o_obj.Obj_ID == one_side.Obj_ID )
        result = T::underscore(s:one_side.Txt_Phrs);
      elif ( right_o_obj.Obj_ID == other_side.Obj_ID )
        result = T::underscore(s:other_side.Txt_Phrs);
      end if;
    end if; // one_side.Obj_ID == other_side.Obj_ID
  end if; // not_empty assoc_rel
end if; //  not_empty simp_rel
return result;
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("38a828e6-0620-476d-8cef-fb16511be72d",
	"34c88eb5-9359-4668-af98-1c10c14ef240",
	'right_o_obj',
	"d6b21eeb-39da-43bf-b503-c7bbc9ddf242",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("c44f954d-8f93-4ff1-af44-c9dc13b6c853",
	"34c88eb5-9359-4668-af98-1c10c14ef240",
	'r_rel',
	"620e9be8-e289-47ed-9279-69b359c269c5",
	0,
	'',
	"38a828e6-0620-476d-8cef-fb16511be72d",
	'');
INSERT INTO S_SPARM
	VALUES ("e12c58c8-af04-4870-bd7f-29eeb271ba7f",
	"34c88eb5-9359-4668-af98-1c10c14ef240",
	'rel_phrase',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"c44f954d-8f93-4ff1-af44-c9dc13b6c853",
	'');
INSERT INTO PE_PE
	VALUES ("34c88eb5-9359-4668-af98-1c10c14ef240",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("6b122446-66c8-45d3-a309-19d3cbcdfb27",
	"00000000-0000-0000-0000-000000000000",
	'TE_REL_IsLeftFormalizer',
	'',
	'//
//============================================================================
// Returns whether the left O_OBJ is the formalizer.
//=============================================================================
left_o_obj = param.left_o_obj;
r_rel = param.r_rel;
rel_phrase = param.rel_phrase;
//
result = false;
select one r_simp related by r_rel->R_SIMP[R206];
if ( not_empty r_simp )
  select one formalizer related by r_simp->R_FORM[R208];
  select any participant related by r_simp->R_PART[R207];
  if ( participant.Obj_ID != formalizer.Obj_ID )
    // *** Normal Simple Relationship
    if ( left_o_obj.Obj_ID == formalizer.Obj_ID )
      // Left object is formalizer, right object is participant.
      result = true;
    end if;
  else
    // *** Simple Reflexive Relationship
    if ( rel_phrase == participant.Txt_Phrs )
      // Left object is formalizer, right object is participant.
      result = true;
    end if;
  end if;
else
  select one subtype_supertype_rel related by r_rel->R_SUBSUP[R206];
  // Subtype-Supertype relationship?
  if ( not_empty subtype_supertype_rel )
    // Left object is the subtype (formalizer)?
    select any subtype related by subtype_supertype_rel->R_SUB[R213] where ( selected.Obj_ID == left_o_obj.Obj_ID );
    if ( not_empty subtype )
      result = true;
    end if;
  end if;
end if;
return result;
',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("7f07d66e-25e5-4d30-b1e8-e20cdbf718ac",
	"6b122446-66c8-45d3-a309-19d3cbcdfb27",
	'left_o_obj',
	"d6b21eeb-39da-43bf-b503-c7bbc9ddf242",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("009db40d-545f-4110-bce7-715f42899a84",
	"6b122446-66c8-45d3-a309-19d3cbcdfb27",
	'r_rel',
	"620e9be8-e289-47ed-9279-69b359c269c5",
	0,
	'',
	"7f07d66e-25e5-4d30-b1e8-e20cdbf718ac",
	'');
INSERT INTO S_SPARM
	VALUES ("5dcd37cc-fef5-471e-8914-af4c7913d472",
	"6b122446-66c8-45d3-a309-19d3cbcdfb27",
	'rel_phrase',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"009db40d-545f-4110-bce7-715f42899a84",
	'');
INSERT INTO PE_PE
	VALUES ("6b122446-66c8-45d3-a309-19d3cbcdfb27",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO PE_PE
	VALUES ("bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	1,
	"efb614c1-5af5-40ee-92c8-706430a99db3",
	"00000000-0000-0000-0000-000000000000",
	7);
INSERT INTO EP_PKG_PROXY
	VALUES ("efb614c1-5af5-40ee-92c8-706430a99db3",
	"00000000-0000-0000-0000-000000000000",
	"d9bc5487-4193-4817-be1c-6c3f3339aebf",
	'ooaofooa',
	'========================================================================

File:          $RCSfile: ooaofooa.xtuml,v $
Version:   $Revision: 1.127 $
Modified:  $Date: 2006/09/26 15:10:20 $

(c) Copyright 2004-2012 by Mentor Graphics Corp. All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Mentor Graphics Corp. and is not for external distribution.
========================================================================

This is the application domain for the Tiger project.

The processing in this model describes the activities
for model capture.



',
	0,
	'../ooaofooa.xtuml');
INSERT INTO S_SYS_PROXY
	VALUES ("d9bc5487-4193-4817-be1c-6c3f3339aebf",
	'com.mentor.nucleus.bp.core',
	1,
	'../../../../com.mentor.nucleus.bp.core.xtuml');

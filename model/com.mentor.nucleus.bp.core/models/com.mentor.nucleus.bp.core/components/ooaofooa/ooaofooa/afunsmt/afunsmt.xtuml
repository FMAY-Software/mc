-- BP 7.1.6 content: Package syschar: 3 persistence-version: 7.1.6

INSERT INTO EP_PKG
	VALUES ("bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	"d9bc5487-4193-4817-be1c-6c3f3339aebf",
	'afunsmt',
	'',
	0);
INSERT INTO GD_MD
	VALUES ("0a9fc76e-cec9-4f92-9d8e-6c488698b137",
	112,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	108,
	0,
	0,
	1,
	1,
	1,
	12,
	1,
	0,
	0,
	0,
	0,
	0,
	'',
	'com.mentor.nucleus.bp.core::components::ooaofooa::ooaofooa::afunsmt');
INSERT INTO DIM_DIA
	VALUES ("0a9fc76e-cec9-4f92-9d8e-6c488698b137",
	'',
	1.000000,
	4000.000000,
	3000.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_SYNC
	VALUES ("39bccb4c-67c0-4a66-8cbb-c4e361a7293a",
	"00000000-0000-0000-0000-000000000000",
	'smt_translate_control_statements',
	'',
	'//====================================================================
//
// File:      $RCSfile: q.oal.translate.arc,v $
//
// (c) Copyright 1998-2013 Mentor Graphics Corporation  All rights reserved.
//
//====================================================================
//
//    Purpose:    This file contains the functions that generate
//                action language from the populated OOA of BPAL.
//
//============================================================================
//
//  These functions are part one of a two-step translation of
//  the action language from the model of OAL.  Each of the invoked
//  functions below translate a specific part of the OAL.  For
//  example the val_literal_boolean_values() function generates all
//  of the code for each literal boolean value found in all of the
//  actions for a domain.  The function smt_ifs()
//  generates the code for all of the if statements found in the
//  actions for a domain.  
//
//  Each of the functions places the generated code for its
//  element in an attribute of the supertype, called _buffer_.
//  In the case of a value, the supertype is V_VAL, for a
//  statement, the supertype is ACT_SMT.
//
//  Once all of the values and statements have been translated,
//  and all of the code is in the buffers,  the function
//  blck_xlate is called to order the statements.
//
//============================================================================
//
::smt_ifs();
::smt_elses();
::smt_fors();
::smt_whiles();
::smt_elifs();
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("39bccb4c-67c0-4a66-8cbb-c4e361a7293a",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("f5288e2c-9c30-4df3-898e-a31c7635939b",
	"00000000-0000-0000-0000-000000000000",
	'smt_translate_other_statements',
	'',
	'//
::smt_assigns();
::smt_create_instances();
::smt_delete_instances();
::smt_create_events_to_instance();
::smt_create_events_to_class();
::smt_create_events_to_creator();
::smt_relates();
::smt_unrelates();
::smt_selects();
::smt_select_wheres();
::smt_select_relateds();
::smt_select_related_wheres();
::smt_relate_usings();
::smt_unrelate_usings();
::smt_generate_precreated_events();
::smt_generate_events();
::smt_generate_class_events();
::smt_generate_creator_events();
::smt_sgns();
::smt_iops();
::smt_operates();
::smt_bridges();
::smt_functions();
::smt_returns();
::smt_controls();
::smt_breaks();
::smt_continues();
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("f5288e2c-9c30-4df3-898e-a31c7635939b",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("9697a4fe-f337-4edf-9c69-7425d751c7aa",
	"00000000-0000-0000-0000-000000000000",
	'oal_translate',
	'',
	'//
// 
//
//.print "translating values"
//.invoke val_translate()
//.print "showing values"
//.invoke oal_v_val_test()
T::print(s:"translating control statements");
::smt_translate_control_statements();
T::print(s:"translating other statements");
::smt_translate_other_statements();
T::print(s:"rolling up statements into action bodies");
::TE_ABA_rollup();
T::print(s:"done translating statements");
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("9697a4fe-f337-4edf-9c69-7425d751c7aa",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("b8248ca2-dba7-48c1-9290-77a2b718b6e4",
	"00000000-0000-0000-0000-000000000000",
	'TE_ABA_rollup',
	'',
	'//============================================================================
// $RCSfile: q.oal.action.arc,v $
//
// Description:
// This query rolls up (accumulates) the translated statements into
// a single string attribute on the action block anchor (TE_ABA).
// After this roll-up, the ACT_* and V_* instances are no longer needed.
//
// Notice:
// (C) Copyright 1998-2013 Mentor Graphics Corporation
//     All rights reserved.
//
// This document contains confidential and proprietary information and
// property of Mentor Graphics Corp.  No part of this document may be
// reproduced without the express written permission of Mentor Graphics Corp.
//============================================================================
//
//
select any empty_act_blk from instances of ACT_BLK where ( false );
select many te_cs from instances of TE_C where ( selected.included_in_build );
for each te_c in te_cs
  select many te_abas related by te_c->TE_ABA[R2088];
  for each te_aba in te_abas
    act_blk = empty_act_blk;
    if ( "S_SYNC" == te_aba.subtypeKL )
      select one act_blk related by te_aba->TE_SYNC[R2010]->S_SYNC[R2023]->ACT_FNB[R695]->ACT_ACT[R698]->ACT_BLK[R666];
    elif ( "O_DBATTR" == te_aba.subtypeKL )
      select one te_dbattr related by te_aba->TE_DBATTR[R2010];
      select one o_dbattr related by te_dbattr->O_DBATTR[R2026];
      select one te_attr related by o_dbattr->O_BATTR[R107]->O_ATTR[R106]->TE_ATTR[R2033];
      if ( ( te_attr.Used ) or ( te_c.OptDisabled ) )
        if ( ParseStatus::parseSuccessful == o_dbattr.Suc_Pars )
          select one act_blk related by o_dbattr->ACT_DAB[R693]->ACT_ACT[R698]->ACT_BLK[R666];
        end if;
      end if;
    elif ( "O_TFR" == te_aba.subtypeKL )
      select one o_tfr related by te_aba->TE_TFR[R2010]->O_TFR[R2024];
      if ( ParseStatus::parseSuccessful == o_tfr.Suc_Pars )
        select one act_blk related by o_tfr->ACT_OPB[R696]->ACT_ACT[R698]->ACT_BLK[R666];
      end if;
    elif ( "SM_ACT" == te_aba.subtypeKL )
      select one sm_act related by te_aba->TE_ACT[R2010]->SM_ACT[R2022];
      select one act_blk related by sm_act->ACT_SAB[R691]->ACT_ACT[R698]->ACT_BLK[R666];
      if ( empty act_blk )
        // Get the transition action.
        select one act_blk related by sm_act->ACT_TAB[R688]->ACT_ACT[R698]->ACT_BLK[R666];
      end if;
    elif ( "TE_MACT" == te_aba.subtypeKL )
      select one te_mact related by te_aba->TE_MACT[R2010];
      if ( "SPR_PO" == te_mact.subtypeKL )
        select one act_blk related by te_aba->TE_MACT[R2010]->SPR_PO[R2050]->ACT_POB[R687]->ACT_ACT[R698]->ACT_BLK[R666];
      elif ( "SPR_RO" == te_mact.subtypeKL )
        select one act_blk related by te_aba->TE_MACT[R2010]->SPR_RO[R2052]->ACT_ROB[R685]->ACT_ACT[R698]->ACT_BLK[R666];
      elif ( "SPR_PS" == te_mact.subtypeKL )
        select one act_blk related by te_aba->TE_MACT[R2010]->SPR_PS[R2051]->ACT_PSB[R686]->ACT_ACT[R698]->ACT_BLK[R666];
      elif ( "SPR_RS" == te_mact.subtypeKL )
        select one act_blk related by te_aba->TE_MACT[R2010]->SPR_RS[R2053]->ACT_RSB[R684]->ACT_ACT[R698]->ACT_BLK[R666];
      end if;
    elif ( "S_BRG" == te_aba.subtypeKL )
      select one act_blk related by te_aba->TE_BRG[R2010]->S_BRG[R2025]->ACT_BRB[R697]->ACT_ACT[R698]->ACT_BLK[R666];
    else
      T::print(s:"ERROR:  TE_ABA.subtypeKL (te_aba.subtypeKL) out of range.");
      T::exit(i:101);
    end if;
    if ( not_empty act_blk )
      select one te_blk related by act_blk->TE_BLK[R2016];
      r = ::blck_xlate( trace:te_c.StmtTrace, te_blk:te_blk );
      te_aba.code = r;
    else
      te_aba.code = "\n  /* WARNING!  Skipping unsuccessful or unparsed action.  */\n";
    end if;
  end for;
end for;
// Process EEs outside of components.
select many te_ees from instances of TE_EE where ( ( selected.RegisteredName != "TIM" ) and selected.Included );
for each te_ee in te_ees
  select one te_c related by te_ee->TE_C[R2085];
  if ( empty te_c )
    select many s_brgs related by te_ee->S_EE[R2020]->S_BRG[R19];
    for each s_brg in s_brgs
      select one act_blk related by s_brg->ACT_BRB[R697]->ACT_ACT[R698]->ACT_BLK[R666];
      select one te_aba related by s_brg->TE_BRG[R2025]->TE_ABA[R2010];
      if ( not_empty act_blk )
        select one te_blk related by act_blk->TE_BLK[R2016];
        r = ::blck_xlate( trace:false, te_blk:te_blk );
        te_aba.code = r;
      end if;
    end for;
  end if;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("b8248ca2-dba7-48c1-9290-77a2b718b6e4",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("c807f7c0-001f-4e2e-8e7d-e54b74438bc1",
	"00000000-0000-0000-0000-000000000000",
	'blck_xlate',
	'',
	'//============================================================================
// $RCSfile: q.oal.act_blk.arc,v $
//
// Description:
// This function provides indirection and a single point of turning for
// fragment versus OAL instance based code generation.
//
// Notice:
// (C) Copyright 1998-2013 Mentor Graphics Corporation
//     All rights reserved.
//
// This document contains confidential and proprietary information and
// property of Mentor Graphics Corp.  No part of this document may be
// reproduced without the express written permission of Mentor Graphics Corp.
//============================================================================
//
//
// This function produces the code for an action given the outer
// block.  It traverses each statement in order and generates for it.
//
// If the statement is a control statement, then there are two
// buffers of generated code, otherwise there is only one.
//
trace = param.trace;
te_blk = param.te_blk;
select any act_smt related by te_blk->ACT_BLK[R2016]->ACT_SMT[R602];
if ( not_empty act_smt )
  // We have statements in this block.
  // Get empty handles into scope.
  select one current_act_if related by act_smt->ACT_IF[R603] where ( false );
  select one empty_act_smt related by current_act_if->ACT_SMT[R603] where ( false );
  // Be sure we have the first statement in the block.
  while ( not_empty act_smt )
    // CDS - Note that R661 is wacky.
    select one s related by act_smt->ACT_SMT[R661.''succeeds''];
    if ( empty s )
      break;
    end if;
    act_smt = s;
  end while;
  while ( not_empty act_smt )
    next = empty_act_smt;
    select one te_smt related by act_smt->TE_SMT[R2038];
    te_blk.OAL = te_blk.OAL + te_smt.OAL;
    if ( "" != te_smt.declaration )
      te_blk.declaration = ( te_blk.declaration + te_smt.declaration ) + " ";
    end if;
    te_blk.initialization = te_blk.initialization + te_smt.initialization;
    if ( "" != te_smt.OAL )
      te_blk.code = te_blk.code + "te_blk.indentation/* te_smt.OAL */\n";
      if ( trace )
        te_blk.code = te_blk.code + "te_blk.indentationXTUML_OAL_STMT_TRACE( " + T::s(i:te_blk.depth) + ", " + te_smt.OAL + " );\n";
      end if;
    end if;
    te_blk.code = te_blk.code + te_smt.buffer;
    select one for_te_blk related by act_smt->ACT_FOR[R603]->ACT_BLK[R605]->TE_BLK[R2016];
    if ( not_empty for_te_blk )
      r = ::blck_xlate( trace:trace, te_blk:for_te_blk );
      te_blk.code = te_blk.code + for_te_blk.code;
    else
      select one whl_te_blk related by act_smt->ACT_WHL[R603]->ACT_BLK[R608]->TE_BLK[R2016];
      if ( not_empty whl_te_blk )
        r = ::blck_xlate( trace:trace, te_blk:whl_te_blk );
        te_blk.code = te_blk.code + whl_te_blk.code;
      else
        select one act_if related by act_smt->ACT_IF[R603];
        if ( not_empty act_if )
          current_act_if = act_if;
          select one if_te_blk related by act_if->ACT_BLK[R607]->TE_BLK[R2016];
          if ( not_empty if_te_blk )
            r = ::blck_xlate( trace:trace, te_blk:if_te_blk );
            te_blk.code = te_blk.code + if_te_blk.code;
          end if;
          // ELIF and ELSE are not linked across R661.  So, get the next
          // one from here.
          // CDS Note:  This depends upon the generator storing these in order!
          select any next related by act_if->ACT_EL[R682]->ACT_SMT[R603];
          if ( empty next )
            select one next related by act_if->ACT_E[R683]->ACT_SMT[R603];
          end if;
        else
          select one eli_te_blk related by act_smt->ACT_EL[R603]->ACT_BLK[R658]->TE_BLK[R2016];
          if ( not_empty eli_te_blk )
            r = ::blck_xlate( trace:trace, te_blk:eli_te_blk );
            te_blk.code = te_blk.code + eli_te_blk.code;
            // CDS Note:  This depends upon the generator storing these in order!
            select any next related by current_act_if->ACT_EL[R682]->ACT_SMT[R603] where ( selected.LineNumber > act_smt.LineNumber );
            if ( empty next )
              select one next related by current_act_if->ACT_E[R683]->ACT_SMT[R603];
              if ( empty next )
                select one next related by current_act_if->ACT_SMT[R603]->ACT_SMT[R661.''precedes''];
              end if;
            end if;
          else
            select one else_te_blk related by act_smt->ACT_E[R603]->ACT_BLK[R606]->TE_BLK[R2016];
            if ( not_empty else_te_blk )
              r = ::blck_xlate( trace:trace, te_blk:else_te_blk );
              te_blk.code = te_blk.code + else_te_blk.code;
              select one next related by current_act_if->ACT_SMT[R603]->ACT_SMT[R661.''precedes''];
            end if;
          end if;
        end if;
      end if;
    end if;
    if ( "" != te_smt.buffer2 )
      te_blk.code = ( ( te_blk.code + te_smt.buffer2 ) + "\n" );
    end if;
    if ( empty next )
      select one next related by act_smt->ACT_SMT[R661.''precedes''];
    end if;
    act_smt = next;
  end while;
  if ( "" != te_blk.deallocation )
    te_blk.code = ( ( te_blk.code + te_blk.indentation ) + ( te_blk.deallocation + "\n" ) );
  end if;
  if ( "" != te_blk.initialization )
    te_blk.code = ( ( te_blk.indentation + te_blk.initialization ) + ( "\n" + te_blk.code ) );
  end if;
  if ( "" != te_blk.declaration )
    te_blk.code = ( ( te_blk.indentation + te_blk.declaration ) + ( "\n" + te_blk.code ) );
  end if;
  if ( "" != te_blk.code )
T::b(s:te_blk.code);
  end if;
end if;
return T::body();
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("4a928c7a-43b7-40a5-b6a7-3b3442a7e99c",
	"c807f7c0-001f-4e2e-8e7d-e54b74438bc1",
	'trace',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("b4a3d94d-557a-4cd2-9367-89de47bc2259",
	"c807f7c0-001f-4e2e-8e7d-e54b74438bc1",
	'te_blk',
	"5a29d9fb-8b19-4624-9076-30bd2407c215",
	0,
	'',
	"4a928c7a-43b7-40a5-b6a7-3b3442a7e99c",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("5a29d9fb-8b19-4624-9076-30bd2407c215",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Extended Block>',
	'',
	'',
	'../Translation OAL/Translation OAL.xtuml');
INSERT INTO PE_PE
	VALUES ("c807f7c0-001f-4e2e-8e7d-e54b74438bc1",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("7ac679fe-fe90-4589-9321-da458daeb5f9",
	"00000000-0000-0000-0000-000000000000",
	'smt_fors',
	'',
	'//====================================================================
// $RCSfile: q.smt.generate.arc,v $
//
// (c) Copyright 1998-2013 Mentor Graphics Corporation  All rights reserved.
//====================================================================
// ----------------------------------------------------------
// gen for statements
// ----------------------------------------------------------
select many act_fors from instances of ACT_FOR;
for each act_for in act_fors
  select one te_smt related by act_for->ACT_SMT[R603]->TE_SMT[R2038];
  r = ::smt_for( te_smt:te_smt, act_for:act_for );
  te_smt.buffer = r;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("7ac679fe-fe90-4589-9321-da458daeb5f9",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("70f7aa28-6131-4be0-809e-6f9a75700f44",
	"00000000-0000-0000-0000-000000000000",
	'smt_for',
	'',
	'// --------------------------------------------------------
// gen for statement
// --------------------------------------------------------
te_smt = param.te_smt;
act_for = param.act_for;
select one te_class related by act_for->O_OBJ[R670]->TE_CLASS[R2019];
if ( not_empty te_class )
  select any te_file from instances of TE_FILE;
  select any te_for from instances of TE_FOR;
  select one te_blk related by te_smt->TE_BLK[R2078];
  select any te_set from instances of TE_SET;
  select one v_var related by act_for->V_VAR[R614];
  select one te_var related by v_var->TE_VAR[R2039];
  select one set_v_var related by act_for->V_VAR[R652];
  select one set_te_var related by set_v_var->TE_VAR[R2039];
  te_for.isImplicit = act_for.is_implicit;
  te_for.class_name = te_class.GeneratedName;
  te_for.loop_variable = te_var.buffer;
  te_for.set_variable = set_te_var.buffer;
  ws = te_blk.indentation;
  te_smt.buffer2 = ws + "}}}";
  if ( te_for.isImplicit )
    te_smt.declaration = ( te_for.class_name + " * " ) + ( te_for.loop_variable + "=0;" );
  end if;
  iterator = "iter" + te_for.loop_variable;
  current_instance = "ii" + te_for.loop_variable;
  T::include(file:"te_file.arc_path/t.smt.for.c");
  te_smt.OAL = "FOR EACH v_var.Name IN set_v_var.Name";
end if;
return T::body();
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("a0fe11c4-6d9f-4efd-8a3c-cda3a723abbd",
	"70f7aa28-6131-4be0-809e-6f9a75700f44",
	'te_smt',
	"20eb7827-fd8a-4b79-b705-c928064fb55d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("20eb7827-fd8a-4b79-b705-c928064fb55d",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Extended Statement>',
	'',
	'',
	'../Translation OAL/Translation OAL.xtuml');
INSERT INTO S_SPARM
	VALUES ("5d1f7b17-a841-4e67-9ef4-5bc59ddfdae3",
	"70f7aa28-6131-4be0-809e-6f9a75700f44",
	'act_for',
	"cdc78e42-9cd6-4373-9b04-eba50aba4501",
	0,
	'',
	"a0fe11c4-6d9f-4efd-8a3c-cda3a723abbd",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("cdc78e42-9cd6-4373-9b04-eba50aba4501",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<For Stmt>',
	'',
	'',
	'../Body/Body.xtuml');
INSERT INTO PE_PE
	VALUES ("70f7aa28-6131-4be0-809e-6f9a75700f44",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("6a89d994-666d-4169-bca4-987766fcf7a3",
	"00000000-0000-0000-0000-000000000000",
	'smt_ifs',
	'',
	'//
// ----------------------------------------------------------
// gen if statements
// ----------------------------------------------------------
select many act_ifs from instances of ACT_IF;
for each act_if in act_ifs
  select one te_smt related by act_if->ACT_SMT[R603]->TE_SMT[R2038];
  r = ::smt_if( te_smt:te_smt, act_if:act_if );
  te_smt.buffer = r;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("6a89d994-666d-4169-bca4-987766fcf7a3",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("0f9f642f-dc63-4733-903d-47d48180e0eb",
	"00000000-0000-0000-0000-000000000000",
	'smt_if',
	'',
	'// --------------------------------------------------------
// gen if statement
// --------------------------------------------------------
te_smt = param.te_smt;
act_if = param.act_if;
select any te_file from instances of TE_FILE;
select one condition_te_val related by act_if->V_VAL[R625]->TE_VAL[R2040];
select one te_blk related by te_smt->TE_BLK[R2078];
ws = te_blk.indentation;
te_smt.buffer2 = ws + "}";
T::include(file:"te_file.arc_path/t.smt.if.c");
te_smt.OAL = "IF ( condition_te_val.OAL )";
return T::body();
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("148d9b7f-a71a-4ef5-a16a-929ea8d1aa21",
	"0f9f642f-dc63-4733-903d-47d48180e0eb",
	'te_smt',
	"20eb7827-fd8a-4b79-b705-c928064fb55d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("7068e5fb-9d9c-4870-81d0-658d8441bc94",
	"0f9f642f-dc63-4733-903d-47d48180e0eb",
	'act_if',
	"93460d33-1ae8-436f-a8be-11dbbfad9306",
	0,
	'',
	"148d9b7f-a71a-4ef5-a16a-929ea8d1aa21",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("93460d33-1ae8-436f-a8be-11dbbfad9306",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<If Stmt>',
	'',
	'',
	'../Body/Body.xtuml');
INSERT INTO PE_PE
	VALUES ("0f9f642f-dc63-4733-903d-47d48180e0eb",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("c1c5fc04-ede7-4b9c-a6b8-ebb0e587f3c5",
	"00000000-0000-0000-0000-000000000000",
	'smt_whiles',
	'',
	'// ----------------------------------------------------------
// gen while statements
// ----------------------------------------------------------
select many act_whls from instances of ACT_WHL;
for each act_whl in act_whls
  select one te_smt related by act_whl->ACT_SMT[R603]->TE_SMT[R2038];
  r = ::smt_while( te_smt:te_smt, act_whl:act_whl );
  te_smt.buffer = r;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("c1c5fc04-ede7-4b9c-a6b8-ebb0e587f3c5",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("451d7d1f-10aa-466b-849c-28fdffc328c2",
	"00000000-0000-0000-0000-000000000000",
	'smt_while',
	'',
	'// --------------------------------------------------------
// gen while statement
// --------------------------------------------------------
te_smt = param.te_smt;
act_whl = param.act_whl;
select any te_file from instances of TE_FILE;
select one condition_te_val related by act_whl->V_VAL[R626]->TE_VAL[R2040];
select one te_blk related by te_smt->TE_BLK[R2078];
ws = te_blk.indentation;
te_smt.buffer2 = ws + "}";
T::include(file:"te_file.arc_path/t.smt.while.c");
te_smt.OAL = "WHILE ( condition_te_val.OAL )";
return T::body();
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("dd5fe890-0274-467d-be85-e903278dd1b4",
	"451d7d1f-10aa-466b-849c-28fdffc328c2",
	'te_smt',
	"20eb7827-fd8a-4b79-b705-c928064fb55d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("0d88c159-2a9b-4b37-ba40-d10a3cc56eee",
	"451d7d1f-10aa-466b-849c-28fdffc328c2",
	'act_whl',
	"4928f995-a119-4cb9-96e3-0d5ac8c9bcb6",
	0,
	'',
	"dd5fe890-0274-467d-be85-e903278dd1b4",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("4928f995-a119-4cb9-96e3-0d5ac8c9bcb6",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<While Stmt>',
	'',
	'',
	'../Body/Body.xtuml');
INSERT INTO PE_PE
	VALUES ("451d7d1f-10aa-466b-849c-28fdffc328c2",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("0c3ae430-6470-42e2-acde-8eb59a742fee",
	"00000000-0000-0000-0000-000000000000",
	'smt_elses',
	'',
	'// ----------------------------------------------------------
// gen else statements
// ----------------------------------------------------------
select many act_es from instances of ACT_E;
for each act_e in act_es
  select one te_smt related by act_e->ACT_SMT[R603]->TE_SMT[R2038];
  r = ::smt_else( te_smt:te_smt, act_e:act_e );
  te_smt.buffer = r;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("0c3ae430-6470-42e2-acde-8eb59a742fee",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("b336a975-fd3a-496c-9d5e-c9b38bf10d82",
	"00000000-0000-0000-0000-000000000000",
	'smt_else',
	'',
	'// --------------------------------------------------------
// gen else statement
// --------------------------------------------------------
te_smt = param.te_smt;
act_e = param.act_e;
select any te_file from instances of TE_FILE;
select one te_blk related by te_smt->TE_BLK[R2078];
ws = te_blk.indentation;
te_smt.buffer2 = ws + "}";
T::include(file:"te_file.arc_path/t.smt.else.c");
// Skip tracing ELSE because it falls between } and else.
//.assign te_smt.OAL = "ELSE"
te_smt.OAL = "";
return T::body();
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("99643f83-3594-4809-8f9e-224533439a8a",
	"b336a975-fd3a-496c-9d5e-c9b38bf10d82",
	'te_smt',
	"20eb7827-fd8a-4b79-b705-c928064fb55d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("d9de2de2-f22a-484a-b199-7511694db2a7",
	"b336a975-fd3a-496c-9d5e-c9b38bf10d82",
	'act_e',
	"226ec964-d322-4524-b102-3584d0ef9d20",
	0,
	'',
	"99643f83-3594-4809-8f9e-224533439a8a",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("226ec964-d322-4524-b102-3584d0ef9d20",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Else Stmt>',
	'',
	'',
	'../Body/Body.xtuml');
INSERT INTO PE_PE
	VALUES ("b336a975-fd3a-496c-9d5e-c9b38bf10d82",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("7b923a1c-7b2b-4ae3-bcc1-b14cc5b3f584",
	"00000000-0000-0000-0000-000000000000",
	'smt_elifs',
	'',
	'//
// ----------------------------------------------------------
// gen elif statements
// ----------------------------------------------------------
select many act_els from instances of ACT_EL;
for each act_el in act_els
  select one te_smt related by act_el->ACT_SMT[R603]->TE_SMT[R2038];
  r = ::smt_elif( te_smt:te_smt, act_el:act_el );
  te_smt.buffer = r;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("7b923a1c-7b2b-4ae3-bcc1-b14cc5b3f584",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("f8ac27fb-bf60-4705-8bc4-134f56a0bc25",
	"00000000-0000-0000-0000-000000000000",
	'smt_elif',
	'',
	'// --------------------------------------------------------
// gen elif statement
// --------------------------------------------------------
te_smt = param.te_smt;
act_el = param.act_el;
select any te_file from instances of TE_FILE;
select one condition_te_val related by act_el->V_VAL[R659]->TE_VAL[R2040];
select one te_blk related by te_smt->TE_BLK[R2078];
ws = te_blk.indentation;
te_smt.buffer2 = ws + "}";
T::include(file:"te_file.arc_path/t.smt.elif.c");
// Skip tracing ELIF because it falls between } and else.
//.assign te_smt.OAL = "ELIF ( ${condition.OAL} )"
te_smt.OAL = "";
return T::body();
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("b6bf2b23-4500-41fc-b669-017964d16b48",
	"f8ac27fb-bf60-4705-8bc4-134f56a0bc25",
	'te_smt',
	"20eb7827-fd8a-4b79-b705-c928064fb55d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("d9880796-3435-47f1-b4a8-b7baa67fc58b",
	"f8ac27fb-bf60-4705-8bc4-134f56a0bc25",
	'act_el',
	"17a98c4a-2218-46ab-b38b-b353ab34586a",
	0,
	'',
	"b6bf2b23-4500-41fc-b669-017964d16b48",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("17a98c4a-2218-46ab-b38b-b353ab34586a",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<ElseIf Stmt>',
	'',
	'',
	'../Body/Body.xtuml');
INSERT INTO PE_PE
	VALUES ("f8ac27fb-bf60-4705-8bc4-134f56a0bc25",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("370cdaa6-2215-4973-b7a4-7e20e7e6d68d",
	"00000000-0000-0000-0000-000000000000",
	'smt_assigns',
	'',
	'//
// --------------------------------------------------------
// assignment to attribute statements
// --------------------------------------------------------
select many act_ais from instances of ACT_AI;
for each act_ai in act_ais
  select one te_smt related by act_ai->ACT_SMT[R603]->TE_SMT[R2038];
  r = ::smt_assign( te_smt:te_smt, act_ai:act_ai );
  te_smt.buffer = r;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("370cdaa6-2215-4973-b7a4-7e20e7e6d68d",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("7c0a972e-9abb-49e8-8d41-f03d9dd2663b",
	"00000000-0000-0000-0000-000000000000",
	'smt_assign',
	'',
	'//
// --------------------------------------------------------
// gen_asgn_attr_statement
// --------------------------------------------------------
te_smt = param.te_smt;
act_ai = param.act_ai;
select any te_assign from instances of TE_ASSIGN;
select any te_file from instances of TE_FILE;
select any te_instance from instances of TE_INSTANCE;
select any te_set from instances of TE_SET;
select any te_string from instances of TE_STRING;
select one te_blk related by te_smt->TE_BLK[R2078];
ws = te_blk.indentation;
select one r_v_val related by act_ai->V_VAL[R609];
select one l_v_val related by act_ai->V_VAL[R689];
select one r_te_dt related by r_v_val->S_DT[R820]->TE_DT[R2021];
select one l_te_dt related by l_v_val->S_DT[R820]->TE_DT[R2021];
select one r_te_val related by r_v_val->TE_VAL[R2040];
select one l_te_val related by l_v_val->TE_VAL[R2040];
if ( empty l_te_dt )
  l_te_dt = r_te_dt;
end if;
te_assign.Core_Typ = r_te_dt.Core_Typ;
te_assign.rval_dimensions = r_te_val.dimensions;
te_assign.dimensions = l_te_val.dimensions;
te_assign.array_spec = l_te_val.array_spec;
te_assign.left_declaration = "";
te_assign.lval = l_te_val.buffer;
te_assign.rval = r_te_val.buffer;
r = ::V_VAL_drill_for_V_VAL_root( v_val:l_v_val );
root_v_val = r;
te_assign.isImplicit = root_v_val.isImplicit;
if ( te_assign.isImplicit )
  select one root_te_val related by root_v_val->TE_VAL[R2040];
  te_assign.left_declaration = ( r_te_dt.ExtName + " " ) + root_te_val.buffer;
  if ( 8 == r_te_dt.Core_Typ )
    select one te_class related by root_v_val->V_IRF[R801]->V_VAR[R808]->V_INT[R814]->O_OBJ[R818]->TE_CLASS[R2019];
    if ( not_empty te_class )
      te_assign.left_declaration = ( te_class.GeneratedName + " * " ) + ( root_te_val.buffer + ";" );
      te_smt.declaration = te_assign.left_declaration;
    end if;
  elif ( ( 9 == te_assign.Core_Typ ) or ( 21 == te_assign.Core_Typ ) )
    // First OAL use of inst_ref_set<Object> handle set. Initialize with class extent.
    te_smt.declaration = "te_set.scopete_set.base_class te_assign.lval_space={0}; te_set.scopete_set.base_class * te_assign.lval = &te_assign.lval_space;";
    te_smt.deallocation = ( ( te_set.module + te_set.clear ) + ( "( " + te_assign.lval ) ) + " );";
    // Push deallocation into the block so that it is available at gen time for break/continue/return.
    te_blk.deallocation = te_blk.deallocation + te_smt.deallocation;
  else
    te_smt.declaration = ( te_assign.left_declaration + te_assign.array_spec ) + ";";
  end if;
end if;
element_count = 0;
select one r_te_dim related by r_te_val->TE_DIM[R2079];
if ( not_empty r_te_dim )
  element_count = r_te_dim.elementCount;
end if;
is_parameter = false;
select one v_pvl related by r_v_val->V_PVL[R801];
if ( not_empty v_pvl )
  is_parameter = true;
end if;
T::include(file:"te_file.arc_path/t.smt.assign.c");
te_smt.OAL = "ASSIGN l_te_val.OAL = r_te_val.OAL";
return T::body();
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("5be87dde-3b91-4a0d-bcfa-b05af310de87",
	"7c0a972e-9abb-49e8-8d41-f03d9dd2663b",
	'te_smt',
	"20eb7827-fd8a-4b79-b705-c928064fb55d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("dc071136-1d11-4589-a9e8-7f808dba7520",
	"7c0a972e-9abb-49e8-8d41-f03d9dd2663b",
	'act_ai',
	"7bee7ca6-822c-4add-96b4-6f0703edad25",
	0,
	'',
	"5be87dde-3b91-4a0d-bcfa-b05af310de87",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("7bee7ca6-822c-4add-96b4-6f0703edad25",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Assign to Member>',
	'',
	'',
	'../Instance Access/Instance Access.xtuml');
INSERT INTO PE_PE
	VALUES ("7c0a972e-9abb-49e8-8d41-f03d9dd2663b",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("f70e560e-8b1b-464a-ac67-e9db0f7113fb",
	"00000000-0000-0000-0000-000000000000",
	'V_VAL_drill_for_V_VAL_root',
	'',
	'//
// Find the root of the given value instance.  We may need to 
// recurse down in the case of structures and arrays.
v_val = param.v_val;
result = v_val;
select one root_v_val related by v_val->V_AER[R801]->V_VAL[R838];
if ( not_empty root_v_val )
  r = ::V_VAL_drill_for_V_VAL_root( v_val:root_v_val );
  result = r;
else
  select one root_v_val related by v_val->V_MVL[R801]->V_VAL[R837];
  if ( not_empty root_v_val )
    r = ::V_VAL_drill_for_V_VAL_root( v_val:root_v_val );
    result = r;
  end if;
end if;
return result;
',
	"6c890e9d-8533-4087-ac72-ea19e3290a3c",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("225a9854-fd39-44f1-8156-98b4c77c974a",
	"f70e560e-8b1b-464a-ac67-e9db0f7113fb",
	'v_val',
	"6c890e9d-8533-4087-ac72-ea19e3290a3c",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("6c890e9d-8533-4087-ac72-ea19e3290a3c",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Value>',
	'',
	'',
	'../Value/Value.xtuml');
INSERT INTO PE_PE
	VALUES ("f70e560e-8b1b-464a-ac67-e9db0f7113fb",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("64551f58-aeb2-47a7-8b28-b2bf08415700",
	"00000000-0000-0000-0000-000000000000",
	'smt_create_instances',
	'',
	'//
//
// --------------------------------------------------------
// create instance statements
// --------------------------------------------------------
select many act_crs from instances of ACT_CR;
for each act_cr in act_crs
  select one te_smt related by act_cr->ACT_SMT[R603]->TE_SMT[R2038];
  r = ::smt_create_instance( te_smt:te_smt, act_cr:act_cr );
  te_smt.buffer = r;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("64551f58-aeb2-47a7-8b28-b2bf08415700",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("58e1ed37-0355-4b3b-9856-812a87710995",
	"00000000-0000-0000-0000-000000000000",
	'smt_create_instance',
	'',
	'//
// --------------------------------------------------------
// create instance statement
// --------------------------------------------------------
te_smt = param.te_smt;
act_cr = param.act_cr;
select one o_obj related by act_cr->O_OBJ[R671];
select one te_class related by o_obj->TE_CLASS[R2019];
if ( not_empty te_class )
  select any te_file from instances of TE_FILE;
  select one te_blk related by te_smt->TE_BLK[R2078];
  ws = te_blk.indentation;
  select one v_var related by act_cr->V_VAR[R633];
  select one te_var related by v_var->TE_VAR[R2039];
  select one te_c related by te_class->TE_C[R2064];
  select any te_instance from instances of TE_INSTANCE;
  r = ::GetDomainTypeIDFromString( dom_name:te_c.Name );
  dom_id = r;
  r = ::AutoInitializeUniqueIDs( te_class:te_class, instance:te_var.buffer );
  init_uniques = r;
  if ( act_cr.is_implicit )
    te_smt.declaration = ( ( te_class.GeneratedName + " * " ) + ( te_var.buffer + ";" ) );
  end if;
  T::include(file:"te_file.arc_path/t.smt.create_instance.c");
  te_smt.OAL = "CREATE OBJECT INSTANCE v_var.Name OF te_class.Key_Lett";
end if;
return T::body();
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("b8d13458-a4f6-4f74-88d6-a6bb893d0154",
	"58e1ed37-0355-4b3b-9856-812a87710995",
	'te_smt',
	"20eb7827-fd8a-4b79-b705-c928064fb55d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("023e607e-b78d-4d2e-9edf-23f299e5f638",
	"58e1ed37-0355-4b3b-9856-812a87710995",
	'act_cr',
	"528c3b46-471a-4fed-92ed-ff4b84dc5137",
	0,
	'',
	"b8d13458-a4f6-4f74-88d6-a6bb893d0154",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("528c3b46-471a-4fed-92ed-ff4b84dc5137",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Create>',
	'',
	'',
	'../Instance Access/Instance Access.xtuml');
INSERT INTO PE_PE
	VALUES ("58e1ed37-0355-4b3b-9856-812a87710995",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("fe5a0587-9e01-4d9f-b0f6-48621f84672d",
	"00000000-0000-0000-0000-000000000000",
	'smt_delete_instances',
	'',
	'//
// --------------------------------------------------------
// delete instance statements
// --------------------------------------------------------
select many act_dels from instances of ACT_DEL;
del_count = 0;
for each act_del in act_dels
  select one te_smt related by act_del->ACT_SMT[R603]->TE_SMT[R2038];
  r = ::smt_delete_instance( te_smt:te_smt, act_del:act_del );
  te_smt.buffer = r;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("fe5a0587-9e01-4d9f-b0f6-48621f84672d",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("249836fc-7954-46a5-b22f-562d6fe9ade5",
	"00000000-0000-0000-0000-000000000000",
	'smt_delete_instance',
	'',
	'//
// --------------------------------------------------------
// delete instance statement
// --------------------------------------------------------
te_smt = param.te_smt;
act_del = param.act_del;
select one v_var related by act_del->V_VAR[R634];
select one te_class related by v_var->V_INT[R814]->O_OBJ[R818]->TE_CLASS[R2019];
if ( not_empty te_class )
  select any te_file from instances of TE_FILE;
  select any te_instance from instances of TE_INSTANCE;
  select one te_blk related by te_smt->TE_BLK[R2078];
  ws = te_blk.indentation;
  select one te_var related by v_var->TE_VAR[R2039];
  select one te_c related by te_class->TE_C[R2064];
  r = ::GetDomainTypeIDFromString( dom_name:te_c.Name );
  dom_id = r;
  T::include(file:"te_file.arc_path/t.smt.delete_instance.c");
  te_smt.OAL = "DELETE OBJECT INSTANCE v_var.Name";
end if;
return T::body();
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("d1591805-f14b-4326-ad83-5127ff8e9e0d",
	"249836fc-7954-46a5-b22f-562d6fe9ade5",
	'te_smt',
	"20eb7827-fd8a-4b79-b705-c928064fb55d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("dc192725-613c-46db-aa01-a0a3f7805783",
	"249836fc-7954-46a5-b22f-562d6fe9ade5",
	'act_del',
	"e208c327-0aa9-4cd5-9c95-47be6ada1cd5",
	0,
	'',
	"d1591805-f14b-4326-ad83-5127ff8e9e0d",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("e208c327-0aa9-4cd5-9c95-47be6ada1cd5",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Delete>',
	'',
	'',
	'../Instance Access/Instance Access.xtuml');
INSERT INTO PE_PE
	VALUES ("249836fc-7954-46a5-b22f-562d6fe9ade5",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("184b01eb-d5b3-4b16-9f79-6dc8cf2f9d87",
	"00000000-0000-0000-0000-000000000000",
	'smt_create_events_to_instance',
	'',
	'// --------------------------------------------------------
// create event instance to instance statements
// --------------------------------------------------------
select many e_ceis from instances of E_CEI;
for each e_cei in e_ceis
  select one e_csme related by e_cei->E_CSME[R704];
  select one te_smt related by e_csme->E_CES[R702]->E_ESS[R701]->ACT_SMT[R603]->TE_SMT[R2038];
  select one recipient_v_var related by e_cei->V_VAR[R711];
  select one recipient_te_var related by recipient_v_var->TE_VAR[R2039];
  r = ::smt_create_event( te_smt:te_smt, e_csme:e_csme, recipient:recipient_te_var.buffer, recipient_OAL:recipient_v_var.Name );
  te_smt.buffer = r;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("184b01eb-d5b3-4b16-9f79-6dc8cf2f9d87",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("490358cc-3e1e-48ae-8e8a-8d044e201047",
	"00000000-0000-0000-0000-000000000000",
	'smt_create_events_to_class',
	'',
	'//
// --------------------------------------------------------
// create event instance to class statements
// --------------------------------------------------------
select many e_ceas from instances of E_CEA;
for each e_cea in e_ceas
  select one e_csme related by e_cea->E_CSME[R704];
  select one te_smt related by e_csme->E_CES[R702]->E_ESS[R701]->ACT_SMT[R603]->TE_SMT[R2038];
  r = ::smt_create_event( te_smt:te_smt, e_csme:e_csme, recipient:"0", recipient_OAL:"CLASS" );
  te_smt.buffer = r;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("490358cc-3e1e-48ae-8e8a-8d044e201047",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("a2c5ecfb-ea40-4e1a-a018-d988e4a366f0",
	"00000000-0000-0000-0000-000000000000",
	'smt_create_events_to_creator',
	'',
	'//
// --------------------------------------------------------
// create event instance to creator statements
// --------------------------------------------------------
select many e_cecs from instances of E_CEC;
for each e_cec in e_cecs
  select one e_csme related by e_cec->E_CSME[R704];
  select one te_smt related by e_csme->E_CES[R702]->E_ESS[R701]->ACT_SMT[R603]->TE_SMT[R2038];
  r = ::smt_create_event( te_smt:te_smt, e_csme:e_csme, recipient:"0", recipient_OAL:"CREATOR" );
  te_smt.buffer = r;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("a2c5ecfb-ea40-4e1a-a018-d988e4a366f0",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("772b83fb-bd5d-4573-8b6b-de9e250c1352",
	"00000000-0000-0000-0000-000000000000",
	'smt_create_event',
	'',
	'//
// --------------------------------------------------------
// create event instance statement
// --------------------------------------------------------
te_smt = param.te_smt;
e_csme = param.e_csme;
recipient = param.recipient;
recipient_OAL = param.recipient_OAL;
select one e_ces related by e_csme->E_CES[R702];
select one e_ess related by e_ces->E_ESS[R701];
select one sm_evt related by e_csme->SM_EVT[R706];
select one o_obj related by sm_evt->SM_SM[R502]->SM_ISM[R517]->O_OBJ[R518];
if ( empty o_obj )
  select one o_obj related by sm_evt->SM_SM[R502]->SM_ASM[R517]->O_OBJ[R519];
end if;
select one te_class related by o_obj->TE_CLASS[R2019];
if ( not_empty te_class )
  select one sm_pevt related by sm_evt->SM_PEVT[R525];
  if ( not_empty sm_pevt )
    select any poly_sm_evt related by o_obj->SM_ISM[R518]->SM_SM[R517]->SM_EVT[R502] where ( selected.Drv_Lbl == ( sm_evt.Drv_Lbl + "*" ) );
    if ( not_empty poly_sm_evt )
      sm_evt = poly_sm_evt;
    end if;
  end if;
  select one te_evt related by sm_evt->TE_EVT[R2036];
  if ( te_evt.Used )
    select any te_file from instances of TE_FILE;
    select any te_eq from instances of TE_EQ;
    select any te_thread from instances of TE_THREAD;
    select any te_instance from instances of TE_INSTANCE;
    select one te_blk related by te_smt->TE_BLK[R2078];
    ws = te_blk.indentation;
    select one v_var related by e_ces->V_VAR[R710];
    select one te_var related by v_var->TE_VAR[R2039];
    select many v_pars related by e_ess->V_PAR[R700];
    parameters = "";
    parameter_OAL = "";
    if ( not_empty v_pars )
      delimeter = "";
      for each v_par in v_pars
        select one par_te_dt related by v_par->V_VAL[R800]->S_DT[R820]->TE_DT[R2021];
        select one par_te_val related by v_par->V_VAL[R800]->TE_VAL[R2040];
        r = ::t_oal_smt_event_parameters( evt_msg_var:te_var.buffer, parameter:v_par.Name, value:par_te_val.buffer, value_type:par_te_dt.Core_Typ, ws:te_blk.indentation );
        parameters = parameters + r;
        parameter_OAL = ( parameter_OAL + delimeter ) + par_te_val.OAL;
        delimeter = ", ";
      end for;
    end if;
    if ( e_ces.is_implicit )
      if ( "" == parameters )
        te_smt.declaration = ( ( te_eq.base_event_type + " * " ) + ( te_var.buffer + ";" ) );
      else
        te_smt.declaration = ( ( te_evt.GeneratedName + " * " ) + ( te_var.buffer + ";" ) );
      end if;
    end if;
    T::include(file:"te_file.arc_path/t.smt.create_event.c");
    te_smt.OAL = "CREATE EVENT INSTANCE v_var.Name( parameter_OAL ) TO recipient_OAL";
  end if;
end if;
return T::body();
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("48daefd3-b1fe-410e-b6b0-f0409773fdfd",
	"772b83fb-bd5d-4573-8b6b-de9e250c1352",
	'te_smt',
	"20eb7827-fd8a-4b79-b705-c928064fb55d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("48ce4ce4-31a8-46d4-98b0-29d81c91d659",
	"772b83fb-bd5d-4573-8b6b-de9e250c1352",
	'e_csme',
	"2e981d36-5dd1-42db-b777-f4ebdad03733",
	0,
	'',
	"48daefd3-b1fe-410e-b6b0-f0409773fdfd",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("2e981d36-5dd1-42db-b777-f4ebdad03733",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Create SM Event Statement>',
	'',
	'',
	'../Event/Event.xtuml');
INSERT INTO S_SPARM
	VALUES ("9a669e1b-c0a8-4f47-88b9-f6c13c7f8d48",
	"772b83fb-bd5d-4573-8b6b-de9e250c1352",
	'recipient',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"48ce4ce4-31a8-46d4-98b0-29d81c91d659",
	'');
INSERT INTO S_SPARM
	VALUES ("af72f436-e9ae-46aa-a869-f4b360a02079",
	"772b83fb-bd5d-4573-8b6b-de9e250c1352",
	'recipient_OAL',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"9a669e1b-c0a8-4f47-88b9-f6c13c7f8d48",
	'');
INSERT INTO PE_PE
	VALUES ("772b83fb-bd5d-4573-8b6b-de9e250c1352",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("bb601ae9-d3d1-4952-83cc-a313b0c57d3c",
	"00000000-0000-0000-0000-000000000000",
	'smt_relates',
	'',
	'//
// --------------------------------------------------------
//  relate statements
// --------------------------------------------------------
select many act_rels from instances of ACT_REL;
for each act_rel in act_rels
  select one te_smt related by act_rel->ACT_SMT[R603]->TE_SMT[R2038];
  r = ::smt_relate( te_smt:te_smt, act_rel:act_rel );
  te_smt.buffer = r;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("bb601ae9-d3d1-4952-83cc-a313b0c57d3c",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("2ee03d89-db9f-42ec-848e-ddd3c5eebc7b",
	"00000000-0000-0000-0000-000000000000",
	'smt_relate',
	'',
	'//
// --------------------------------------------------------
//  relate statement
// --------------------------------------------------------
te_smt = param.te_smt;
act_rel = param.act_rel;
select one one_v_var related by act_rel->V_VAR[R615];
select one one_o_obj related by one_v_var->V_INT[R814]->O_OBJ[R818];
select one te_class related by one_o_obj->TE_CLASS[R2019];
if ( not_empty te_class )
  select any te_file from instances of TE_FILE;
  select any te_target from instances of TE_TARGET;
  select one te_blk related by te_smt->TE_BLK[R2078];
  ws = te_blk.indentation;
  select one one_te_var related by one_v_var->TE_VAR[R2039];
  select one oth_v_var related by act_rel->V_VAR[R616];
  select one oth_te_var related by oth_v_var->TE_VAR[R2039];
  select one oth_o_obj related by oth_v_var->V_INT[R814]->O_OBJ[R818];
  select one r_rel related by act_rel->R_REL[R653];
  r1 = ::is_reflexive( r_rel:r_rel );
  is_reflexive = r1;
  r2 = ::TE_REL_IsLeftFormalizer( left_o_obj:one_o_obj, r_rel:r_rel, rel_phrase:act_rel.relationship_phrase );
  left_is_formalizer = r2;
  o_obj = oth_o_obj;
  if ( left_is_formalizer )
    o_obj = one_o_obj;
  end if;
  r = ::GetRelateToName( o_obj:o_obj, r_rel:r_rel, rel_phrase:act_rel.relationship_phrase );
  relate_method = r;
  thismodule = "";
  if ( "C" != te_target.language )
    thismodule = ", thismodule";
  end if;
  T::include(file:"te_file.arc_path/t.smt.relate.c");
  te_smt.OAL = "RELATE one_v_var.Name TO oth_v_var.Name ACROSS Rr_rel.Numb";
end if;
return T::body();
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("80be595a-f156-4df7-9e0b-eeef0728300c",
	"2ee03d89-db9f-42ec-848e-ddd3c5eebc7b",
	'te_smt',
	"20eb7827-fd8a-4b79-b705-c928064fb55d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("1d3d0e23-82e7-45ae-a2a5-1b89a1bb1771",
	"2ee03d89-db9f-42ec-848e-ddd3c5eebc7b",
	'act_rel',
	"f1fd3e4e-7abd-4897-838f-91d7ad1f8bdd",
	0,
	'',
	"80be595a-f156-4df7-9e0b-eeef0728300c",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("f1fd3e4e-7abd-4897-838f-91d7ad1f8bdd",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Relate>',
	'',
	'',
	'../Relate And Unrelate/Relate And Unrelate.xtuml');
INSERT INTO PE_PE
	VALUES ("2ee03d89-db9f-42ec-848e-ddd3c5eebc7b",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("40da513f-2c1d-4fb7-ab6b-c1cc57b18bf6",
	"00000000-0000-0000-0000-000000000000",
	'smt_relate_usings',
	'',
	'//
// --------------------------------------------------------
select many act_rus from instances of ACT_RU;
for each act_ru in act_rus
  select one te_smt related by act_ru->ACT_SMT[R603]->TE_SMT[R2038];
  r = ::smt_relate_using( te_smt:te_smt, act_ru:act_ru );
  te_smt.buffer = r;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("40da513f-2c1d-4fb7-ab6b-c1cc57b18bf6",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("d0b754ce-675a-47e4-b235-39fde9988a60",
	"00000000-0000-0000-0000-000000000000",
	'smt_relate_using',
	'',
	'//
// --------------------------------------------------------
te_smt = param.te_smt;
act_ru = param.act_ru;
select one te_blk related by te_smt->TE_BLK[R2078];
ws = te_blk.indentation;
select one r_rel related by act_ru->R_REL[R654];
r = ::is_reflexive( r_rel:r_rel );
is_reflexive = r;
one_rel_phrase = "";
oth_rel_phrase = "";
if ( is_reflexive )
  select one aone related by r_rel->R_ASSOC[R206]->R_AONE[R209];
  select one aoth related by r_rel->R_ASSOC[R206]->R_AOTH[R210];
  select one one_obj related by act_ru->V_VAR[R617]->V_INT[R814]->O_OBJ[R818];
  if ( one_obj.Obj_ID == aone.Obj_ID )
    if ( aone.Txt_Phrs == act_ru.relationship_phrase )
      one_rel_phrase = aone.Txt_Phrs;
      oth_rel_phrase = aoth.Txt_Phrs;
    else
      one_rel_phrase = aoth.Txt_Phrs;
      oth_rel_phrase = aone.Txt_Phrs;
    end if;
  else
    if ( aoth.Txt_Phrs == act_ru.relationship_phrase )
      one_rel_phrase = aoth.Txt_Phrs;
      oth_rel_phrase = aone.Txt_Phrs;
    else
      one_rel_phrase = aone.Txt_Phrs;
      oth_rel_phrase = aoth.Txt_Phrs;
    end if;
  end if;
end if;
select one one_v_var related by act_ru->V_VAR[R617];
select one one_te_var related by one_v_var->TE_VAR[R2039];
select one one_o_obj related by one_v_var->V_INT[R814]->O_OBJ[R818];
select one oth_v_var related by act_ru->V_VAR[R618];
select one oth_te_var related by oth_v_var->TE_VAR[R2039];
select one oth_o_obj related by oth_v_var->V_INT[R814]->O_OBJ[R818];
select one ass_v_var related by act_ru->V_VAR[R619];
select one ass_te_var related by ass_v_var->TE_VAR[R2039];
select one ass_o_obj related by ass_v_var->V_INT[R814]->O_OBJ[R818];
select any te_file from instances of TE_FILE;
select any te_target from instances of TE_TARGET;
thismodule = "";
if ( "C" != te_target.language )
  thismodule = ", thismodule";
end if;
r1 = ::GetAssociativeLinkMethodName( left_o_obj:one_o_obj, right_o_obj:oth_o_obj, assoc_o_obj:ass_o_obj, r_rel:r_rel, rel_phrase:act_ru.relationship_phrase );
method = r1;
left_obj_is_aone = false;
select one r_aone related by r_rel->R_ASSOC[R206]->R_AONE[R209];
if ( one_o_obj.Obj_ID == r_aone.Obj_ID )
  left_obj_is_aone = true;
end if;
T::include(file:"te_file.arc_path/t.smt.relate_using.c");
te_smt.OAL = "RELATE one_te_var.OAL TO oth_te_var.OAL ACROSS Rr_rel.Numb USING ass_te_var.OAL";
return T::body();
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("346d573a-85bf-41d4-bf6c-6b9390622af8",
	"d0b754ce-675a-47e4-b235-39fde9988a60",
	'te_smt',
	"20eb7827-fd8a-4b79-b705-c928064fb55d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("030ce0ed-2391-434a-9e48-04772c4641f3",
	"d0b754ce-675a-47e4-b235-39fde9988a60",
	'act_ru',
	"0bc12e99-e525-4061-9a2f-722aa9576102",
	0,
	'',
	"346d573a-85bf-41d4-bf6c-6b9390622af8",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("0bc12e99-e525-4061-9a2f-722aa9576102",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Relate Using>',
	'',
	'',
	'../Relate And Unrelate/Relate And Unrelate.xtuml');
INSERT INTO PE_PE
	VALUES ("d0b754ce-675a-47e4-b235-39fde9988a60",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("ea31de33-08cf-4404-b762-f9b221488c5b",
	"00000000-0000-0000-0000-000000000000",
	'smt_unrelates',
	'',
	'//
// --------------------------------------------------------
select many act_unrs from instances of ACT_UNR;
for each act_unr in act_unrs
  select one te_smt related by act_unr->ACT_SMT[R603]->TE_SMT[R2038];
  r = ::smt_unrelate( te_smt:te_smt, act_unr:act_unr );
  te_smt.buffer = r;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("ea31de33-08cf-4404-b762-f9b221488c5b",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("ed0d1ed1-e571-4f2d-bd7b-3406a13d2050",
	"00000000-0000-0000-0000-000000000000",
	'smt_unrelate',
	'',
	'//
// --------------------------------------------------------
te_smt = param.te_smt;
act_unr = param.act_unr;
select one one_v_var related by act_unr->V_VAR[R620];
select one one_o_obj related by one_v_var->V_INT[R814]->O_OBJ[R818];
select one te_class related by one_o_obj->TE_CLASS[R2019];
if ( not_empty te_class )
  select any te_file from instances of TE_FILE;
  select any te_target from instances of TE_TARGET;
  select one te_blk related by te_smt->TE_BLK[R2078];
  ws = te_blk.indentation;
  select one one_te_var related by one_v_var->TE_VAR[R2039];
  select one oth_v_var related by act_unr->V_VAR[R621];
  select one oth_te_var related by oth_v_var->TE_VAR[R2039];
  select one oth_o_obj related by oth_v_var->V_INT[R814]->O_OBJ[R818];
  select one r_rel related by act_unr->R_REL[R655];
  r1 = ::is_reflexive( r_rel:r_rel );
  is_reflexive = r1;
  r2 = ::TE_REL_IsLeftFormalizer( left_o_obj:one_o_obj, r_rel:r_rel, rel_phrase:act_unr.relationship_phrase );
  left_is_formalizer = r2;
  o_obj = oth_o_obj;
  if ( left_is_formalizer )
    o_obj = one_o_obj;
  end if;
  r = ::GetUnrelateFromName( o_obj:o_obj, r_rel:r_rel, rel_phrase:act_unr.relationship_phrase );
  method = r;
  thismodule = "";
  if ( "C" != te_target.language )
    thismodule = ", thismodule";
  end if;
  T::include(file:"te_file.arc_path/t.smt.unrelate.c");
  te_smt.OAL = "UNRELATE one_te_var.OAL FROM oth_te_var.OAL ACROSS Rr_rel.Numb";
end if;
return T::body();
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("432bbf40-9679-442d-a3fa-cdaa86cb0348",
	"ed0d1ed1-e571-4f2d-bd7b-3406a13d2050",
	'te_smt',
	"20eb7827-fd8a-4b79-b705-c928064fb55d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("8e13f21d-4968-4e55-8bc8-8fca6c6b3722",
	"ed0d1ed1-e571-4f2d-bd7b-3406a13d2050",
	'act_unr',
	"027da7b2-41e8-496d-bd23-4e885028c3fa",
	0,
	'',
	"432bbf40-9679-442d-a3fa-cdaa86cb0348",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("027da7b2-41e8-496d-bd23-4e885028c3fa",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Unrelate>',
	'',
	'',
	'../Relate And Unrelate/Relate And Unrelate.xtuml');
INSERT INTO PE_PE
	VALUES ("ed0d1ed1-e571-4f2d-bd7b-3406a13d2050",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("36c564fc-8db1-4dca-a63a-47372efddb5b",
	"00000000-0000-0000-0000-000000000000",
	'smt_unrelate_usings',
	'',
	'//
// --------------------------------------------------------
select many act_urus from instances of ACT_URU;
for each act_uru in act_urus
  select one te_smt related by act_uru->ACT_SMT[R603]->TE_SMT[R2038];
  r = ::smt_unrelate_using( te_smt:te_smt, act_uru:act_uru );
  te_smt.buffer = r;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("36c564fc-8db1-4dca-a63a-47372efddb5b",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("49e72d41-52d0-4b96-8047-888d43cbb5bf",
	"00000000-0000-0000-0000-000000000000",
	'smt_unrelate_using',
	'',
	'//
te_smt = param.te_smt;
act_uru = param.act_uru;
select one te_blk related by te_smt->TE_BLK[R2078];
ws = te_blk.indentation;
select one r_rel related by act_uru->R_REL[R656];
r = ::is_reflexive( r_rel:r_rel );
is_reflexive = r;
one_rel_phrase = "";
oth_rel_phrase = "";
if ( is_reflexive )
  select one aone related by r_rel->R_ASSOC[R206]->R_AONE[R209];
  select one aoth related by r_rel->R_ASSOC[R206]->R_AOTH[R210];
  select one one_obj related by act_uru->V_VAR[R622]->V_INT[R814]->O_OBJ[R818];
  if ( one_obj.Obj_ID == aone.Obj_ID )
    if ( aone.Txt_Phrs == act_uru.relationship_phrase )
      one_rel_phrase = aone.Txt_Phrs;
      oth_rel_phrase = aoth.Txt_Phrs;
    else
      one_rel_phrase = aoth.Txt_Phrs;
      oth_rel_phrase = aone.Txt_Phrs;
    end if;
  else
    if ( aoth.Txt_Phrs == act_uru.relationship_phrase )
      one_rel_phrase = aoth.Txt_Phrs;
      oth_rel_phrase = aone.Txt_Phrs;
    else
      one_rel_phrase = aone.Txt_Phrs;
      oth_rel_phrase = aoth.Txt_Phrs;
    end if;
  end if;
end if;
select one one_v_var related by act_uru->V_VAR[R622];
select one one_te_var related by one_v_var->TE_VAR[R2039];
select one one_o_obj related by one_v_var->V_INT[R814]->O_OBJ[R818];
select one oth_v_var related by act_uru->V_VAR[R623];
select one oth_te_var related by oth_v_var->TE_VAR[R2039];
select one oth_o_obj related by oth_v_var->V_INT[R814]->O_OBJ[R818];
select one ass_v_var related by act_uru->V_VAR[R624];
select one ass_te_var related by ass_v_var->TE_VAR[R2039];
select one ass_o_obj related by ass_v_var->V_INT[R814]->O_OBJ[R818];
select any te_file from instances of TE_FILE;
select any te_target from instances of TE_TARGET;
thismodule = "";
if ( "C" != te_target.language )
  thismodule = ", thismodule";
end if;
r1 = ::GetAssociativeUnlinkMethodName( left_o_obj:one_o_obj, right_o_obj:oth_o_obj, assoc_o_obj:ass_o_obj, r_rel:r_rel, rel_phrase:act_uru.relationship_phrase );
method = r1;
left_obj_is_aone = false;
select one r_aone related by r_rel->R_ASSOC[R206]->R_AONE[R209];
if ( one_o_obj.Obj_ID == r_aone.Obj_ID )
  left_obj_is_aone = true;
end if;
T::include(file:"te_file.arc_path/t.smt.unrelate_using.c");
te_smt.OAL = "UNRELATE one_te_var.OAL FROM oth_te_var.OAL ACROSS Rr_rel.Numb USING ass_te_var.OAL";
return T::body();
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("c8adfb43-8320-4b99-9aed-a876d4a38063",
	"49e72d41-52d0-4b96-8047-888d43cbb5bf",
	'te_smt',
	"20eb7827-fd8a-4b79-b705-c928064fb55d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("5fd7d3be-c316-4ad4-88fb-996a2fe9010e",
	"49e72d41-52d0-4b96-8047-888d43cbb5bf",
	'act_uru',
	"0241bbac-67e0-4ca8-a2ab-5ee6aac4a6a4",
	0,
	'',
	"c8adfb43-8320-4b99-9aed-a876d4a38063",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("0241bbac-67e0-4ca8-a2ab-5ee6aac4a6a4",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Unrelate Using>',
	'',
	'',
	'../Relate And Unrelate/Relate And Unrelate.xtuml');
INSERT INTO PE_PE
	VALUES ("49e72d41-52d0-4b96-8047-888d43cbb5bf",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("04050d72-58be-4830-a66a-4f9bd85b964b",
	"00000000-0000-0000-0000-000000000000",
	'smt_selects',
	'',
	'//
// --------------------------------------------------------
// select statements
// --------------------------------------------------------
select many act_fios from instances of ACT_FIO;
for each act_fio in act_fios
  select one te_smt related by act_fio->ACT_SMT[R603]->TE_SMT[R2038];
  r = ::smt_select( te_smt:te_smt, act_fio:act_fio );
  te_smt.buffer = r;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("04050d72-58be-4830-a66a-4f9bd85b964b",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("37520d1a-3e95-4197-98c5-0281b8e10b5d",
	"00000000-0000-0000-0000-000000000000",
	'smt_select',
	'',
	'//
// --------------------------------------------------------
// select instance statement
// --------------------------------------------------------
te_smt = param.te_smt;
act_fio = param.act_fio;
select one o_obj related by act_fio->O_OBJ[R677];
select one te_class related by o_obj->TE_CLASS[R2019];
if ( not_empty te_class )
  select any te_file from instances of TE_FILE;
  select any te_extent from instances of TE_EXTENT;
  select any te_select from instances of TE_SELECT;
  select any te_set from instances of TE_SET;
  select one te_blk related by te_smt->TE_BLK[R2078];
  ws = te_blk.indentation;
  select one v_var related by act_fio->V_VAR[R639];
  select one te_var related by v_var->TE_VAR[R2039];
  te_select.is_implicit = act_fio.is_implicit;
  te_select.class_name = te_class.GeneratedName;
  te_select.target_class_name = te_class.Name;
  te_select.multiplicity = act_fio.cardinality;
  te_select.var_name = te_var.buffer;
  r = ::GetFixedSizeClassExtentInfo( te_class:te_class );
  extent = r;
  if ( te_select.multiplicity == "any" )
    if ( te_select.is_implicit )
      // Declare (first OAL usage of) inst_ref<Object> handle variable.
      te_smt.declaration = "te_select.class_name * te_select.var_name=0;";
    end if;
  elif ( te_select.multiplicity == "many" )
    if ( te_select.is_implicit )
      // First OAL use of inst_ref_set<Object> handle set. Initialize with class extent.
      te_smt.declaration = "te_set.scopete_set.base_class te_select.var_name_space={0}; te_set.scopete_set.base_class * te_select.var_name = &te_select.var_name_space; /* te_select.var_name (te_class.Key_Lett) */";
      te_smt.deallocation = "te_set.modulete_set.clear( te_select.var_name );";
      // Push deallocation into the block so that it is available at gen time for break/continue/return.
      te_blk.deallocation = te_blk.deallocation + te_smt.deallocation;
    end if;
  else
    T::print(s:"\nERROR:  select multiplicity is not any or many.");
    T::exit(i:101);
  end if;
  T::include(file:"te_file.arc_path/t.smt.select.c");
  te_smt.OAL = "SELECT act_fio.cardinality v_var.Name FROM INSTANCES OF te_class.Key_Lett";
end if;
return T::body();
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("d04b280b-0e67-4e51-a383-98fe957cb997",
	"37520d1a-3e95-4197-98c5-0281b8e10b5d",
	'te_smt',
	"20eb7827-fd8a-4b79-b705-c928064fb55d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("9b09bb62-ac7d-4ae7-bbd4-4bb1dcc51760",
	"37520d1a-3e95-4197-98c5-0281b8e10b5d",
	'act_fio',
	"7c224141-b812-43f9-b35b-3b50adc6266d",
	0,
	'',
	"d04b280b-0e67-4e51-a383-98fe957cb997",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("7c224141-b812-43f9-b35b-3b50adc6266d",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Select From Instances>',
	'',
	'',
	'../Selection/Selection.xtuml');
INSERT INTO PE_PE
	VALUES ("37520d1a-3e95-4197-98c5-0281b8e10b5d",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("326ff648-4cfd-426a-936a-efcc7adb6659",
	"00000000-0000-0000-0000-000000000000",
	'smt_select_wheres',
	'',
	'//
// --------------------------------------------------------
// select instance where statements
// --------------------------------------------------------
select many act_fiws from instances of ACT_FIW;
for each act_fiw in act_fiws
  select one te_smt related by act_fiw->ACT_SMT[R603]->TE_SMT[R2038];
  r = ::smt_select_where( te_smt:te_smt, act_fiw:act_fiw );
  te_smt.buffer = r;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("326ff648-4cfd-426a-936a-efcc7adb6659",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("747ba7d9-56dd-4f41-a9b5-5f4e8dda17c8",
	"00000000-0000-0000-0000-000000000000",
	'v_val_find_v_slr_return_buffer',
	'',
	'//
//
//
// Recursively drill down into the where clause expression marking
// selected attributes along the way.
//
v_val = param.v_val;
result = "selected";
select one v_slr related by v_val->V_SLR[R801];
if ( not_empty v_slr )
  select one te_val related by v_val->TE_VAL[R2040];
  result = te_val.buffer;
else
  select one v_avl related by v_val->V_AVL[R801];
  if ( not_empty v_avl )
    select one root_v_val related by v_avl->V_VAL[R807];
    r = ::v_val_find_v_slr_return_buffer( v_val:root_v_val );
    result = r;
  else
    select one v_bin related by v_val->V_BIN[R801];
    if ( not_empty v_bin )
      select one left_v_val related by v_bin->V_VAL[R802];
      r = ::v_val_find_v_slr_return_buffer( v_val:left_v_val );
      result = r;
      if ( "selected" != result )
        select one right_v_val related by v_bin->V_VAL[R803];
        r = ::v_val_find_v_slr_return_buffer( v_val:right_v_val );
        result = r;
      end if;
    else
      select one v_uny related by v_val->V_UNY[R801];
      if ( not_empty v_uny )
        select one uny_v_val related by v_uny->V_VAL[R804];
        r = ::v_val_find_v_slr_return_buffer( v_val:uny_v_val );
        result = r;
      end if;
    end if;
  end if;
end if;
return result;
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("1d91174f-54d0-488a-9b12-3e9494f351ad",
	"747ba7d9-56dd-4f41-a9b5-5f4e8dda17c8",
	'v_val',
	"6c890e9d-8533-4087-ac72-ea19e3290a3c",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("747ba7d9-56dd-4f41-a9b5-5f4e8dda17c8",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("1835a1d7-243e-4178-8552-0680a7c8d863",
	"00000000-0000-0000-0000-000000000000",
	'smt_select_where',
	'',
	'// --------------------------------------------------------
// select instance where statement
// --------------------------------------------------------
te_smt = param.te_smt;
act_fiw = param.act_fiw;
select one o_obj related by act_fiw->O_OBJ[R676];
select one te_class related by o_obj->TE_CLASS[R2019];
if ( not_empty te_class )
  select any te_extent from instances of TE_EXTENT;
  select any te_file from instances of TE_FILE;
  select any te_select_where from instances of TE_SELECT_WHERE;
  select any te_set from instances of TE_SET;
  select one te_blk related by te_smt->TE_BLK[R2078];
  ws = te_blk.indentation;
  select one v_var related by act_fiw->V_VAR[R665];
  select one te_var related by v_var->TE_VAR[R2039];
  select one where_v_val related by act_fiw->V_VAL[R610];
  select one where_te_val related by where_v_val->TE_VAL[R2040];
  r = ::v_val_find_v_slr_return_buffer( v_val:where_v_val );
  slrname = r;
  te_select_where.is_implicit = act_fiw.is_implicit;
  te_select_where.class_name = te_class.GeneratedName;
  te_select_where.oal_var_name = o_obj.Name;
  te_select_where.class_description = o_obj.Descrip;
  te_select_where.multiplicity = act_fiw.cardinality;
  te_select_where.var_name = te_var.buffer;
  te_select_where.selected_var_name = slrname;
  te_select_where.where_clause = where_te_val.buffer;
  te_select_where.special = false;
  if ( "any" == te_select_where.multiplicity )
    if ( te_select_where.is_implicit )
      // Declare (first OAL usage of) inst_ref<Object> handle variable.
      te_smt.declaration = "te_select_where.class_name * te_select_where.var_name=0;";
    end if;
  elif ( "many" == te_select_where.multiplicity )
    if ( te_select_where.is_implicit )
      // First OAL usage of inst_ref_set<Object> handle set
      te_smt.declaration = "te_set.scopete_set.base_class te_select_where.var_name_space={0}; te_set.scopete_set.base_class * te_select_where.var_name = &te_select_where.var_name_space; /* te_select_where.oal_var_name (o_obj.Key_Lett) */";
      te_smt.deallocation = "te_set.modulete_set.clear( te_select_where.var_name );  /* Clear set: te_select_where.oal_var_name */";
      // Push deallocation into the block so that it is available at gen time for break/continue/return.
      te_blk.deallocation = te_blk.deallocation + te_smt.deallocation;
    end if;
  else
    T::print(s:"\nERROR:  stmt_select_from_instances_of_where: Select multiplicity is not any or many.");
    T::exit(i:101);
  end if;
  r = ::GetFixedSizeClassExtentInfo( te_class:te_class );
  extent = r;
  r = ::ExpandNonOptimizedSpecialWhereComparison( o_obj:o_obj, special:te_select_where.special, selected_var_name:te_select_where.selected_var_name );
  where_comp = r;
  iterator = ( "iter" + te_select_where.var_name ) + te_select_where.class_name;
  // *** Built in select any special where clause.
  select any o_id related by o_obj->O_ID[R104] where ( selected.Oid_ID == -1 );
  select one te_where related by o_id->TE_WHERE[R2032];
  r = ::CreateSpecialWhereComparisonArguments( te_class:te_class, o_id:o_id );
  arguments = r;
  T::include(file:"te_file.arc_path/t.smt.select_where.c");
  te_smt.OAL = "SELECT act_fiw.cardinality v_var.Name FROM INSTANCES OF te_class.Key_Lett WHERE where_te_val.OAL";
end if;
return T::body();
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("14e82e9e-5375-4cab-9de8-3cb4eeac106e",
	"1835a1d7-243e-4178-8552-0680a7c8d863",
	'te_smt',
	"20eb7827-fd8a-4b79-b705-c928064fb55d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("e726f213-a3b1-477e-b5b7-4a3d7e966c1c",
	"1835a1d7-243e-4178-8552-0680a7c8d863",
	'act_fiw',
	"95efa184-df88-42fe-8068-f0050e6fff8a",
	0,
	'',
	"14e82e9e-5375-4cab-9de8-3cb4eeac106e",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("95efa184-df88-42fe-8068-f0050e6fff8a",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Select From Instances Where>',
	'',
	'',
	'../Selection/Selection.xtuml');
INSERT INTO PE_PE
	VALUES ("1835a1d7-243e-4178-8552-0680a7c8d863",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("c0e17a74-76f9-4a4d-bcd3-0a9667829530",
	"00000000-0000-0000-0000-000000000000",
	'smt_select_relateds',
	'',
	'// --------------------------------------------------------
// select instance related by statement
// --------------------------------------------------------
select many act_srs from instances of ACT_SR;
for each act_sr in act_srs
  select one act_sel related by act_sr->ACT_SEL[R664];
  select one te_smt related by act_sel->ACT_SMT[R603]->TE_SMT[R2038];
  r = ::smt_select_related( te_smt:te_smt, act_sel:act_sel, by_where:false );
  te_smt.buffer = r;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("c0e17a74-76f9-4a4d-bcd3-0a9667829530",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("793104ee-f8e7-4d7e-98c9-ae3075160e05",
	"00000000-0000-0000-0000-000000000000",
	'smt_select_related_wheres',
	'',
	'//
// --------------------------------------------------------
// select related by where statements
// --------------------------------------------------------
select many act_srws from instances of ACT_SRW;
for each act_srw in act_srws
  select one act_sel related by act_srw->ACT_SEL[R664];
  select one te_smt related by act_sel->ACT_SMT[R603]->TE_SMT[R2038];
  r = ::smt_select_related( te_smt:te_smt, act_sel:act_sel, by_where:true );
  te_smt.buffer = r;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("793104ee-f8e7-4d7e-98c9-ae3075160e05",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("9356d2a6-7096-44d5-8866-c1f8c50e5bf5",
	"00000000-0000-0000-0000-000000000000",
	'smt_generate_precreated_events',
	'',
	'//
// --------------------------------------------------------
// generate pre-created event statements
// --------------------------------------------------------
select many e_gprs from instances of E_GPR;
for each e_gpr in e_gprs
  select one te_smt related by e_gpr->ACT_SMT[R603]->TE_SMT[R2038];
  r = ::smt_generate_precreated_event( te_smt:te_smt, e_gpr:e_gpr );
  te_smt.buffer = r;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("9356d2a6-7096-44d5-8866-c1f8c50e5bf5",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("4fb962b6-1fe5-4cea-8da1-e7fd01f9890e",
	"00000000-0000-0000-0000-000000000000",
	'smt_generate_precreated_event',
	'',
	'//
te_smt = param.te_smt;
e_gpr = param.e_gpr;
select any te_file from instances of TE_FILE;
select any te_eq from instances of TE_EQ;
select any te_instance from instances of TE_INSTANCE;
select one te_blk related by te_smt->TE_BLK[R2078];
ws = te_blk.indentation;
select one te_val related by e_gpr->V_VAL[R714]->TE_VAL[R2040];
// CDS - May need to do some investigating to see how to tell if
// this event is self-directed or not.
self_directed = false;
// CDS - Also may need to dig inside, get the sm_evt and then see if this
// event is polymorphic.
T::include(file:"te_file.arc_path/t.smt.generate_precreated_event.c");
te_smt.OAL = "GENERATE te_val.OAL";
return T::body();
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("8bff7c39-74b9-438d-93f0-0754765a3799",
	"4fb962b6-1fe5-4cea-8da1-e7fd01f9890e",
	'te_smt',
	"20eb7827-fd8a-4b79-b705-c928064fb55d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("a2a6ea64-427f-4e78-a0ab-9075e6aa3883",
	"4fb962b6-1fe5-4cea-8da1-e7fd01f9890e",
	'e_gpr',
	"8b663a15-3d11-4c95-8407-3642dfeeadd7",
	0,
	'',
	"8bff7c39-74b9-438d-93f0-0754765a3799",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("8b663a15-3d11-4c95-8407-3642dfeeadd7",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Generate Preexisting Event>',
	'',
	'',
	'../Event/Event.xtuml');
INSERT INTO PE_PE
	VALUES ("4fb962b6-1fe5-4cea-8da1-e7fd01f9890e",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("488d48fa-d87d-4559-aa63-1f5278a9764e",
	"00000000-0000-0000-0000-000000000000",
	'smt_generate_events',
	'',
	'//
//
// --------------------------------------------------------
// generate event statements
// --------------------------------------------------------
select many e_gens from instances of E_GEN;
for each e_gen in e_gens
  select one te_smt related by e_gen->E_GSME[R705]->E_GES[R703]->E_ESS[R701]->ACT_SMT[R603]->TE_SMT[R2038];
  r = ::smt_generate_event( te_smt:te_smt, e_gen:e_gen );
  te_smt.buffer = r;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("488d48fa-d87d-4559-aa63-1f5278a9764e",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("49e9fe28-cbfe-4ecb-aa12-b4e1034453c2",
	"00000000-0000-0000-0000-000000000000",
	'print_v_pars',
	'',
	'//
v_par = param.v_par;
done = false;
while ( not done )
  if ( empty v_par )
    done = true;
  else
    T::print(s:"-=-=-=-=-=-=-=-=-=-=-=-=-=- v_par is v_par.Name");
    select any sm_evtdi related by v_par->V_VAL[R800]->V_EDV[R801]->V_EPR[R834]->SM_EVTDI[R846];
    if ( not_empty sm_evtdi )
      T::print(s:"-=m=m=m=-=-=-=-=-=-=-=-=-=- sm_evtdi is sm_evtdi.Name");
    end if;
    select one v_par related by v_par->V_PAR[R816.''succeeds''];
  end if;
end while;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("1c2af020-27a6-4189-8386-1a21810748f2",
	"49e9fe28-cbfe-4ecb-aa12-b4e1034453c2",
	'v_par',
	"207500c6-1a45-48bc-803f-a6c31bc58ff1",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("207500c6-1a45-48bc-803f-a6c31bc58ff1",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Actual Parameter>',
	'',
	'',
	'../Value/Value.xtuml');
INSERT INTO PE_PE
	VALUES ("49e9fe28-cbfe-4ecb-aa12-b4e1034453c2",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("594b5a60-ba74-4b32-b126-ae1b105df4be",
	"00000000-0000-0000-0000-000000000000",
	'smt_generate_event',
	'',
	'//
te_smt = param.te_smt;
e_gen = param.e_gen;
select one e_gsme related by e_gen->E_GSME[R705];
select one e_ess related by e_gsme->E_GES[R703]->E_ESS[R701];
select one sm_evt related by e_gsme->SM_EVT[R707];
select one te_class related by sm_evt->SM_SM[R502]->SM_ISM[R517]->O_OBJ[R518]->TE_CLASS[R2019];
select one te_evt related by sm_evt->TE_EVT[R2036];
if ( ( not_empty te_class ) and ( not_empty te_evt ) )
  select any te_file from instances of TE_FILE;
  select any te_eq from instances of TE_EQ;
  select any te_instance from instances of TE_INSTANCE;
  select any te_thread from instances of TE_THREAD;
  select one v_var related by e_gen->V_VAR[R712];
  select one te_var related by v_var->TE_VAR[R2039];
  select one te_blk related by te_smt->TE_BLK[R2078];
  ws = te_blk.indentation;
  te_class.Included = true;
  select many v_pars related by e_ess->V_PAR[R700];
  parameters = "";
  parameter_OAL = "";
  if ( not_empty v_pars )
    delimeter = "";
    for each v_par in v_pars
      select one par_te_dt related by v_par->V_VAL[R800]->S_DT[R820]->TE_DT[R2021];
      select one par_te_val related by v_par->V_VAL[R800]->TE_VAL[R2040];
      r = ::t_oal_smt_event_parameters( evt_msg_var:"", parameter:v_par.Name, value:par_te_val.buffer, value_type:par_te_dt.Core_Typ, ws:te_blk.indentation );
      parameters = parameters + r;
      parameter_OAL = ( parameter_OAL + delimeter ) + par_te_val.OAL;
      delimeter = ", ";
    end for;
  end if;
  self_directed = false;
  if ( "self" == T::l(s:v_var.Name) )
    // CDS - This is a simplistic way to detect event-to-self.
    self_directed = true;
  end if;
  var_name = te_var.buffer;
  T::include(file:"te_file.arc_path/t.smt.generate.c");
  te_smt.OAL = "GENERATE sm_evt.Drv_Lbl:sm_evt.Mning(parameter_OAL) TO v_var.Name";
end if;
return T::body();
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("fbedc196-39b8-4d91-9e7b-5168e67b233f",
	"594b5a60-ba74-4b32-b126-ae1b105df4be",
	'te_smt',
	"20eb7827-fd8a-4b79-b705-c928064fb55d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("d27cdfee-d595-4c04-be36-221da0127447",
	"594b5a60-ba74-4b32-b126-ae1b105df4be",
	'e_gen',
	"c518d401-e546-4ce8-871f-8901dc269705",
	0,
	'',
	"fbedc196-39b8-4d91-9e7b-5168e67b233f",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("c518d401-e546-4ce8-871f-8901dc269705",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Generate>',
	'',
	'',
	'../Event/Event.xtuml');
INSERT INTO PE_PE
	VALUES ("594b5a60-ba74-4b32-b126-ae1b105df4be",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("c651b7d7-30b5-41d4-806a-345e907c6f0c",
	"00000000-0000-0000-0000-000000000000",
	'smt_generate_creator_events',
	'',
	'//
// --------------------------------------------------------
// generate creator event statement
// --------------------------------------------------------
select many e_gecs from instances of E_GEC;
for each e_gec in e_gecs
  ::smt_generate_creator_event( e_gec:e_gec );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("c651b7d7-30b5-41d4-806a-345e907c6f0c",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("c2f02ffa-1ffb-4184-abff-b71bad8eca86",
	"00000000-0000-0000-0000-000000000000",
	'smt_generate_creator_event',
	'',
	'//
e_gec = param.e_gec;
select one e_gsme related by e_gec->E_GSME[R705];
select one te_smt related by e_gsme->E_GES[R703]->E_ESS[R701]->ACT_SMT[R603]->TE_SMT[R2038];
r = ::smt_generate_class_event( te_smt:te_smt, e_gsme:e_gsme );
te_smt.buffer = r;
te_smt.OAL = te_smt.OAL + " CREATOR";
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("60b6fb88-06ac-4f8e-81eb-b57a7bcf7908",
	"c2f02ffa-1ffb-4184-abff-b71bad8eca86",
	'e_gec',
	"9e39f4c4-cdf9-4fec-a290-ce5267810440",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("9e39f4c4-cdf9-4fec-a290-ce5267810440",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Generate to Creator>',
	'',
	'',
	'../Event/Event.xtuml');
INSERT INTO PE_PE
	VALUES ("c2f02ffa-1ffb-4184-abff-b71bad8eca86",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("623d48c2-c0e2-4e6e-a34e-5a466209c96b",
	"00000000-0000-0000-0000-000000000000",
	'smt_generate_class_events',
	'',
	'//
// --------------------------------------------------------
// generate class event statement
// --------------------------------------------------------
select many e_gars from instances of E_GAR;
for each e_gar in e_gars
  ::smt_generate_event_to_class( e_gar:e_gar );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("623d48c2-c0e2-4e6e-a34e-5a466209c96b",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("54ea90d4-0619-4a60-a0b2-c228f8ba08f6",
	"00000000-0000-0000-0000-000000000000",
	'smt_generate_event_to_class',
	'',
	'//
e_gar = param.e_gar;
select one e_gsme related by e_gar->E_GSME[R705];
select one te_smt related by e_gsme->E_GES[R703]->E_ESS[R701]->ACT_SMT[R603]->TE_SMT[R2038];
r = ::smt_generate_class_event( te_smt:te_smt, e_gsme:e_gsme );
te_smt.buffer = r;
te_smt.OAL = te_smt.OAL + " CLASS";
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("af3dab2d-d7c6-42cd-bedd-bf53d41f70f8",
	"54ea90d4-0619-4a60-a0b2-c228f8ba08f6",
	'e_gar',
	"43ed0054-aa11-45eb-adfc-7ef5fbdd4c26",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("43ed0054-aa11-45eb-adfc-7ef5fbdd4c26",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Generate to Class>',
	'',
	'',
	'../Event/Event.xtuml');
INSERT INTO PE_PE
	VALUES ("54ea90d4-0619-4a60-a0b2-c228f8ba08f6",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("333162df-273c-44e2-bb9b-a394b5a727a5",
	"00000000-0000-0000-0000-000000000000",
	'smt_generate_class_event',
	'',
	'//
te_smt = param.te_smt;
e_gsme = param.e_gsme;
select one e_ess related by e_gsme->E_GES[R703]->E_ESS[R701];
select one te_smt related by e_ess->ACT_SMT[R603]->TE_SMT[R2038];
select one act_act related by e_ess->ACT_SMT[R603]->ACT_BLK[R602]->ACT_ACT[R601];
select one act_sab related by act_act->ACT_SAB[R698];
select one sm_evt related by e_gsme->SM_EVT[R707];
select one o_obj related by act_sab->SM_ACT[R691]->SM_SM[R515]->SM_ISM[R517]->O_OBJ[R518];
if ( empty o_obj )
  select one o_obj related by act_sab->SM_ACT[R691]->SM_SM[R515]->SM_ASM[R517]->O_OBJ[R519];
end if;
select one tgt_o_obj related by sm_evt->SM_SM[R502]->SM_ISM[R517]->O_OBJ[R518];
if ( empty tgt_o_obj )
  select one tgt_o_obj related by sm_evt->SM_SM[R502]->SM_ASM[R517]->O_OBJ[R519];
end if;
select one te_class related by tgt_o_obj->TE_CLASS[R2019];
select one te_evt related by sm_evt->TE_EVT[R2036];
if ( ( not_empty te_class ) and ( not_empty te_evt ) )
  select any te_eq from instances of TE_EQ;
  select any te_file from instances of TE_FILE;
  select any te_instance from instances of TE_INSTANCE;
  select any te_thread from instances of TE_THREAD;
  select one te_blk related by te_smt->TE_BLK[R2078];
  ws = te_blk.indentation;
  parameters = "";
  parameter_OAL = "";
  self_directed = false;
  te_class.Included = true;
  if ( act_act.Type == "state" )
    if ( o_obj == tgt_o_obj )
      self_directed = true;
    end if;
  elif ( act_act.Type == "transition" )
    if ( o_obj == tgt_o_obj )
      self_directed = true;
    end if;
  end if;
  select many v_pars related by e_ess->V_PAR[R700];
  if ( not_empty v_pars )
    delimeter = "";
    for each v_par in v_pars
      select one par_te_dt related by v_par->V_VAL[R800]->S_DT[R820]->TE_DT[R2021];
      select one par_te_val related by v_par->V_VAL[R800]->TE_VAL[R2040];
      r = ::t_oal_smt_event_parameters( evt_msg_var:"", parameter:v_par.Name, value:par_te_val.buffer, value_type:par_te_dt.Core_Typ, ws:ws );
      parameters = parameters + r;
      parameter_OAL = ( parameter_OAL + delimeter ) + par_te_val.OAL;
      delimeter = ", ";
    end for;
  end if;
  var_name = "0";
  T::include(file:"te_file.arc_path/t.smt.generate.c");
  te_smt.OAL = "GENERATE sm_evt.Drv_Lbl:sm_evt.Mning(parameter_OAL) TO tgt_o_obj.Key_Lett";
end if;
return T::body();
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("4faf6a55-8140-49db-accf-01783d44ef03",
	"333162df-273c-44e2-bb9b-a394b5a727a5",
	'te_smt',
	"20eb7827-fd8a-4b79-b705-c928064fb55d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("4dd92587-2d2d-43f4-8ade-241df63a5ad4",
	"333162df-273c-44e2-bb9b-a394b5a727a5",
	'e_gsme',
	"63675bcb-23a0-4df6-88c0-07e6816d0db2",
	0,
	'',
	"4faf6a55-8140-49db-accf-01783d44ef03",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("63675bcb-23a0-4df6-88c0-07e6816d0db2",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Generate SM Event Statement>',
	'',
	'',
	'../Event/Event.xtuml');
INSERT INTO PE_PE
	VALUES ("333162df-273c-44e2-bb9b-a394b5a727a5",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("fa079816-4de8-4edc-85ad-de885bac2910",
	"00000000-0000-0000-0000-000000000000",
	'smt_sgns',
	'',
	'//
// --------------------------------------------------------
// inter-component interface signal
// --------------------------------------------------------
select many act_sgns from instances of ACT_SGN;
for each act_sgn in act_sgns
  ::smt_sgn( act_sgn:act_sgn );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("fa079816-4de8-4edc-85ad-de885bac2910",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("a53ea5f0-ba8c-4769-a84e-23c81e9516be",
	"00000000-0000-0000-0000-000000000000",
	'smt_sgn',
	'',
	'//
act_sgn = param.act_sgn;
select one te_smt related by act_sgn->ACT_SMT[R603]->TE_SMT[R2038];
select one te_blk related by te_smt->TE_BLK[R2078];
select one te_mact related by act_sgn->SPR_PS[R663]->TE_MACT[R2051];
if ( empty te_mact )
  select one te_mact related by act_sgn->SPR_RS[R660]->TE_MACT[R2053];
end if;
select many v_pars related by act_sgn->V_PAR[R662];
r = ::q_render_msg( te_mact:te_mact, v_pars:v_pars, ws:te_blk.indentation, is_statement:true );
te_smt.buffer = r;
te_smt.OAL = "SEND te_mact.PortName::te_mact.MessageName(te_mact.OALParamBuffer)";
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("f235eced-1e5d-47ae-9dde-2037a034aea6",
	"a53ea5f0-ba8c-4769-a84e-23c81e9516be",
	'act_sgn',
	"75356ebb-c686-49a4-95c7-6a54deaa4225",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("75356ebb-c686-49a4-95c7-6a54deaa4225",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Signal Invocation>',
	'',
	'',
	'../Invocation/Invocation.xtuml');
INSERT INTO PE_PE
	VALUES ("a53ea5f0-ba8c-4769-a84e-23c81e9516be",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("d6f925ec-692a-44e1-ab50-e150f7d68fc8",
	"00000000-0000-0000-0000-000000000000",
	'smt_iops',
	'',
	'//
// --------------------------------------------------------
// inter-component interface operation
// --------------------------------------------------------
select many act_iops from instances of ACT_IOP;
for each act_iop in act_iops
  ::smt_iop( act_iop:act_iop );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("d6f925ec-692a-44e1-ab50-e150f7d68fc8",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("1379789f-1e89-43fe-8746-b398c7260d92",
	"00000000-0000-0000-0000-000000000000",
	'smt_iop',
	'',
	'//
act_iop = param.act_iop;
select one te_smt related by act_iop->ACT_SMT[R603]->TE_SMT[R2038];
select one te_blk related by te_smt->TE_BLK[R2078];
select one te_mact related by act_iop->SPR_RO[R657]->TE_MACT[R2052];
if ( empty te_mact )
  select one te_mact related by act_iop->SPR_PO[R680]->TE_MACT[R2050];
end if;
select many v_pars related by act_iop->V_PAR[R679];
r = ::q_render_msg( te_mact:te_mact, v_pars:v_pars, ws:te_blk.indentation, is_statement:true );
te_smt.buffer = r;
te_smt.OAL = "te_mact.PortName::te_mact.MessageName(te_mact.OALParamBuffer)";
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("589be75e-7e48-4604-ae0d-84cbfb2bc0b9",
	"1379789f-1e89-43fe-8746-b398c7260d92",
	'act_iop',
	"45d7ef3c-6fb3-48f3-b2ca-de2c2efcc6dd",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("45d7ef3c-6fb3-48f3-b2ca-de2c2efcc6dd",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Interface Operation Invocation>',
	'',
	'',
	'../Invocation/Invocation.xtuml');
INSERT INTO PE_PE
	VALUES ("1379789f-1e89-43fe-8746-b398c7260d92",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("36854686-e63d-4902-9f07-fb7b4e96ad47",
	"00000000-0000-0000-0000-000000000000",
	'q_render_msg',
	'',
	'//
// -------------------------------------------------------------------
// Render the call and parameter list for an inter-component message
// -------------------------------------------------------------------
te_mact = param.te_mact;
v_pars = param.v_pars;
ws = param.ws;
is_statement = param.is_statement;
select any te_file from instances of TE_FILE;
select any te_sys from instances of TE_SYS;
select any te_target from instances of TE_TARGET;
parameters = "";
te_mact.OALParamBuffer = "";
if ( not_empty v_pars )
  r = ::gen_parameter_list( v_pars:v_pars, prefix_param_delimiter:false, invocation_flavor:"message" );
  te_parm = r;
  parameters = te_parm.ParamBuffer;
  te_mact.OALParamBuffer = te_parm.OALParamBuffer;
end if;
name = te_mact.GeneratedName;
if ( "C++" == te_target.language )
  // Now navigate out across the satisfaction to get the port index of the
  // foreign component (instance).
  select one te_po related by te_mact->TE_PO[R2006];
  foreign_te_po = te_po;
  if ( te_po.Provision )
    if ( IFDirectionType::ServerClient == te_mact.Direction )
      name = ( te_mact.PortName + "->" ) + name;
    end if;
    select any foreign_te_po related by te_po->TE_IIR[R2080]->TE_IIR[R2081.''requires or delegates'']->TE_PO[R2080] where ( ( selected.PackageName == te_po.PackageName ) and ( selected.ID != te_po.ID ) );
  else
    if ( IFDirectionType::ClientServer == te_mact.Direction )
      name = ( te_mact.PortName + "->" ) + name;
    end if;
    select any foreign_te_po related by te_po->TE_IIR[R2080]->TE_IIR[R2081.''provides or is delegated'']->TE_PO[R2080] where ( ( selected.PackageName == te_po.PackageName ) and ( selected.ID != te_po.ID ) );
  end if;
  name = "thismodule->" + name;
  if ( not_empty foreign_te_po )
    if ( foreign_te_po.polymorphic )
      if ( "" != parameters )
        parameters = ", " + parameters;
      end if;
      parameters = "foreign_te_po.sibling" + parameters;
    end if;
  elif ( te_sys.AllPortsPoly == true )
    if ( "" != parameters )
      parameters = ", " + parameters;
    end if;
    parameters = "0" + parameters;
  end if;
end if;
T::include(file:"te_file.arc_path/t.smt.iop.c");
return T::body();
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("7da1d3a2-300c-4d57-9316-3a6a4f44fe0b",
	"36854686-e63d-4902-9f07-fb7b4e96ad47",
	'te_mact',
	"7268e543-f48e-4464-ba70-227deff22727",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("7268e543-f48e-4464-ba70-227deff22727",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Extended Message Action>',
	'',
	'',
	'../Translation Extensions/Translation Extensions.xtuml');
INSERT INTO S_SPARM
	VALUES ("d8808cc7-44ae-4223-893c-0821925e00e7",
	"36854686-e63d-4902-9f07-fb7b4e96ad47",
	'v_pars',
	"ae5b840e-5312-4865-ae17-5c9bba997543",
	0,
	'',
	"7da1d3a2-300c-4d57-9316-3a6a4f44fe0b",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("ae5b840e-5312-4865-ae17-5c9bba997543",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref_set<Actual Parameter>',
	'',
	'',
	'../Value/Value.xtuml');
INSERT INTO S_SPARM
	VALUES ("dbbb3a2f-298b-4a67-99a9-fa287f2cd54e",
	"36854686-e63d-4902-9f07-fb7b4e96ad47",
	'ws',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"d8808cc7-44ae-4223-893c-0821925e00e7",
	'');
INSERT INTO S_SPARM
	VALUES ("0f7dcc57-e0cf-48ad-a234-0bb05412cd3f",
	"36854686-e63d-4902-9f07-fb7b4e96ad47",
	'is_statement',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"dbbb3a2f-298b-4a67-99a9-fa287f2cd54e",
	'');
INSERT INTO PE_PE
	VALUES ("36854686-e63d-4902-9f07-fb7b4e96ad47",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("dd2d0038-f3c9-4397-b976-67872527735d",
	"00000000-0000-0000-0000-000000000000",
	'smt_operates',
	'',
	'//
// --------------------------------------------------------
// class operation statement
// --------------------------------------------------------
select many act_tfms from instances of ACT_TFM;
for each act_tfm in act_tfms
  select one te_smt related by act_tfm->ACT_SMT[R603]->TE_SMT[R2038];
  r = ::smt_operate( te_smt:te_smt, act_tfm:act_tfm );
  te_smt.buffer = r;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("dd2d0038-f3c9-4397-b976-67872527735d",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("e29e6654-7dce-495f-a57f-844ecd850c35",
	"00000000-0000-0000-0000-000000000000",
	'smt_operate',
	'',
	'//
te_smt = param.te_smt;
act_tfm = param.act_tfm;
select one o_tfr related by act_tfm->O_TFR[R673];
select one te_tfr related by o_tfr->TE_TFR[R2024];
select one te_class related by o_tfr->O_OBJ[R115]->TE_CLASS[R2019];
if ( ( not_empty te_tfr ) and ( not_empty te_class ) )
  select any te_file from instances of TE_FILE;
  select any te_target from instances of TE_TARGET;
  select one te_blk related by te_smt->TE_BLK[R2078];
  ws = te_blk.indentation;
  select one te_var related by act_tfm->V_VAR[R667]->TE_VAR[R2039];
  var_name = "";
  instance_based = false;
  if ( te_tfr.Instance_Based == 1 )
    instance_based = true;
    var_name = te_var.buffer;
  end if;
  parameters = "";
  parameter_OAL = "";
  select many v_pars related by act_tfm->V_PAR[R627];
  if ( not_empty v_pars )
    r = ::gen_parameter_list( v_pars:v_pars, prefix_param_delimiter:false, invocation_flavor:"operation" );
    te_parm = r;
    parameters = te_parm.ParamBuffer;
    parameter_OAL = te_parm.OALParamBuffer;
  end if;
  operation_name = te_tfr.GeneratedName;
  uses_thismodule = false;
  if ( "C++" == te_target.language )
    uses_thismodule = true;
    if ( not instance_based )
      operation_name = ( te_class.GeneratedName + "::" ) + te_tfr.GeneratedName;
    end if;
  end if;
  T::include(file:"te_file.arc_path/t.smt.operation.c");
  if ( instance_based )
    te_smt.OAL = ( te_var.OAL + "." ) + ( te_tfr.Name + "(" );
  else
    te_smt.OAL = ( te_class.Key_Lett + "::" ) + ( te_tfr.Name + "(" );
  end if;
  if ( "" != parameter_OAL )
    te_smt.OAL = ( te_smt.OAL + " " ) + ( parameter_OAL + " " );
  end if;
  te_smt.OAL = te_smt.OAL + ")";
end if;
return T::body();
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("fbe1e2e3-d6f1-4432-bd74-d8748a94da17",
	"e29e6654-7dce-495f-a57f-844ecd850c35",
	'te_smt',
	"20eb7827-fd8a-4b79-b705-c928064fb55d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("6425f797-57ed-423d-9377-bd671e003ccc",
	"e29e6654-7dce-495f-a57f-844ecd850c35",
	'act_tfm',
	"1090fd76-cbf2-431b-8b76-774d8967448d",
	0,
	'',
	"fbe1e2e3-d6f1-4432-bd74-d8748a94da17",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("1090fd76-cbf2-431b-8b76-774d8967448d",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Operation Invocation>',
	'',
	'',
	'../Invocation/Invocation.xtuml');
INSERT INTO PE_PE
	VALUES ("e29e6654-7dce-495f-a57f-844ecd850c35",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("1b60bc2c-f548-4851-900f-0a1f58c65534",
	"00000000-0000-0000-0000-000000000000",
	'smt_bridges',
	'',
	'//
// --------------------------------------------------------
// bridge statement
// --------------------------------------------------------
select many act_brgs from instances of ACT_BRG;
for each act_brg in act_brgs
  select one te_smt related by act_brg->ACT_SMT[R603]->TE_SMT[R2038];
  r = ::smt_bridge( te_smt:te_smt, act_brg:act_brg );
  te_smt.buffer = r;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("1b60bc2c-f548-4851-900f-0a1f58c65534",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("66e87070-28b3-47ba-bc5a-1e8c4db39626",
	"00000000-0000-0000-0000-000000000000",
	'smt_bridge',
	'',
	'//
te_smt = param.te_smt;
act_brg = param.act_brg;
select one s_brg related by act_brg->S_BRG[R674];
select one te_brg related by s_brg->TE_BRG[R2025];
if ( not_empty te_brg )
  select any te_file from instances of TE_FILE;
  select any te_target from instances of TE_TARGET;
  select one te_blk related by te_smt->TE_BLK[R2078];
  ws = te_blk.indentation;
  select one te_ee related by s_brg->S_EE[R19]->TE_EE[R2020];
  te_ee.Included = true;
  parameters = "";
  parameter_OAL = "";
  select many v_pars related by act_brg->V_PAR[R628];
  if ( not_empty v_pars )
    r = ::gen_parameter_list( v_pars:v_pars, prefix_param_delimiter:false, invocation_flavor:"bridge" );
    te_parm = r;
    parameters = te_parm.ParamBuffer;
    parameter_OAL = te_parm.OALParamBuffer;
  end if;
  bridge_name = te_brg.GeneratedName;
  if ( "C++" == te_target.language )
    bridge_name = ( te_ee.RegisteredName + "::" ) + bridge_name;
    select one te_c related by te_ee->TE_C[R2085];
    if ( ( "TIM" != te_brg.EEkeyletters ) and ( not_empty te_c ) )
      if ( "" == parameters )
        parameters = "thismodule";
      else
        parameters = "thismodule, " + parameters;
      end if;
    end if;
  end if;
  T::include(file:"te_file.arc_path/t.smt.bridge.c");
  te_smt.OAL = "te_brg.EEkeyletters::te_brg.Name( parameter_OAL )";
end if;
return T::body();
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("322bceed-61ec-4cf8-8677-2702db253589",
	"66e87070-28b3-47ba-bc5a-1e8c4db39626",
	'te_smt',
	"20eb7827-fd8a-4b79-b705-c928064fb55d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("9da1aed6-84fe-46db-83d7-367acb8610dd",
	"66e87070-28b3-47ba-bc5a-1e8c4db39626",
	'act_brg',
	"87af29ba-2da9-411e-9287-ee0b2ca1dd65",
	0,
	'',
	"322bceed-61ec-4cf8-8677-2702db253589",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("87af29ba-2da9-411e-9287-ee0b2ca1dd65",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Bridge Invocation>',
	'',
	'',
	'../Invocation/Invocation.xtuml');
INSERT INTO PE_PE
	VALUES ("66e87070-28b3-47ba-bc5a-1e8c4db39626",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("f8d3aefc-f378-43d5-9b5f-f374f44342cc",
	"00000000-0000-0000-0000-000000000000",
	'smt_functions',
	'',
	'//
// --------------------------------------------------------
// function statement
// --------------------------------------------------------
select many act_fncs from instances of ACT_FNC;
for each act_fnc in act_fncs
  select one te_smt related by act_fnc->ACT_SMT[R603]->TE_SMT[R2038];
  r = ::smt_function( te_smt:te_smt, act_fnc:act_fnc );
  te_smt.buffer = r;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("f8d3aefc-f378-43d5-9b5f-f374f44342cc",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("3631056a-b84c-46e7-8985-c6d917aababc",
	"00000000-0000-0000-0000-000000000000",
	'smt_function',
	'',
	'//
te_smt = param.te_smt;
act_fnc = param.act_fnc;
//
select one te_sync related by act_fnc->S_SYNC[R675]->TE_SYNC[R2023];
if ( not_empty te_sync )
  select any te_file from instances of TE_FILE;
  select any te_target from instances of TE_TARGET;
  select one te_blk related by te_smt->TE_BLK[R2078];
  ws = te_blk.indentation;
  parameters = "";
  parameter_OAL = "";
  select many v_pars related by act_fnc->V_PAR[R669];
  if ( not_empty v_pars )
    r = ::gen_parameter_list( v_pars:v_pars, prefix_param_delimiter:false, invocation_flavor:"function" );
    te_parm = r;
    parameters = te_parm.ParamBuffer;
    parameter_OAL = te_parm.OALParamBuffer;
  end if;
  function_name = te_sync.intraface_method;
  if ( "C++" == te_target.language )
    function_name = "thismodule->" + function_name;
  end if;
  T::include(file:"te_file.arc_path/t.smt.function.c");
  te_smt.OAL = "::te_sync.Name( parameter_OAL )";
end if;
return T::body();
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("a136e672-4cda-4467-a750-b6eb1c0e66c9",
	"3631056a-b84c-46e7-8985-c6d917aababc",
	'te_smt',
	"20eb7827-fd8a-4b79-b705-c928064fb55d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("a3264dde-91ee-40d8-8b08-7007abac2ca2",
	"3631056a-b84c-46e7-8985-c6d917aababc",
	'act_fnc',
	"0261bf9d-1ddb-4836-a9fe-ea608a52d9c3",
	0,
	'',
	"a136e672-4cda-4467-a750-b6eb1c0e66c9",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("0261bf9d-1ddb-4836-a9fe-ea608a52d9c3",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Function Invocation>',
	'',
	'',
	'../Invocation/Invocation.xtuml');
INSERT INTO PE_PE
	VALUES ("3631056a-b84c-46e7-8985-c6d917aababc",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("3373f176-9e3a-424e-8751-a5fdf8f60b9a",
	"00000000-0000-0000-0000-000000000000",
	'smt_returns',
	'',
	'//
// --------------------------------------------------------
// return statements
// --------------------------------------------------------
select many act_rets from instances of ACT_RET;
for each act_ret in act_rets
  select one te_smt related by act_ret->ACT_SMT[R603]->TE_SMT[R2038];
  r = ::smt_return( te_smt:te_smt, act_ret:act_ret );
  te_smt.buffer = r;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("3373f176-9e3a-424e-8751-a5fdf8f60b9a",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("8881413a-8d00-4995-a000-aa8b2126fe35",
	"00000000-0000-0000-0000-000000000000",
	'smt_return',
	'',
	'//
// --------------------------------------------------------
// return statement
// --------------------------------------------------------
te_smt = param.te_smt;
act_ret = param.act_ret;
select any te_file from instances of TE_FILE;
select one te_blk related by te_smt->TE_BLK[R2078];
ws = te_blk.indentation;
select one v_val related by act_ret->V_VAL[R668];
intCast1 = "";
intCast2 = "";
value = "";
value_OAL = "";
returnvaltype = "";
if ( not_empty v_val )
  //
  // resolve the core data type of v_val
  select one s_dt related by v_val->S_DT[R820];
  return_s_dt = s_dt;
  select any core_s_dt from instances of S_DT where ( false );
  select one s_udt related by s_dt->S_UDT[R17];
  if ( not_empty s_udt )
    r = ::GetBaseTypeForUDT( s_udt:s_udt );
    core_s_dt = r;
  end if;
  if ( not_empty core_s_dt )
    s_dt = core_s_dt;
  end if;
  select one te_dt related by s_dt->TE_DT[R2021];
  returnvaltype = te_dt.ExtName;
  //
  // if the value is of the _real_ type
  if ( "real" == s_dt.Name )
    // if we can resolve the name of the data type of the return type of the enclosing body
    select one act_smt related by act_ret->ACT_SMT[R603];
    // Get the return _statement_ data type name.
    select one act_act related by act_smt->ACT_BLK[R602]->ACT_ACT[R601];
    // "class transition", "transition", "class state", "state", "signal" use void
    return_smt_dt_name = "void";
    if ( ( act_act.Type == "class operation" ) or ( act_act.Type == "operation" ) )
      select one return_s_dt related by act_act->ACT_OPB[R698]->O_TFR[R696]->S_DT[R116];
      return_smt_dt_name = return_s_dt.Name;
    elif ( act_act.Type == "function" )
      select one return_s_dt related by act_act->ACT_FNB[R698]->S_SYNC[R695]->S_DT[R25];
      return_smt_dt_name = return_s_dt.Name;
    elif ( act_act.Type == "interface operation" )
      select one return_s_dt related by act_act->ACT_ROB[R698]->SPR_RO[R685]->SPR_REP[R4502]->C_EP[R4500]->C_IO[R4004]->S_DT[R4008];
      if ( empty return_s_dt )
        select one return_s_dt related by act_act->ACT_POB[R698]->SPR_PO[R687]->SPR_PEP[R4503]->C_EP[R4501]->C_IO[R4004]->S_DT[R4008];
      end if;
      return_smt_dt_name = return_s_dt.Name;
    elif ( act_act.Type == "bridge" )
      select one return_s_dt related by act_act->ACT_BRB[R698]->S_BRG[R697]->S_DT[R20];
      return_smt_dt_name = return_s_dt.Name;
    end if;
    if ( return_smt_dt_name != "" )
      // resolve the core type of the return type
      select any core_s_dt from instances of S_DT where ( false );
      select one s_udt related by return_s_dt->S_UDT[R17];
      if ( not_empty s_udt )
        r = ::GetBaseTypeForUDT( s_udt:s_udt );
        core_s_dt = r;
      end if;
      if ( not_empty core_s_dt )
        return_s_dt = core_s_dt;
      end if;
      //
      // if the return type is integer
      if ( "integer" == return_s_dt.Name )
        // cast the value to an int, to avoid a "possible loss of precision"
        // syntax error in the generated code
        intCast1 = "(int)(";
        intCast2 = ")";
      end if;
    end if;
  end if;
  select one te_val related by v_val->TE_VAL[R2040];
  value = te_val.buffer;
  value_OAL = te_val.OAL;
end if;
// Deallocate any variables allocated from this block and all higher blocks in this action.
deallocation = te_blk.deallocation;
select one parent_te_blk related by te_blk->TE_SMT[R2015]->TE_BLK[R2078];
while ( not_empty parent_te_blk )
  deallocation = deallocation + parent_te_blk.deallocation;
  select one parent_te_blk related by parent_te_blk->TE_SMT[R2015]->TE_BLK[R2078];
end while;
//
rv = value;
T::include(file:"te_file.arc_path/t.smt.return.c");
te_smt.OAL = "RETURN value_OAL";
return T::body();
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("8e5014f1-f87c-4c78-a4d9-a40cff3e23b6",
	"8881413a-8d00-4995-a000-aa8b2126fe35",
	'te_smt',
	"20eb7827-fd8a-4b79-b705-c928064fb55d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("a546cdd7-9fc9-4f11-80c5-65fe0dab8e5e",
	"8881413a-8d00-4995-a000-aa8b2126fe35",
	'act_ret',
	"b1cfda35-28f8-45ab-b2b4-5a862d70a718",
	0,
	'',
	"8e5014f1-f87c-4c78-a4d9-a40cff3e23b6",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("b1cfda35-28f8-45ab-b2b4-5a862d70a718",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Return Stmt>',
	'',
	'',
	'../Invocation/Invocation.xtuml');
INSERT INTO PE_PE
	VALUES ("8881413a-8d00-4995-a000-aa8b2126fe35",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("36813351-122a-4c45-a39e-600d96d35d70",
	"00000000-0000-0000-0000-000000000000",
	'smt_controls',
	'',
	'//
// --------------------------------------------------------
// control statements
// --------------------------------------------------------
select many act_ctls from instances of ACT_CTL;
for each act_ctl in act_ctls
  select one te_smt related by act_ctl->ACT_SMT[R603]->TE_SMT[R2038];
  r = ::smt_control( te_smt:te_smt, act_ctl:act_ctl );
  te_smt.buffer = r;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("36813351-122a-4c45-a39e-600d96d35d70",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("0fdb2a9d-8e24-427e-8e97-c3de708431f3",
	"00000000-0000-0000-0000-000000000000",
	'smt_control',
	'',
	'//
// --------------------------------------------------------
// control statement
// --------------------------------------------------------
te_smt = param.te_smt;
act_ctl = param.act_ctl;
select any te_file from instances of TE_FILE;
select any te_thread from instances of TE_THREAD;
select one te_blk related by te_smt->TE_BLK[R2078];
ws = te_blk.indentation;
T::include(file:"te_file.arc_path/t.smt.control.c");
te_smt.OAL = "CONTROL";
return T::body();
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("5c9ba581-48aa-4bd1-a9a8-524202ea1778",
	"0fdb2a9d-8e24-427e-8e97-c3de708431f3",
	'te_smt',
	"20eb7827-fd8a-4b79-b705-c928064fb55d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("0c40c60a-0486-4046-8eac-90e7009cb148",
	"0fdb2a9d-8e24-427e-8e97-c3de708431f3",
	'act_ctl',
	"db293f8e-a7c9-42f5-af85-1cea7adfc77d",
	0,
	'',
	"5c9ba581-48aa-4bd1-a9a8-524202ea1778",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("db293f8e-a7c9-42f5-af85-1cea7adfc77d",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Control>',
	'',
	'',
	'../Body/Body.xtuml');
INSERT INTO PE_PE
	VALUES ("0fdb2a9d-8e24-427e-8e97-c3de708431f3",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("b0137724-6cb5-4600-ae45-818ae10493a3",
	"00000000-0000-0000-0000-000000000000",
	'smt_breaks',
	'',
	'//
// --------------------------------------------------------
// break statements
// --------------------------------------------------------
select many act_brks from instances of ACT_BRK;
for each act_brk in act_brks
  select one te_smt related by act_brk->ACT_SMT[R603]->TE_SMT[R2038];
  r = ::smt_break( te_smt:te_smt, act_brk:act_brk );
  te_smt.buffer = r;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("b0137724-6cb5-4600-ae45-818ae10493a3",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("7c45bdc4-57ef-4005-a85c-be4bb0256fc5",
	"00000000-0000-0000-0000-000000000000",
	'smt_break',
	'',
	'//
// --------------------------------------------------------
// break statement
// --------------------------------------------------------
te_smt = param.te_smt;
act_brk = param.act_brk;
select any te_file from instances of TE_FILE;
select one te_blk related by te_smt->TE_BLK[R2078];
ws = te_blk.indentation;
// Deallocate any variables allocated from this block and higher blocks up to containing WHILE or FOR.
deallocation = te_blk.deallocation;
select one parent_te_blk related by te_blk->TE_SMT[R2015]->TE_BLK[R2078];
while ( not_empty parent_te_blk )
  select one parent_te_smt related by parent_te_blk->TE_SMT[R2015];
  if ( not_empty parent_te_smt )
    deallocation = deallocation + parent_te_blk.deallocation;
    if ( ( "TE_WHL" == parent_te_smt.subtypeKL ) or ( "TE_FOR" == parent_te_smt.subtypeKL ) )
      break;
    end if;
  end if;
  select one parent_te_blk related by parent_te_smt->TE_BLK[R2078];
end while;
T::include(file:"te_file.arc_path/t.smt.break.c");
te_smt.OAL = "BREAK";
return T::body();
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("43435762-33d0-4a83-87c2-53a7a52d3831",
	"7c45bdc4-57ef-4005-a85c-be4bb0256fc5",
	'te_smt',
	"20eb7827-fd8a-4b79-b705-c928064fb55d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("e15d02ef-40ba-416b-89cd-592980afdf5a",
	"7c45bdc4-57ef-4005-a85c-be4bb0256fc5",
	'act_brk',
	"48514e79-7302-419e-a905-0948bfc7c063",
	0,
	'',
	"43435762-33d0-4a83-87c2-53a7a52d3831",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("48514e79-7302-419e-a905-0948bfc7c063",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Break>',
	'',
	'',
	'../Body/Body.xtuml');
INSERT INTO PE_PE
	VALUES ("7c45bdc4-57ef-4005-a85c-be4bb0256fc5",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("e5aaf14c-bbca-42be-9614-dcdb7453ac51",
	"00000000-0000-0000-0000-000000000000",
	'smt_continues',
	'',
	'//
// --------------------------------------------------------
// continue statements
// --------------------------------------------------------
select many act_cons from instances of ACT_CON;
for each act_con in act_cons
  select one te_smt related by act_con->ACT_SMT[R603]->TE_SMT[R2038];
  r = ::smt_continue( te_smt:te_smt, act_con:act_con );
  te_smt.buffer = r;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("e5aaf14c-bbca-42be-9614-dcdb7453ac51",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("b81c2ec4-79cd-42be-bc2e-b86fa40a114d",
	"00000000-0000-0000-0000-000000000000",
	'smt_continue',
	'',
	'//
// --------------------------------------------------------
// continue statement
// --------------------------------------------------------
te_smt = param.te_smt;
act_con = param.act_con;
select any te_file from instances of TE_FILE;
select one te_blk related by te_smt->TE_BLK[R2078];
ws = te_blk.indentation;
// Deallocate any variables allocated from this block and higher blocks up to containing WHILE or FOR.
deallocation = te_blk.deallocation;
select one parent_te_blk related by te_blk->TE_SMT[R2015]->TE_BLK[R2078];
while ( not_empty parent_te_blk )
  select one parent_te_smt related by parent_te_blk->TE_SMT[R2015];
  if ( not_empty parent_te_smt )
    deallocation = deallocation + parent_te_blk.deallocation;
    if ( ( "TE_WHL" == parent_te_smt.subtypeKL ) or ( "TE_FOR" == parent_te_smt.subtypeKL ) )
      break;
    end if;
  end if;
  select one parent_te_blk related by parent_te_smt->TE_BLK[R2078];
end while;
T::include(file:"te_file.arc_path/t.smt.continue.c");
te_smt.OAL = "CONTINUE";
return T::body();
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("89c39811-8ef8-4cf7-9278-3ebfc8a05431",
	"b81c2ec4-79cd-42be-bc2e-b86fa40a114d",
	'te_smt',
	"20eb7827-fd8a-4b79-b705-c928064fb55d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("c5efca65-76bd-4a31-920b-ef4cad71564f",
	"b81c2ec4-79cd-42be-bc2e-b86fa40a114d",
	'act_con',
	"812ed5f2-7905-41fd-9351-05a93ad65d56",
	0,
	'',
	"89c39811-8ef8-4cf7-9278-3ebfc8a05431",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("812ed5f2-7905-41fd-9351-05a93ad65d56",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Continue>',
	'',
	'',
	'../Body/Body.xtuml');
INSERT INTO PE_PE
	VALUES ("b81c2ec4-79cd-42be-bc2e-b86fa40a114d",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("3df91501-9dc0-4c3a-ab00-32130d46d977",
	"00000000-0000-0000-0000-000000000000",
	'smt_select_related',
	'',
	'//
te_smt = param.te_smt;
act_sel = param.act_sel;
by_where = param.by_where;
select any te_file from instances of TE_FILE;
select any te_set from instances of TE_SET;
select any empty_te_lnk from instances of TE_LNK where ( false );
select any empty_act_lnk from instances of ACT_LNK where ( false );
select one te_blk related by te_smt->TE_BLK[R2078];
select one start_v_val related by act_sel->V_VAL[R613];
select one start_te_val related by start_v_val->TE_VAL[R2040];
select one start_v_var related by start_v_val->V_IRF[R801]->V_VAR[R808];
select one start_o_obj related by start_v_var->V_INT[R814]->O_OBJ[R818];
start_many = false;
if ( empty start_v_var )
  start_many = true;
  select one start_v_var related by start_v_val->V_ISR[R801]->V_VAR[R809];
  select one start_o_obj related by start_v_var->V_INS[R814]->O_OBJ[R819];
end if;
select one start_te_class related by start_o_obj->TE_CLASS[R2019];
if ( not_empty start_te_class )
  // QUERY and POPULATE:  FactoryTE_SELECT_RELATED
  // Create and link the translation instance for select_related.
  create object instance te_select_related of TE_SELECT_RELATED;
  te_select_related.by_where = by_where;
  te_select_related.is_implicit = act_sel.is_implicit;
  te_select_related.multiplicity = act_sel.cardinality;
  relate te_select_related to start_te_class across R2077;
  select one start_te_var related by start_v_var->TE_VAR[R2039];
  te_select_related.start_var = start_te_val.buffer;
  te_select_related.start_var_OAL = start_te_val.OAL;
  if ( start_many )
    te_select_related.start_many = true;
  end if;
  select one act_lnk related by act_sel->ACT_LNK[R637];
  select one te_lnk related by act_lnk->TE_LNK[R2042];
  // Here we detect and insert a link association if we have
  // traversed directly from aone to aoth (or vice versa) across an
  // associative association.  Insert the associative link between
  // the starting variable and the first link in the chain.
  r = ::detect_and_insert_associator_TE_LNK( te_lnk:empty_te_lnk, next_te_lnk:te_lnk, act_lnk:empty_act_lnk, next_act_lnk:act_lnk, start_o_obj:start_o_obj );
  assr_te_lnk = r;
  if ( not_empty assr_te_lnk )
    te_lnk = assr_te_lnk;
  end if;
  // We detect first here.  We detect last in primary query/populate.
  te_lnk.first = true;
  // For the first link, the left (set) reference is the link start variable.
  te_lnk.left = te_select_related.start_var;
  select one result_v_var related by act_sel->V_VAR[R638];
  select one result_te_var related by result_v_var->TE_VAR[R2039];
  te_select_related.result_var = result_te_var.buffer;
  te_select_related.result_var_OAL = result_te_var.OAL;
  select one te_class related by result_v_var->V_INT[R814]->O_OBJ[R818]->TE_CLASS[R2019];
  if ( "many" == te_select_related.multiplicity )
    select one te_class related by result_v_var->V_INS[R814]->O_OBJ[R819]->TE_CLASS[R2019];
  end if;
  if ( te_select_related.start_many )
    te_lnk.left = te_select_related.te_classGeneratedName + "_linkage";
  end if;
  if ( te_select_related.by_where )
    select one where_te_val related by act_sel->ACT_SRW[R664]->V_VAL[R611]->TE_VAL[R2040];
    relate where_te_val to te_select_related across R2074;
    te_select_related.where_clause = where_te_val.buffer;
    te_select_related.where_clause_OAL = where_te_val.OAL;
  end if;
  relate te_select_related to te_smt across R2069;
  relate te_select_related to start_te_val across R2070;
  relate te_select_related to start_te_var across R2094;
  relate te_select_related to te_lnk across R2073;
  //
  // RENDER
  // Truth Table
  //
  // Notes:
  // 1) Selecting "many" or "any" through a chain that has multiplicity 1
  //    all the way through should not be allowed by the OAL parser.
  //    However, maybe a parser will not catch it.  Therefore, we will
  //    support the construct in the code generator.  We will treat it
  //    like the corresponding "one" case but populate an result set.
  // 2) Selecting "one" through a chain that has multiplicity M should
  //    not be allowed by the OAL parser.  However, maybe a parser will
  //    miss it.  Therefore, we will do something that makes sense.  We
  //    treat it like the "any" case in the code generator.
  // 
  //   A <*----R1----1> B <*----R2----1> C
  //     <1----R9----*>   <1----R8----*>  
  // 
  // single-link chains
  // Declaration based upon multiplicity.
  //  #  | first | last | startmany | multiplicity | linkmult | by_where | example
  //  1  |   T   |  T   |     F     |   "one"      |  0:one   |    F     | select one b related by a->B[R1];
  //  2  |   T   |  T   |     F     |   "one"      |  0:one   |    T     | select one b related by a->B[R1] where ( selected.i == 7 );
  //  3  |   T   |  T   |     F     | "one"->"any" |  1:many  |    F     | select one b related by a->B[R9];                              // Note 2
  //  4  |   T   |  T   |     F     | "one"->"any" |  1:many  |    T     | select one b related by a->B[R9] where ( selected.i == 7 );    // Note 2
  //  5  |   T   |  T   |     F     |   "any"      |  0:one   |    F     | select any b related by a->B[R1];                              // Note 1
  //  6  |   T   |  T   |     F     |   "any"      |  0:one   |    T     | select any b related by a->B[R1] where ( selected.i == 7 );    // Note 1
  //  7  |   T   |  T   |     F     |   "any"      |  1:many  |    F     | select any b related by a->B[R9];
  //  8  |   T   |  T   |     F     |   "any"      |  1:many  |    T     | select any b related by a->B[R9] where ( selected.i == 7 );
  //  9  |   T   |  T   |     F     |   "many"     |  0:one   |    F     | select many bs related by a->B[R1];                            // Note 1
  // 10  |   T   |  T   |     F     |   "many"     |  0:one   |    T     | select many bs related by a->B[R1] where ( selected.i == 7 );  // Note 1
  // 11  |   T   |  T   |     F     |   "many"     |  1:many  |    F     | select many bs related by a->B[R9];
  // 12  |   T   |  T   |     F     |   "many"     |  1:many  |    T     | select many bs related by a->B[R9] where ( selected.i == 7 );
  // 13  |   T   |  T   |     T     | "one"->"any" |  0:one   |    F     | select one b related by as->B[R1];                             // Note 2
  // 14  |   T   |  T   |     T     | "one"->"any" |  0:one   |    T     | select one b related by as->B[R1] where ( selected.i == 7 );   // Note 2
  // 15  |   T   |  T   |     T     | "one"->"any" |  1:many  |    F     | select one b related by as->B[R9];                             // Note 2
  // 16  |   T   |  T   |     T     | "one"->"any" |  1:many  |    T     | select one b related by as->B[R9] where ( selected.i == 7 );   // Note 2
  // 17  |   T   |  T   |     T     |   "any"      |  0:one   |    F     | select any b related by as->B[R1];
  // 18  |   T   |  T   |     T     |   "any"      |  0:one   |    T     | select any b related by as->B[R1] where ( selected.i == 7 );
  // 19  |   T   |  T   |     T     |   "any"      |  1:many  |    F     | select any b related by as->B[R9];
  // 20  |   T   |  T   |     T     |   "any"      |  1:many  |    T     | select any b related by as->B[R9] where ( selected.i == 7 );
  // 21  |   T   |  T   |     T     |   "many"     |  0:one   |    F     | select many bs related by as->B[R1];
  // 22  |   T   |  T   |     T     |   "many"     |  0:one   |    T     | select many bs related by as->B[R1] where ( selected.i == 7 );
  // 23  |   T   |  T   |     T     |   "many"     |  1:many  |    F     | select many bs related by as->B[R9];
  // 24  |   T   |  T   |     T     |   "many"     |  1:many  |    T     | select many bs related by as->B[R9] where ( selected.i == 7 );
  // multi-link chains
  // Declaration/initialization based upon multiplicity.
  // First iterator based upon startmany.
  // Chaining based upon multiplicity (and "any").
  //  #  | first | last | multiplicity | linkmult | by_where | example
  //  1m |   T   |  F   |   "one"      |  0:one   |    F     | select one c related by a(s)->B[R1]->C[R2];
  //  2m |   T   |  F   |   "one"      |  0:one   |    T     | select one c related by a(s)->B[R1]->C[R2] where ( selected.i == 7 );
  //  3m |   T   |  F   | "one"->"any" |  1:many  |    F     | select one c related by a(s)->B[R9]->C[R8];                              // Note 2
  //  4m |   T   |  F   | "one"->"any" |  1:many  |    T     | select one c related by a(s)->B[R9]->C[R8] where ( selected.i == 7 );    // Note 2
  //  5m |   T   |  F   |   "any"      |  0:one   |    F     | select any c related by a(s)->B[R1]->C[R2];                              // Note 1, 2
  //  6m |   T   |  F   |   "any"      |  0:one   |    T     | select any c related by a(s)->B[R1]->C[R2] where ( selected.i == 7 );    // Note 1, 2
  //  7m |   T   |  F   |   "any"      |  1:many  |    F     | select any c related by a(s)->B[R9]->C[R8];
  //  8m |   T   |  F   |   "any"      |  1:many  |    T     | select any c related by a(s)->B[R9]->C[R8] where ( selected.i == 7 );
  //  9m |   T   |  F   |   "many"     |  0:one   |    F     | select many cs related by a(s)->B[R1]->C[R2];                            // Note 1
  // 10m |   T   |  F   |   "many"     |  0:one   |    T     | select many cs related by a(s)->B[R1]->C[R2] where ( selected.i == 7 );  // Note 1
  // 11m |   T   |  F   |   "many"     |  1:many  |    F     | select many cs related by a(s)->B[R9]->C[R8];
  // 12m |   T   |  F   |   "many"     |  1:many  |    T     | select many cs related by a(s)->B[R9]->C[R8] where ( selected.i == 7 );
  // 
  ws = te_blk.indentation;
  te_smt.OAL = "SELECT te_select_related.multiplicity te_select_related.result_var_OAL RELATED BY te_select_related.start_var_OAL";
  // declaration
  b = "";
  if ( te_select_related.is_implicit )
    if ( "many" == te_select_related.multiplicity )
      T::include(file:"te_file.arc_path/t.smt_sr.declare_set.c");
      te_smt.declaration = b;
      b = "";
      T::include(file:"te_file.arc_path/t.smt_sr.deallocate_set.c");
      te_smt.deallocation = b;
      // Push deallocation into the block so that it is available at gen time for break/continue/return.
      te_blk.deallocation = te_blk.deallocation + te_smt.deallocation;
    else
      T::include(file:"te_file.arc_path/t.smt_sr.declare_ref.c");
      te_smt.declaration = b;
    end if;
  end if;
  cast = "";
  subtypecheck = "";
  select any sub_r_rel from instances of R_REL where ( false );
  if ( "subsuper" == te_lnk.assoc_type )
    select any sub_r_rel related by te_class->O_OBJ[R2019]->R_OIR[R201]->R_RGO[R203]->R_SUB[R205]->R_SUBSUP[R213]->R_REL[R206] where ( selected.Numb == te_lnk.rel_number );
    if ( not_empty sub_r_rel )
      lnk_te_class = te_class;
      cast = ( "(" + te_lnk.te_classGeneratedName ) + " *) ";
      T::include(file:"te_file.arc_path/t.smt_sr.subtypecheck.c");
    end if;
  end if;
  b = "";
  // single-link chains
  //  #  | first | last | startmany | multiplicity | linkmult | by_where | example
  if ( ( te_lnk.first ) and ( te_lnk.last ) )
    te_smt.OAL = te_smt.OAL + te_lnk.OAL;
    if ( not te_select_related.start_many )
      if ( "one" == te_select_related.multiplicity )
        if ( 0 == te_lnk.Mult )
          if ( not_empty sub_r_rel )
            T::include(file:"te_file.arc_path/t.smt_sr.result_ref_init.c");
            b = b + subtypecheck;
          end if;
          if ( not te_select_related.by_where )
            //  1  |   T   |  T   |     F     |   "one"      |  0:one   |    F     | select one b related by a->B[R1];
            T::include(file:"te_file.arc_path/t.smt_sr.oneany_atob1.c");
          else
            //  2  |   T   |  T   |     F     |   "one"      |  0:one   |    T     | select one b related by a->B[R1] where ( selected.i == 7 );
            T::include(file:"te_file.arc_path/t.smt_sr.oneany_atob1where.c");
          end if;
        else
          if ( not te_select_related.by_where )
            //  3  |   T   |  T   |     F     | "one"->"any" |  1:many  |    F     | select one b related by a->B[R9];                              // Note 2
            T::include(file:"te_file.arc_path/t.smt_sr.oneany_atobm.c");
          else
            //  4  |   T   |  T   |     F     | "one"->"any" |  1:many  |    T     | select one b related by a->B[R9] where ( selected.i == 7 );    // Note 2
            T::include(file:"te_file.arc_path/t.smt_sr.oneany_atobmwhere.c");
          end if;
        end if;
      elif ( "any" == te_select_related.multiplicity )
        if ( 0 == te_lnk.Mult )
          if ( not_empty sub_r_rel )
            T::include(file:"te_file.arc_path/t.smt_sr.result_ref_init.c");
            b = b + subtypecheck;
          end if;
          if ( not te_select_related.by_where )
            //  5  |   T   |  T   |     F     |   "any"      |  0:one   |    F     | select any b related by a->B[R1];                              // Note 1
            T::include(file:"te_file.arc_path/t.smt_sr.oneany_atob1.c");
          else
            //  6  |   T   |  T   |     F     |   "any"      |  0:one   |    T     | select any b related by a->B[R1] where ( selected.i == 7 );    // Note 1
            T::include(file:"te_file.arc_path/t.smt_sr.oneany_atob1where.c");
          end if;
        else
          if ( not te_select_related.by_where )
            //  7  |   T   |  T   |     F     |   "any"      |  1:many  |    F     | select any b related by a->B[R9];
            T::include(file:"te_file.arc_path/t.smt_sr.oneany_atobm.c");
          else
            //  8  |   T   |  T   |     F     |   "any"      |  1:many  |    T     | select any b related by a->B[R9] where ( selected.i == 7 );
            T::include(file:"te_file.arc_path/t.smt_sr.oneany_atobmwhere.c");
          end if;
        end if;
      else
        if ( 0 == te_lnk.Mult )
          if ( not te_select_related.by_where )
            //  9  |   T   |  T   |     F     |   "many"     |  0:one   |    F     | select many bs related by a->B[R1];                            // Note 1
            T::include(file:"te_file.arc_path/t.smt_sr.many_atob1.c");
          else
            // 10  |   T   |  T   |     F     |   "many"     |  0:one   |    T     | select many bs related by a->B[R1] where ( selected.i == 7 );  // Note 1
            T::include(file:"te_file.arc_path/t.smt_sr.many_atob1where.c");
          end if;
        else
          if ( not te_select_related.by_where )
            // 11  |   T   |  T   |     F     |   "many"     |  1:many  |    F     | select many bs related by a->B[R9];
            T::include(file:"te_file.arc_path/t.smt_sr.many_atobm.c");
          else
            // 12  |   T   |  T   |     F     |   "many"     |  1:many  |    T     | select many bs related by a->B[R9] where ( selected.i == 7 );
            T::include(file:"te_file.arc_path/t.smt_sr.many_atobmwhere.c");
          end if;
        end if;
      end if;
    else
      if ( "one" == te_select_related.multiplicity )
        if ( 0 == te_lnk.Mult )
          if ( not te_select_related.by_where )
            // 13  |   T   |  T   |     T     | "one"->"any" |  0:one   |    F     | select one b related by as->B[R1];                             // Note 2
            T::include(file:"te_file.arc_path/t.smt_sr.oneany_astob1.c");
          else
            // 14  |   T   |  T   |     T     | "one"->"any" |  0:one   |    T     | select one b related by as->B[R1] where ( selected.i == 7 );   // Note 2
            T::include(file:"te_file.arc_path/t.smt_sr.oneany_astob1where.c");
          end if;
        else
          if ( not te_select_related.by_where )
            // 15  |   T   |  T   |     T     | "one"->"any" |  1:many  |    F     | select one b related by as->B[R9];                             // Note 2
            T::include(file:"te_file.arc_path/t.smt_sr.oneany_astobm.c");
          else
            // 16  |   T   |  T   |     T     | "one"->"any" |  1:many  |    T     | select one b related by as->B[R9] where ( selected.i == 7 );   // Note 2
            T::include(file:"te_file.arc_path/t.smt_sr.oneany_astobmwhere.c");
          end if;
        end if;
      elif ( "any" == te_select_related.multiplicity )
        if ( 0 == te_lnk.Mult )
          if ( not te_select_related.by_where )
            // 17  |   T   |  T   |     T     |   "any"      |  0:one   |    F     | select any b related by as->B[R1];
            T::include(file:"te_file.arc_path/t.smt_sr.oneany_astob1.c");
          else
            // 18  |   T   |  T   |     T     |   "any"      |  0:one   |    T     | select any b related by as->B[R1] where ( selected.i == 7 );
            T::include(file:"te_file.arc_path/t.smt_sr.oneany_astob1where.c");
          end if;
        else
          if ( not te_select_related.by_where )
            // 19  |   T   |  T   |     T     |   "any"      |  1:many  |    F     | select any b related by as->B[R9];
            T::include(file:"te_file.arc_path/t.smt_sr.oneany_astobm.c");
          else
            // 20  |   T   |  T   |     T     |   "any"      |  1:many  |    T     | select any b related by as->B[R9] where ( selected.i == 7 );
            T::include(file:"te_file.arc_path/t.smt_sr.oneany_astobmwhere.c");
          end if;
        end if;
      else
        if ( 0 == te_lnk.Mult )
          if ( not te_select_related.by_where )
            // 21  |   T   |  T   |     T     |   "many"     |  0:one   |    F     | select many bs related by as->B[R1];
            T::include(file:"te_file.arc_path/t.smt_sr.many_astob1.c");
          else
            // 22  |   T   |  T   |     T     |   "many"     |  0:one   |    T     | select many bs related by as->B[R1] where ( selected.i == 7 );
            T::include(file:"te_file.arc_path/t.smt_sr.many_astob1where.c");
          end if;
        else
          if ( not te_select_related.by_where )
            // 23  |   T   |  T   |     T     |   "many"     |  1:many  |    F     | select many bs related by as->B[R9];
            T::include(file:"te_file.arc_path/t.smt_sr.many_astobm.c");
          else
            // 24  |   T   |  T   |     T     |   "many"     |  1:many  |    T     | select many bs related by as->B[R9] where ( selected.i == 7 );
            T::include(file:"te_file.arc_path/t.smt_sr.many_astobmwhere.c");
          end if; // by_where
        end if; // last link mult
      end if; // one, any, many
    end if; // start many
  else
    //
    // multi-link chains
    // multi-link chains
    // This may need to be refactored to remove some degree of control.
    depth = 0;
    if ( "many" == te_select_related.multiplicity )
      T::include(file:"te_file.arc_path/t.smt_sr.result_set_init.c");
    else
      T::include(file:"te_file.arc_path/t.smt_sr.result_ref_init.c");
    end if;
    b = b + "ws{";
    depth = depth + 1;
    if ( te_select_related.start_many )
      depth = depth + 1;
      T::include(file:"te_file.arc_path/t.smt_sr.start_many.c");
    else
      depth = depth + 1;
      T::include(file:"te_file.arc_path/t.smt_sr.start_one.c");
    end if;
    // drill through the chained links
    while ( not te_lnk.last )
      depth = depth + 1;
      te_smt.OAL = te_smt.OAL + te_lnk.OAL;
      if ( 0 == te_lnk.Mult )
        cast = "";
        subtypecheck = "";
        if ( "subsuper" == te_lnk.assoc_type )
          select one lnk_te_class related by te_lnk->TE_CLASS[R2076];
          select any sub_r_rel related by lnk_te_class->O_OBJ[R2019]->R_OIR[R201]->R_RGO[R203]->R_SUB[R205]->R_SUBSUP[R213]->R_REL[R206] where ( selected.Numb == te_lnk.rel_number );
          if ( not_empty sub_r_rel )
            cast = ( "(" + te_lnk.te_classGeneratedName ) + " *) ";
            T::include(file:"te_file.arc_path/t.smt_sr.subtypecheck.c");
          end if;
        end if;
        T::include(file:"te_file.arc_path/t.smt_sr.chainto1.c");
      else
        T::include(file:"te_file.arc_path/t.smt_sr.chaintom.c");
      end if;
      select one te_lnk related by te_lnk->TE_LNK[R2075.''succeeds''];
    end while;
    te_smt.OAL = te_smt.OAL + te_lnk.OAL;
    cast = "";
    subtypecheck = "";
    if ( "subsuper" == te_lnk.assoc_type )
      select any sub_r_rel related by te_class->O_OBJ[R2019]->R_OIR[R201]->R_RGO[R203]->R_SUB[R205]->R_SUBSUP[R213]->R_REL[R206] where ( selected.Numb == te_lnk.rel_number );
      if ( not_empty sub_r_rel )
        lnk_te_class = te_class;
        cast = ( "(" + te_lnk.te_classGeneratedName ) + " *) ";
        T::include(file:"te_file.arc_path/t.smt_sr.subtypecheck.c");
      end if;
    end if;
    // now finish up
    if ( "one" == te_select_related.multiplicity )
      if ( 0 == te_lnk.Mult )
        if ( not_empty sub_r_rel )
          b = b + subtypecheck;
        end if;
        if ( not te_select_related.by_where )
          //  1m |   T   |  F   |   "one"      |  0:one   |    F     | select one c related by a(s)->B[R1]->C[R2];
          T::include(file:"te_file.arc_path/t.smt_sr.multi_oneany_astob1.c");
        else
          //  2m |   T   |  F   |   "one"      |  0:one   |    T     | select one c related by a(s)->B[R1]->C[R2] where ( selected.i == 7 );
          T::include(file:"te_file.arc_path/t.smt_sr.multi_oneany_astob1where.c");
        end if;
      else
        if ( not te_select_related.by_where )
          //  3m |   T   |  F   | "one"->"any" |  1:many  |    F     | select one c related by a(s)->B[R9]->C[R8];                              // Note 2
          T::include(file:"te_file.arc_path/t.smt_sr.oneany_atobm.c");
        else
          //  4m |   T   |  F   | "one"->"any" |  1:many  |    T     | select one c related by a(s)->B[R9]->C[R8] where ( selected.i == 7 );    // Note 2
          T::include(file:"te_file.arc_path/t.smt_sr.multi_oneany_astobmwhere.c");
        end if;
      end if;
    elif ( "any" == te_select_related.multiplicity )
      if ( 0 == te_lnk.Mult )
        if ( not_empty sub_r_rel )
          b = b + subtypecheck;
        end if;
        if ( not te_select_related.by_where )
          //  5m |   T   |  F   |   "any"      |  0:one   |    F     | select any c related by a(s)->B[R1]->C[R2];                              // Note 1, 2
          T::include(file:"te_file.arc_path/t.smt_sr.multi_oneany_astob1.c");
        else
          //  6m |   T   |  F   |   "any"      |  0:one   |    T     | select any c related by a(s)->B[R1]->C[R2] where ( selected.i == 7 );    // Note 1, 2
          T::include(file:"te_file.arc_path/t.smt_sr.multi_oneany_astob1where.c");
        end if;
      else
        if ( not te_select_related.by_where )
          //  7m |   T   |  F   |   "any"      |  1:many  |    F     | select any c related by a(s)->B[R9]->C[R8];
          T::include(file:"te_file.arc_path/t.smt_sr.oneany_atobm.c");
        else
          //  8m |   T   |  F   |   "any"      |  1:many  |    T     | select any c related by a(s)->B[R9]->C[R8] where ( selected.i == 7 );
          T::include(file:"te_file.arc_path/t.smt_sr.multi_oneany_astobmwhere.c");
        end if;
      end if;
    else
      if ( 0 == te_lnk.Mult )
        if ( not_empty sub_r_rel )
          b = b + subtypecheck;
        end if;
        if ( not te_select_related.by_where )
          //  9m |   T   |  F   |   "many"     |  0:one   |    F     | select many cs related by a(s)->B[R1]->C[R2];                            // Note 1
          T::include(file:"te_file.arc_path/t.smt_sr.multi_many_astob1.c");
        else
          // 10m |   T   |  F   |   "many"     |  0:one   |    T     | select many cs related by a(s)->B[R1]->C[R2] where ( selected.i == 7 );  // Note 1
          T::include(file:"te_file.arc_path/t.smt_sr.multi_many_astob1where.c");
        end if;
      else
        if ( not te_select_related.by_where )
          // 11m |   T   |  F   |   "many"     |  1:many  |    F     | select many cs related by a(s)->B[R9]->C[R8];
          T::include(file:"te_file.arc_path/t.smt_sr.multi_many_astobm.c");
        else
          // 12m |   T   |  F   |   "many"     |  1:many  |    T     | select many cs related by a(s)->B[R9]->C[R8] where ( selected.i == 7 );
          T::include(file:"te_file.arc_path/t.smt_sr.multi_many_astobmwhere.c");
        end if; // by_where
      end if; // last link mult
    end if; // one, any, many
    //
    while ( depth > 0 )
      b = b + "}";
      depth = depth - 1;
    end while;
    b = b + "\n";
  end if;
T::b(s:b);
  if ( te_select_related.by_where )
    te_smt.OAL = te_smt.OAL + " WHERE ( te_select_related.where_clause_OAL )";
  end if;
end if;
return T::body();
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("f15e9e27-1006-4b53-8783-8d9d1f0f651b",
	"3df91501-9dc0-4c3a-ab00-32130d46d977",
	'te_smt',
	"20eb7827-fd8a-4b79-b705-c928064fb55d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("a7344b99-ef19-4763-9929-d6823f820231",
	"3df91501-9dc0-4c3a-ab00-32130d46d977",
	'act_sel',
	"601e1da3-d769-4742-b08f-666e38588da0",
	0,
	'',
	"f15e9e27-1006-4b53-8783-8d9d1f0f651b",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("601e1da3-d769-4742-b08f-666e38588da0",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Select>',
	'',
	'',
	'../Selection/Selection.xtuml');
INSERT INTO S_SPARM
	VALUES ("4284e93d-d19e-4c46-8b91-54eab4d5aecd",
	"3df91501-9dc0-4c3a-ab00-32130d46d977",
	'by_where',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"a7344b99-ef19-4763-9929-d6823f820231",
	'');
INSERT INTO PE_PE
	VALUES ("3df91501-9dc0-4c3a-ab00-32130d46d977",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("a717cbc2-9cec-4a1e-9b2c-4a7ac0cc4442",
	"00000000-0000-0000-0000-000000000000",
	'GetRelationshipDataMemberName',
	'',
	'//============================================================================
// $RCSfile: q.names.rels.arc,v $
//
// Description:
// This archetype file contains utility functions for relationship namings
// that span multiple archetype files.
//
// Notice:
// (C) Copyright 1998-2013 Mentor Graphics Corporation
//     All rights reserved.
//
// This document contains confidential and proprietary information and
// property of Mentor Graphics Corp.  No part of this document may be
// reproduced without the express written permission of Mentor Graphics Corp.
//============================================================================
//
//
//============================================================================
// This function returns the name of the object member data to be used
// for (optimized) storage of a link to a related object.
//============================================================================
o_obj = param.o_obj;
r_rel = param.r_rel;
rel_phrase = param.rel_phrase;
result = ( o_obj.Key_Lett + "_R" ) + "r_rel.Numb";
r = ::GetRelationshipSuffix( right_o_obj:o_obj, r_rel:r_rel, rel_phrase:rel_phrase );
suffix = r;
if ( "" != suffix )
  result = result + ( "_" + suffix );
end if;
// Subtype-Supertype relationship?
select one subsup_rel related by r_rel->R_SUBSUP[R206];
if ( not_empty subsup_rel )
  select any subtype related by r_rel->R_SUBSUP[R206]->R_SUB[R213] where ( selected.Obj_ID == o_obj.Obj_ID );
  if ( not_empty subtype )
    result = ( "R" + "r_rel.Numb" ) + "_subtype";
  end if;
end if;
return result;
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("255a1ebb-45a8-4716-86f7-f52d319a96bc",
	"a717cbc2-9cec-4a1e-9b2c-4a7ac0cc4442",
	'o_obj',
	"d6b21eeb-39da-43bf-b503-c7bbc9ddf242",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("d6b21eeb-39da-43bf-b503-c7bbc9ddf242",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Model Class>',
	'',
	'',
	'../Instance Reference Data Types/Instance Reference Data Types.xtuml');
INSERT INTO S_SPARM
	VALUES ("672a24f6-4dbb-4594-97b0-a116a8d5abb8",
	"a717cbc2-9cec-4a1e-9b2c-4a7ac0cc4442",
	'r_rel',
	"620e9be8-e289-47ed-9279-69b359c269c5",
	0,
	'',
	"255a1ebb-45a8-4716-86f7-f52d319a96bc",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("620e9be8-e289-47ed-9279-69b359c269c5",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Association>',
	'',
	'',
	'../Association/Association.xtuml');
INSERT INTO S_SPARM
	VALUES ("37b02165-7121-4a47-8538-838e3a743126",
	"a717cbc2-9cec-4a1e-9b2c-4a7ac0cc4442",
	'rel_phrase',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"672a24f6-4dbb-4594-97b0-a116a8d5abb8",
	'');
INSERT INTO PE_PE
	VALUES ("a717cbc2-9cec-4a1e-9b2c-4a7ac0cc4442",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("c0b966d8-5f43-4f4b-837d-14d18884da13",
	"00000000-0000-0000-0000-000000000000",
	'GetRelationshipSuffix',
	'',
	'//
//============================================================================
// Given a relationship <rel> and the object at the other (e.g., right)
// end <right_obj>, determine the suffix to be used in the relationship
// link, unlink, and navigation accessor methods.
// Parameter <rel_phrase> is used for reflexive relationships to determine
// which "end" of the relationship to get the suffix for.
//============================================================================
right_o_obj = param.right_o_obj;
r_rel = param.r_rel;
rel_phrase = param.rel_phrase;
//
result = "";
select one simple_rel related by r_rel->R_SIMP[R206];
if ( not_empty simple_rel )
  select any participant related by simple_rel->R_PART[R207];
  select one formalizer related by simple_rel->R_FORM[R208];
  if ( right_o_obj.Obj_ID == participant.Obj_ID )
    result = T::underscore(s:participant.Txt_Phrs);
  else
    result = T::underscore(s:formalizer.Txt_Phrs);
  end if;
  if ( participant.Obj_ID == formalizer.Obj_ID )
    if ( participant.Txt_Phrs == rel_phrase )
      result = T::underscore(s:participant.Txt_Phrs);
    elif ( formalizer.Txt_Phrs == rel_phrase )
      result = T::underscore(s:formalizer.Txt_Phrs);
    else
      msg = "\nTRANSLATION ERROR:  right_o_obj.Key_Lett[Rr_rel.Numb.''rel_phrase'']";
      msg = msg + "\nInternal logic error for reflexive simple relationship.";
      T::print(s:"msg");
      T::exit(i:101);
    end if;
  end if;
else
  select one assoc_rel related by r_rel->R_ASSOC[R206];
  if ( not_empty assoc_rel )
    select one assr related by assoc_rel->R_ASSR[R211];
    select one one_side related by assoc_rel->R_AONE[R209];
    select one other_side related by assoc_rel->R_AOTH[R210];
    if ( one_side.Obj_ID == other_side.Obj_ID )
      // Reflexive associative relationship
      if ( rel_phrase == one_side.Txt_Phrs )
        result = T::underscore(s:one_side.Txt_Phrs);
        // CDS Consider checking here for one side versus other side.
        // In a role-symmetric reflexive associative, the relationship
        // phrase may be identical on both ends.
      elif ( rel_phrase == other_side.Txt_Phrs )
        result = T::underscore(s:other_side.Txt_Phrs);
      else
        msg = "\nTRANSLATION ERROR:  right_o_obj.Key_Lett[Rr_rel.Numb.''rel_phrase'']";
        msg = msg + "\nInternal logic error for reflexive associative relationship.";
        T::print(s:"msg");
        T::exit(i:101);
      end if;
      if ( right_o_obj.Obj_ID == assr.Obj_ID )
      end if;
    else
      if ( right_o_obj.Obj_ID == one_side.Obj_ID )
        result = T::underscore(s:one_side.Txt_Phrs);
      elif ( right_o_obj.Obj_ID == other_side.Obj_ID )
        result = T::underscore(s:other_side.Txt_Phrs);
      end if;
    end if; // one_side.Obj_ID == other_side.Obj_ID
  end if; // not_empty assoc_rel
end if; //  not_empty simp_rel
return result;
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("675395bc-78a3-4964-ba30-1353d99485b8",
	"c0b966d8-5f43-4f4b-837d-14d18884da13",
	'right_o_obj',
	"d6b21eeb-39da-43bf-b503-c7bbc9ddf242",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("7f53d71e-41e7-4bf1-8dd5-e732f5d0a0a2",
	"c0b966d8-5f43-4f4b-837d-14d18884da13",
	'r_rel',
	"620e9be8-e289-47ed-9279-69b359c269c5",
	0,
	'',
	"675395bc-78a3-4964-ba30-1353d99485b8",
	'');
INSERT INTO S_SPARM
	VALUES ("62b2b942-9122-4fcb-841c-b778a392ecd6",
	"c0b966d8-5f43-4f4b-837d-14d18884da13",
	'rel_phrase',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"7f53d71e-41e7-4bf1-8dd5-e732f5d0a0a2",
	'');
INSERT INTO PE_PE
	VALUES ("c0b966d8-5f43-4f4b-837d-14d18884da13",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("5d28e5cd-afd8-42de-86de-a64f7c196b20",
	"00000000-0000-0000-0000-000000000000",
	'TE_REL_IsLeftFormalizer',
	'',
	'//
//============================================================================
// Returns whether the left O_OBJ is the formalizer.
//=============================================================================
left_o_obj = param.left_o_obj;
r_rel = param.r_rel;
rel_phrase = param.rel_phrase;
//
result = false;
select one r_simp related by r_rel->R_SIMP[R206];
if ( not_empty r_simp )
  select one formalizer related by r_simp->R_FORM[R208];
  select any participant related by r_simp->R_PART[R207];
  if ( participant.Obj_ID != formalizer.Obj_ID )
    // *** Normal Simple Relationship
    if ( left_o_obj.Obj_ID == formalizer.Obj_ID )
      // Left object is formalizer, right object is participant.
      result = true;
    end if;
  else
    // *** Simple Reflexive Relationship
    if ( rel_phrase == participant.Txt_Phrs )
      // Left object is formalizer, right object is participant.
      result = true;
    end if;
  end if;
else
  select one subtype_supertype_rel related by r_rel->R_SUBSUP[R206];
  // Subtype-Supertype relationship?
  if ( not_empty subtype_supertype_rel )
    // Left object is the subtype (formalizer)?
    select any subtype related by subtype_supertype_rel->R_SUB[R213] where ( selected.Obj_ID == left_o_obj.Obj_ID );
    if ( not_empty subtype )
      result = true;
    end if;
  end if;
end if;
return result;
',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("a3a04209-d152-494e-ac7f-987b92b0e198",
	"5d28e5cd-afd8-42de-86de-a64f7c196b20",
	'left_o_obj',
	"d6b21eeb-39da-43bf-b503-c7bbc9ddf242",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("8824d76c-7e74-4658-b12c-fbc002f057cb",
	"5d28e5cd-afd8-42de-86de-a64f7c196b20",
	'r_rel',
	"620e9be8-e289-47ed-9279-69b359c269c5",
	0,
	'',
	"a3a04209-d152-494e-ac7f-987b92b0e198",
	'');
INSERT INTO S_SPARM
	VALUES ("dc45046d-99c3-45e6-9702-42bb8a66ad81",
	"5d28e5cd-afd8-42de-86de-a64f7c196b20",
	'rel_phrase',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"8824d76c-7e74-4658-b12c-fbc002f057cb",
	'');
INSERT INTO PE_PE
	VALUES ("5d28e5cd-afd8-42de-86de-a64f7c196b20",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("e64e8479-bfe1-4be4-bb48-f5dd3e7f0bf9",
	"00000000-0000-0000-0000-000000000000",
	'GetFixedSizeClassExtentInfo',
	'',
	'//============================================================================
// $RCSfile: q.names.arc,v $
//
// Description:
// This archetype file contains utility functions for implementation namings
// that span multiple archetype files.
//
// Notice:
// (C) Copyright 1998-2013 Mentor Graphics Corporation
//     All rights reserved.
//
// This document contains confidential and proprietary information and
// property of Mentor Graphics Corp.  No part of this document may be
// reproduced without the express written permission of Mentor Graphics Corp.
//============================================================================
//
//
//============================================================================
// Return a information on variables and types used in defining the
// instance collections for a class.
//============================================================================
te_class = param.te_class;
return ( "pG_" + te_class.GeneratedName ) + "_extent";
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("1ab24acc-1484-4d26-bf5e-211066233202",
	"e64e8479-bfe1-4be4-bb48-f5dd3e7f0bf9",
	'te_class',
	"f975acb7-4246-4a87-9c5a-75481f096785",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("f975acb7-4246-4a87-9c5a-75481f096785",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Extended Class>',
	'',
	'',
	'../Translation Extensions/Translation Extensions.xtuml');
INSERT INTO PE_PE
	VALUES ("e64e8479-bfe1-4be4-bb48-f5dd3e7f0bf9",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("118fa67e-e9af-4c7c-bfd5-adff7a1c3f32",
	"00000000-0000-0000-0000-000000000000",
	'GetNavigateLinkMethodName',
	'',
	'//
//============================================================================
from_o_obj = param.from_o_obj;
to_o_obj = param.to_o_obj;
r_rel = param.r_rel;
rel_phrase = param.rel_phrase;
//
result = "";
select one te_c related by to_o_obj->TE_CLASS[R2019]->TE_C[R2064];
if ( not_empty te_c )
  result = "te_c.Name_to_o_obj.Key_Lett_Rr_rel.Numb_From_from_o_obj.Key_Lett";
  //
  r = ::GetRelationshipSuffix( right_o_obj:to_o_obj, r_rel:r_rel, rel_phrase:rel_phrase );
  suffix = r;
  if ( "" != suffix )
    result = ( result + "_" ) + suffix;
  end if;
end if;
return result;
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("a10bb93b-3503-4fa5-bd42-5948c5ace49c",
	"118fa67e-e9af-4c7c-bfd5-adff7a1c3f32",
	'from_o_obj',
	"d6b21eeb-39da-43bf-b503-c7bbc9ddf242",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("0b792da2-cf1f-4c4a-a864-c57d4b4f46b8",
	"118fa67e-e9af-4c7c-bfd5-adff7a1c3f32",
	'to_o_obj',
	"d6b21eeb-39da-43bf-b503-c7bbc9ddf242",
	0,
	'',
	"a10bb93b-3503-4fa5-bd42-5948c5ace49c",
	'');
INSERT INTO S_SPARM
	VALUES ("007deb11-28eb-4403-aa47-a0df4c023541",
	"118fa67e-e9af-4c7c-bfd5-adff7a1c3f32",
	'r_rel',
	"620e9be8-e289-47ed-9279-69b359c269c5",
	0,
	'',
	"0b792da2-cf1f-4c4a-a864-c57d4b4f46b8",
	'');
INSERT INTO S_SPARM
	VALUES ("ea93cb82-4f41-4c04-baba-40341fa75664",
	"118fa67e-e9af-4c7c-bfd5-adff7a1c3f32",
	'rel_phrase',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"007deb11-28eb-4403-aa47-a0df4c023541",
	'');
INSERT INTO PE_PE
	VALUES ("118fa67e-e9af-4c7c-bfd5-adff7a1c3f32",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("3cc95ed8-6fd0-4b5c-970f-24e49a644564",
	"00000000-0000-0000-0000-000000000000",
	'GetAssociativeLinkMethodName',
	'',
	'//
//============================================================================
// Return the name of the associative relationship link method.
//============================================================================
left_o_obj = param.left_o_obj;
right_o_obj = param.right_o_obj;
assoc_o_obj = param.assoc_o_obj;
r_rel = param.r_rel;
rel_phrase = param.rel_phrase;
//
result = "";
select one te_class related by assoc_o_obj->TE_CLASS[R2019];
if ( not_empty te_class )
  select one aone related by r_rel->R_ASSOC[R206]->R_AONE[R209];
  select one aoth related by r_rel->R_ASSOC[R206]->R_AOTH[R210];
  //
  name = te_class.GeneratedName + "_Rr_rel.Numb_Link";
  result = ( te_class.GeneratedName + "::" ) + name;
  //
  r = ::GetRelationshipSuffix( right_o_obj:assoc_o_obj, r_rel:r_rel, rel_phrase:rel_phrase );
  suffix = r;
  if ( "" != suffix )
    name = ( name + "_" ) + suffix;
    result = ( result + "_" ) + suffix;
  end if;
  select any te_target from instances of TE_TARGET;
  if ( "C" == te_target.language )
    result = name;
  end if;
end if;
return result;
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("42f8201e-242b-4985-a2fa-0f8962a8b4a6",
	"3cc95ed8-6fd0-4b5c-970f-24e49a644564",
	'left_o_obj',
	"d6b21eeb-39da-43bf-b503-c7bbc9ddf242",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("93b6c0fe-50ef-4629-a255-cff1e8438483",
	"3cc95ed8-6fd0-4b5c-970f-24e49a644564",
	'right_o_obj',
	"d6b21eeb-39da-43bf-b503-c7bbc9ddf242",
	0,
	'',
	"42f8201e-242b-4985-a2fa-0f8962a8b4a6",
	'');
INSERT INTO S_SPARM
	VALUES ("83896937-9eef-4500-8ba5-2e2eb027a52b",
	"3cc95ed8-6fd0-4b5c-970f-24e49a644564",
	'assoc_o_obj',
	"d6b21eeb-39da-43bf-b503-c7bbc9ddf242",
	0,
	'',
	"93b6c0fe-50ef-4629-a255-cff1e8438483",
	'');
INSERT INTO S_SPARM
	VALUES ("5fcc03d9-8e77-4b3b-ba8c-f83756d4e28b",
	"3cc95ed8-6fd0-4b5c-970f-24e49a644564",
	'r_rel',
	"620e9be8-e289-47ed-9279-69b359c269c5",
	0,
	'',
	"83896937-9eef-4500-8ba5-2e2eb027a52b",
	'');
INSERT INTO S_SPARM
	VALUES ("9cb81d56-b1ab-4086-813c-eb193cfbee54",
	"3cc95ed8-6fd0-4b5c-970f-24e49a644564",
	'rel_phrase',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"5fcc03d9-8e77-4b3b-ba8c-f83756d4e28b",
	'');
INSERT INTO PE_PE
	VALUES ("3cc95ed8-6fd0-4b5c-970f-24e49a644564",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("ca98d16e-e3f4-4bca-9fd0-43f7972baba1",
	"00000000-0000-0000-0000-000000000000",
	'GetAssociativeUnlinkMethodName',
	'',
	'//
//============================================================================
left_o_obj = param.left_o_obj;
right_o_obj = param.right_o_obj;
assoc_o_obj = param.assoc_o_obj;
r_rel = param.r_rel;
rel_phrase = param.rel_phrase;
//
result = "";
select one te_class related by assoc_o_obj->TE_CLASS[R2019];
if ( not_empty te_class )
  select one aone related by r_rel->R_ASSOC[R206]->R_AONE[R209];
  select one aoth related by r_rel->R_ASSOC[R206]->R_AOTH[R210];
  //
  name = te_class.GeneratedName + "_Rr_rel.Numb_Unlink";
  result = ( te_class.GeneratedName + "::" ) + name;
  //
  r = ::GetRelationshipSuffix( right_o_obj:assoc_o_obj, r_rel:r_rel, rel_phrase:rel_phrase );
  suffix = r;
  if ( "" != suffix )
    name = ( name + "_" ) + suffix;
    result = ( result + "_" ) + suffix;
  end if;
  select any te_target from instances of TE_TARGET;
  if ( "C" == te_target.language )
    result = name;
  end if;
end if;
return result;
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("162f11d2-3645-4f52-b6b4-d57027571301",
	"ca98d16e-e3f4-4bca-9fd0-43f7972baba1",
	'left_o_obj',
	"d6b21eeb-39da-43bf-b503-c7bbc9ddf242",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("27179596-517e-470f-91cc-fe329ef4d738",
	"ca98d16e-e3f4-4bca-9fd0-43f7972baba1",
	'right_o_obj',
	"d6b21eeb-39da-43bf-b503-c7bbc9ddf242",
	0,
	'',
	"162f11d2-3645-4f52-b6b4-d57027571301",
	'');
INSERT INTO S_SPARM
	VALUES ("37c7754c-737c-423d-ae3f-951bbf51e587",
	"ca98d16e-e3f4-4bca-9fd0-43f7972baba1",
	'assoc_o_obj',
	"d6b21eeb-39da-43bf-b503-c7bbc9ddf242",
	0,
	'',
	"27179596-517e-470f-91cc-fe329ef4d738",
	'');
INSERT INTO S_SPARM
	VALUES ("685a1aad-8d6e-48cc-9359-487d56886698",
	"ca98d16e-e3f4-4bca-9fd0-43f7972baba1",
	'r_rel',
	"620e9be8-e289-47ed-9279-69b359c269c5",
	0,
	'',
	"37c7754c-737c-423d-ae3f-951bbf51e587",
	'');
INSERT INTO S_SPARM
	VALUES ("1081e0ff-3443-4ac1-9960-ca5541de16ed",
	"ca98d16e-e3f4-4bca-9fd0-43f7972baba1",
	'rel_phrase',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"685a1aad-8d6e-48cc-9359-487d56886698",
	'');
INSERT INTO PE_PE
	VALUES ("ca98d16e-e3f4-4bca-9fd0-43f7972baba1",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("92bd8600-bc9a-4314-8aa3-525433f268a8",
	"00000000-0000-0000-0000-000000000000",
	'GetRelateToName',
	'',
	'//
//============================================================================
o_obj = param.o_obj;
r_rel = param.r_rel;
rel_phrase = param.rel_phrase;
result = "";
select one te_class related by o_obj->TE_CLASS[R2019];
if ( not_empty te_class )
  name = te_class.GeneratedName + "_Rr_rel.Numb_Link";
  result = ( te_class.GeneratedName + "::" ) + name;
  r = ::GetRelationshipSuffix( right_o_obj:o_obj, r_rel:r_rel, rel_phrase:rel_phrase );
  suffix = r;
  if ( "" != suffix )
    name = ( name + "_" ) + suffix;
    result = ( result + "_" ) + suffix;
  end if;
  select any te_target from instances of TE_TARGET;
  if ( "C" == te_target.language )
    result = name;
  end if;
end if;
return result;
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("875a0801-fe48-43b1-8d17-6ddbdea9da3b",
	"92bd8600-bc9a-4314-8aa3-525433f268a8",
	'o_obj',
	"d6b21eeb-39da-43bf-b503-c7bbc9ddf242",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("4161ea05-0e25-45d6-afcf-37b57639d6c7",
	"92bd8600-bc9a-4314-8aa3-525433f268a8",
	'r_rel',
	"620e9be8-e289-47ed-9279-69b359c269c5",
	0,
	'',
	"875a0801-fe48-43b1-8d17-6ddbdea9da3b",
	'');
INSERT INTO S_SPARM
	VALUES ("95715623-326d-42cc-97c3-d0f2ab18bb76",
	"92bd8600-bc9a-4314-8aa3-525433f268a8",
	'rel_phrase',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"4161ea05-0e25-45d6-afcf-37b57639d6c7",
	'');
INSERT INTO PE_PE
	VALUES ("92bd8600-bc9a-4314-8aa3-525433f268a8",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("f082720c-e9e9-4a52-afd7-2acffc3a255a",
	"00000000-0000-0000-0000-000000000000",
	'GetUnrelateFromName',
	'',
	'//
//============================================================================
o_obj = param.o_obj;
r_rel = param.r_rel;
rel_phrase = param.rel_phrase;
result = "";
select one te_class related by o_obj->TE_CLASS[R2019];
if ( not_empty te_class )
  name = te_class.GeneratedName + "_Rr_rel.Numb_Unlink";
  result = ( te_class.GeneratedName + "::" ) + name;
  r = ::GetRelationshipSuffix( right_o_obj:o_obj, r_rel:r_rel, rel_phrase:rel_phrase );
  suffix = r;
  if ( "" != suffix )
    name = ( name + "_" ) + suffix;
    result = ( result + "_" ) + suffix;
  end if;
  select any te_target from instances of TE_TARGET;
  if ( "C" == te_target.language )
    result = name;
  end if;
end if;
return result;
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("a894bbd7-40ff-4513-9ff8-9f3960f7267e",
	"f082720c-e9e9-4a52-afd7-2acffc3a255a",
	'o_obj',
	"d6b21eeb-39da-43bf-b503-c7bbc9ddf242",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("017634ad-7ec9-40ed-87d2-9df5c87ccd58",
	"f082720c-e9e9-4a52-afd7-2acffc3a255a",
	'r_rel',
	"620e9be8-e289-47ed-9279-69b359c269c5",
	0,
	'',
	"a894bbd7-40ff-4513-9ff8-9f3960f7267e",
	'');
INSERT INTO S_SPARM
	VALUES ("d3cb6fd1-6439-4bca-88b4-717ae1c7bde4",
	"f082720c-e9e9-4a52-afd7-2acffc3a255a",
	'rel_phrase',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"017634ad-7ec9-40ed-87d2-9df5c87ccd58",
	'');
INSERT INTO PE_PE
	VALUES ("f082720c-e9e9-4a52-afd7-2acffc3a255a",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("2ef13e10-8f02-4f96-9228-a37c8deb173f",
	"00000000-0000-0000-0000-000000000000",
	'PEIGetRelationshipSetContainerName',
	'',
	'//
//============================================================================
// Return the name of the object relationship container array.
// This array of containoids is used to optimize relationships when
// there are preexisting instances.
//============================================================================
te_class = param.te_class;
return te_class.GeneratedName + "_rel_set_lists";
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("4c013151-1476-401b-83e6-a082f88db193",
	"2ef13e10-8f02-4f96-9228-a37c8deb173f",
	'te_class',
	"f975acb7-4246-4a87-9c5a-75481f096785",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("2ef13e10-8f02-4f96-9228-a37c8deb173f",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("f2b12053-64c1-4ded-976b-69a8b8b93b95",
	"00000000-0000-0000-0000-000000000000",
	'GetDomainDispatcherTableName',
	'',
	'//
//============================================================================
// Return the name and type of the domain dispatcher.
//============================================================================
registered_name = param.registered_name;
return registered_name + "_EventDispatcher";
return "EventTaker_t";
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("fb6bfbef-7502-4413-94cb-e732491144b5",
	"f2b12053-64c1-4ded-976b-69a8b8b93b95",
	'registered_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("f2b12053-64c1-4ded-976b-69a8b8b93b95",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("346526ed-cd32-4e36-b7af-68a000563381",
	"00000000-0000-0000-0000-000000000000",
	'GetSuperTypePolymorphicEventMethodName',
	'',
	'//
//============================================================================
te_class = param.te_class;
r_rel = param.r_rel;
return te_class.GeneratedName + "_Rr_rel.NumbPolymorphicEvent";
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("11dc3732-49dd-4dc3-9ff3-aaf1d5f46ec9",
	"346526ed-cd32-4e36-b7af-68a000563381",
	'te_class',
	"f975acb7-4246-4a87-9c5a-75481f096785",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("d4bb62d6-9627-41e4-b8f0-3fea285bba32",
	"346526ed-cd32-4e36-b7af-68a000563381",
	'r_rel',
	"620e9be8-e289-47ed-9279-69b359c269c5",
	0,
	'',
	"11dc3732-49dd-4dc3-9ff3-aaf1d5f46ec9",
	'');
INSERT INTO PE_PE
	VALUES ("346526ed-cd32-4e36-b7af-68a000563381",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("b2f0a175-c1b7-488a-9cda-ac4944387e12",
	"00000000-0000-0000-0000-000000000000",
	'GetDomainTypeIDFromString',
	'',
	'//
//============================================================================
dom_name = param.dom_name;
return T::r(s:dom_name) + "_DOMAIN_ID";
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("74289565-9b92-4bc8-bedc-00003dca1fbe",
	"b2f0a175-c1b7-488a-9cda-ac4944387e12",
	'dom_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("b2f0a175-c1b7-488a-9cda-ac4944387e12",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("dca0ec06-d9cc-40dc-b142-aadfd8009c37",
	"00000000-0000-0000-0000-000000000000",
	'GetPersistentCheckMarkPostName',
	'',
	'//
//============================================================================
// Provide a name for the routine that will check if an instance is
// dirty, mark it if is not and queue it for flusing later.
//============================================================================
select any te_instance from instances of TE_INSTANCE;
select any te_prefix from instances of TE_PREFIX;
select any te_typemap from instances of TE_TYPEMAP;
return te_prefix.result + "PersistenceCheckMarkPost";
return "void";
return "  te_instance.handle,\n  const te_typemap.domain_number_name,\n  const te_typemap.object_number_name";
return "  te_instance.handle instance,\n  const te_typemap.domain_number_name domain_num,\n  const te_typemap.object_number_name class_num";
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("dca0ec06-d9cc-40dc-b142-aadfd8009c37",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("27009b90-c569-41e2-89be-e2dd247610f8",
	"00000000-0000-0000-0000-000000000000",
	'GetPersistentPostLinkName',
	'',
	'//
//============================================================================
// Provide a name for the routine that will post links to the persistence
// flush queue.
//============================================================================
select any te_instance from instances of TE_INSTANCE;
select any te_prefix from instances of TE_PREFIX;
select any te_typemap from instances of TE_TYPEMAP;
return te_prefix.result + "PersistencePostLink";
return "void";
return "  const s1_t, const te_typemap.domain_number_name,\n  const te_typemap.object_number_name, const te_typemap.instance_index_name,\n  te_instance.handle, const te_typemap.object_number_name,\n  te_instance.handle, const te_typemap.object_number_name,\n  te_instance.handle, const te_typemap.object_number_name";
return "  const s1_t operation, const te_typemap.domain_number_name domain,\n  const te_typemap.object_number_name owning_class, const te_typemap.instance_index_name ri,\n  te_instance.handle left, const te_typemap.object_number_name l,\n   te_instance.handle right, const te_typemap.object_number_name r,\n  te_instance.handle assoc, const te_typemap.object_number_name a";
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("27009b90-c569-41e2-89be-e2dd247610f8",
	1,
	"bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO PE_PE
	VALUES ("bef5d53f-9578-4ea0-a43b-ea0935733f9d",
	1,
	"efb614c1-5af5-40ee-92c8-706430a99db3",
	"00000000-0000-0000-0000-000000000000",
	7);
INSERT INTO EP_PKG_PROXY
	VALUES ("efb614c1-5af5-40ee-92c8-706430a99db3",
	"00000000-0000-0000-0000-000000000000",
	"d9bc5487-4193-4817-be1c-6c3f3339aebf",
	'ooaofooa',
	'========================================================================

File:          $RCSfile: ooaofooa.xtuml,v $
Version:   $Revision: 1.127 $
Modified:  $Date: 2006/09/26 15:10:20 $

(c) Copyright 2004-2012 by Mentor Graphics Corp. All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Mentor Graphics Corp. and is not for external distribution.
========================================================================

This is the application domain for the Tiger project.

The processing in this model describes the activities
for model capture.



',
	0,
	'../ooaofooa.xtuml');
INSERT INTO S_SYS_PROXY
	VALUES ("d9bc5487-4193-4817-be1c-6c3f3339aebf",
	'com.mentor.nucleus.bp.core',
	1,
	'../../../../com.mentor.nucleus.bp.core.xtuml');

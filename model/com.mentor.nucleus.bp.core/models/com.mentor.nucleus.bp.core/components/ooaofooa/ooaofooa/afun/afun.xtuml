-- BP 7.1.6 content: Package syschar: 3 persistence-version: 7.1.6

INSERT INTO EP_PKG
	VALUES ("e0e8a924-f549-4e50-9ee0-af61843ab967",
	"00000000-0000-0000-0000-000000000000",
	"d9bc5487-4193-4817-be1c-6c3f3339aebf",
	'afun',
	'',
	0);
INSERT INTO GD_MD
	VALUES ("0621fcb5-c026-4d92-93b3-509f2bbbfd38",
	112,
	"e0e8a924-f549-4e50-9ee0-af61843ab967",
	108,
	0,
	0,
	1,
	1,
	1,
	12,
	1,
	0,
	0,
	0,
	0,
	0,
	'',
	'com.mentor.nucleus.bp.core::components::ooaofooa::ooaofooa::afun');
INSERT INTO DIM_DIA
	VALUES ("0621fcb5-c026-4d92-93b3-509f2bbbfd38",
	'',
	1.000000,
	4000.000000,
	3000.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_SYNC
	VALUES ("17b26926-9233-4f3b-bf40-b2ba7a6e61f2",
	"00000000-0000-0000-0000-000000000000",
	'a0',
	'',
	'::parm_sort();
::rel_pseudoformalize();
::sys_singletons();',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("17b26926-9233-4f3b-bf40-b2ba7a6e61f2",
	1,
	"e0e8a924-f549-4e50-9ee0-af61843ab967",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("5d667007-77d7-4177-b6c0-8e72da1e6cc0",
	"00000000-0000-0000-0000-000000000000",
	'sparm_sort',
	'',
	'// CDS temporarily order parameters alphabetically for backwards compatibility
s_sparms = param.s_sparms;
for each s_sparm in s_sparms
  select one prev_s_sparm related by s_sparm->S_SPARM[R54.''precedes''];
  if ( not_empty prev_s_sparm )
    unrelate s_sparm from prev_s_sparm across R54.''precedes'';
  end if;
end for;
// Declare an empty instance reference.
select any head_s_sparm related by s_sparms->S_SPARM[R54.''precedes''] where ( false );
for each s_sparm in s_sparms
  r = ::sparm_insert( head_s_sparm:head_s_sparm, s_sparm:s_sparm );
  head_s_sparm = r;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("16c0bafe-4893-4ea6-bd2c-5afcdf82a8a5",
	"5d667007-77d7-4177-b6c0-8e72da1e6cc0",
	's_sparms',
	"a397ce5f-c02a-4167-b722-9876a55f62c0",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("a397ce5f-c02a-4167-b722-9876a55f62c0",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref_set<Function Parameter>',
	'',
	'',
	'../Domain/Domain.xtuml');
INSERT INTO PE_PE
	VALUES ("5d667007-77d7-4177-b6c0-8e72da1e6cc0",
	1,
	"e0e8a924-f549-4e50-9ee0-af61843ab967",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("a9082c3c-145a-4f29-8aab-8f7a3e88310e",
	"00000000-0000-0000-0000-000000000000",
	'sparm_insert',
	'',
	'head_s_sparm = param.head_s_sparm;
s_sparm = param.s_sparm;
result = s_sparm;
if ( empty head_s_sparm )
  // Just starting.  Return s_sparm as head.
elif ( s_sparm.Name <= head_s_sparm.Name )
  // insert before
  relate s_sparm to head_s_sparm across R54.''succeeds'';
else
  // find bigger
  result = head_s_sparm;
  prev_s_sparm = head_s_sparm;
  select one cursor_s_sparm related by head_s_sparm->S_SPARM[R54.''succeeds''];
  while ( not_empty cursor_s_sparm )
    if ( s_sparm.Name <= cursor_s_sparm.Name )
      break;
    else
      prev_s_sparm = cursor_s_sparm;
      select one cursor_s_sparm related by cursor_s_sparm->S_SPARM[R54.''succeeds''];
    end if;
  end while;
  relate prev_s_sparm to s_sparm across R54.''succeeds'';
  if ( not_empty cursor_s_sparm )
    relate s_sparm to cursor_s_sparm across R54.''succeeds'';
  end if;
end if;
return result;
',
	"f822fb34-452f-42a9-8480-07154f3890a4",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("9759a655-a33b-49aa-9cf3-a638fe82db62",
	"a9082c3c-145a-4f29-8aab-8f7a3e88310e",
	'head_s_sparm',
	"f822fb34-452f-42a9-8480-07154f3890a4",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("f822fb34-452f-42a9-8480-07154f3890a4",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Function Parameter>',
	'',
	'',
	'../Domain/Domain.xtuml');
INSERT INTO S_SPARM
	VALUES ("331dd047-f870-41bc-b236-f005a4f9b38d",
	"a9082c3c-145a-4f29-8aab-8f7a3e88310e",
	's_sparm',
	"f822fb34-452f-42a9-8480-07154f3890a4",
	0,
	'',
	"9759a655-a33b-49aa-9cf3-a638fe82db62",
	'');
INSERT INTO PE_PE
	VALUES ("a9082c3c-145a-4f29-8aab-8f7a3e88310e",
	1,
	"e0e8a924-f549-4e50-9ee0-af61843ab967",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("eef0f632-8d74-4bf0-864e-d735e10b7e54",
	"00000000-0000-0000-0000-000000000000",
	'bparm_sort',
	'',
	'//
//
s_bparms = param.s_bparms;
for each s_bparm in s_bparms
  select one prev_s_bparm related by s_bparm->S_BPARM[R55.''precedes''];
  if ( not_empty prev_s_bparm )
    unrelate s_bparm from prev_s_bparm across R55.''precedes'';
  end if;
end for;
// Declare an empty instance reference.
select any head_s_bparm related by s_bparms->S_BPARM[R55.''precedes''] where ( false );
for each s_bparm in s_bparms
  r = ::bparm_insert( head_s_bparm:head_s_bparm, s_bparm:s_bparm );
  head_s_bparm = r;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("125348c9-9496-4669-a9c0-fcff7eebe0ed",
	"eef0f632-8d74-4bf0-864e-d735e10b7e54",
	's_bparms',
	"15271e51-8d77-4dc6-bc1d-a9cb226962e3",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("15271e51-8d77-4dc6-bc1d-a9cb226962e3",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref_set<Bridge Parameter>',
	'',
	'',
	'../Domain/Domain.xtuml');
INSERT INTO PE_PE
	VALUES ("eef0f632-8d74-4bf0-864e-d735e10b7e54",
	1,
	"e0e8a924-f549-4e50-9ee0-af61843ab967",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("3e79fd53-3b52-4fc3-a92c-85aac7d51314",
	"00000000-0000-0000-0000-000000000000",
	'bparm_insert',
	'',
	'head_s_bparm = param.head_s_bparm;
s_bparm = param.s_bparm;
result = s_bparm;
if ( empty head_s_bparm )
  // Just starting.  Return s_bparm as head.
elif ( s_bparm.Name <= head_s_bparm.Name )
  // insert before
  relate s_bparm to head_s_bparm across R55.''succeeds'';
else
  // find bigger
  result = head_s_bparm;
  prev_s_bparm = head_s_bparm;
  select one cursor_s_bparm related by head_s_bparm->S_BPARM[R55.''succeeds''];
  while ( not_empty cursor_s_bparm )
    if ( s_bparm.Name <= cursor_s_bparm.Name )
      break;
    else
      prev_s_bparm = cursor_s_bparm;
      select one cursor_s_bparm related by cursor_s_bparm->S_BPARM[R55.''succeeds''];
    end if;
  end while;
  relate prev_s_bparm to s_bparm across R55.''succeeds'';
  if ( not_empty cursor_s_bparm )
    relate s_bparm to cursor_s_bparm across R55.''succeeds'';
  end if;
end if;
return result;
',
	"6ba9a48e-9b83-47fe-a1ac-915dbf9d3ef3",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("c19f5829-b5ea-45d6-9c71-f39e1ed5e319",
	"3e79fd53-3b52-4fc3-a92c-85aac7d51314",
	'head_s_bparm',
	"6ba9a48e-9b83-47fe-a1ac-915dbf9d3ef3",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("6ba9a48e-9b83-47fe-a1ac-915dbf9d3ef3",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Bridge Parameter>',
	'',
	'',
	'../Domain/Domain.xtuml');
INSERT INTO S_SPARM
	VALUES ("9decc5f5-47c3-48dd-9b93-44d5cfe6aa99",
	"3e79fd53-3b52-4fc3-a92c-85aac7d51314",
	's_bparm',
	"6ba9a48e-9b83-47fe-a1ac-915dbf9d3ef3",
	0,
	'',
	"c19f5829-b5ea-45d6-9c71-f39e1ed5e319",
	'');
INSERT INTO PE_PE
	VALUES ("3e79fd53-3b52-4fc3-a92c-85aac7d51314",
	1,
	"e0e8a924-f549-4e50-9ee0-af61843ab967",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("17a83b1f-c414-402e-97bd-2191490ff3ca",
	"00000000-0000-0000-0000-000000000000",
	'tparm_sort',
	'',
	'//
//
o_tparms = param.o_tparms;
for each o_tparm in o_tparms
  select one prev_o_tparm related by o_tparm->O_TPARM[R124.''precedes''];
  if ( not_empty prev_o_tparm )
    unrelate o_tparm from prev_o_tparm across R124.''precedes'';
  end if;
end for;
// Declare an empty instance reference.
select any head_o_tparm related by o_tparms->O_TPARM[R124.''precedes''] where ( false );
for each o_tparm in o_tparms
  r = ::tparm_insert( head_o_tparm:head_o_tparm, o_tparm:o_tparm );
  head_o_tparm = r;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("29c96a54-6f8d-4253-9981-fce3e86213e9",
	"17a83b1f-c414-402e-97bd-2191490ff3ca",
	'o_tparms',
	"8223e432-cc81-4a56-a7e3-7dbfcea931f2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("8223e432-cc81-4a56-a7e3-7dbfcea931f2",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref_set<Operation Parameter>',
	'',
	'',
	'../Subsystem/Subsystem.xtuml');
INSERT INTO PE_PE
	VALUES ("17a83b1f-c414-402e-97bd-2191490ff3ca",
	1,
	"e0e8a924-f549-4e50-9ee0-af61843ab967",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("6245c4fb-54f5-4019-a34e-40cd6d3fa7c5",
	"00000000-0000-0000-0000-000000000000",
	'tparm_insert',
	'',
	'head_o_tparm = param.head_o_tparm;
o_tparm = param.o_tparm;
result = o_tparm;
if ( empty head_o_tparm )
  // Just starting.  Return o_tparm as head.
elif ( o_tparm.Name <= head_o_tparm.Name )
  // insert before
  relate o_tparm to head_o_tparm across R124.''succeeds'';
else
  // find bigger
  result = head_o_tparm;
  prev_o_tparm = head_o_tparm;
  select one cursor_o_tparm related by head_o_tparm->O_TPARM[R124.''succeeds''];
  while ( not_empty cursor_o_tparm )
    if ( o_tparm.Name <= cursor_o_tparm.Name )
      break;
    else
      prev_o_tparm = cursor_o_tparm;
      select one cursor_o_tparm related by cursor_o_tparm->O_TPARM[R124.''succeeds''];
    end if;
  end while;
  relate prev_o_tparm to o_tparm across R124.''succeeds'';
  if ( not_empty cursor_o_tparm )
    relate o_tparm to cursor_o_tparm across R124.''succeeds'';
  end if;
end if;
return result;
',
	"3f86efb0-5d9c-4ace-b91a-14a50aa50c48",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("f68cf770-14ee-4b4e-a713-752fd30cd7aa",
	"6245c4fb-54f5-4019-a34e-40cd6d3fa7c5",
	'head_o_tparm',
	"3f86efb0-5d9c-4ace-b91a-14a50aa50c48",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("3f86efb0-5d9c-4ace-b91a-14a50aa50c48",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Operation Parameter>',
	'',
	'',
	'../Subsystem/Subsystem.xtuml');
INSERT INTO S_SPARM
	VALUES ("a3394c28-ac29-46ad-be08-8f64d344899f",
	"6245c4fb-54f5-4019-a34e-40cd6d3fa7c5",
	'o_tparm',
	"3f86efb0-5d9c-4ace-b91a-14a50aa50c48",
	0,
	'',
	"f68cf770-14ee-4b4e-a713-752fd30cd7aa",
	'');
INSERT INTO PE_PE
	VALUES ("6245c4fb-54f5-4019-a34e-40cd6d3fa7c5",
	1,
	"e0e8a924-f549-4e50-9ee0-af61843ab967",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("3f34287c-f39e-49f3-beda-77198c353d45",
	"00000000-0000-0000-0000-000000000000",
	'evtdi_sort',
	'',
	'//
//
sm_evtdis = param.sm_evtdis;
for each sm_evtdi in sm_evtdis
  select one prev_sm_evtdi related by sm_evtdi->SM_EVTDI[R533.''precedes''];
  if ( not_empty prev_sm_evtdi )
    unrelate sm_evtdi from prev_sm_evtdi across R533.''precedes'';
  end if;
end for;
// Declare an empty instance reference.
select any head_sm_evtdi related by sm_evtdis->SM_EVTDI[R533.''precedes''] where ( false );
for each sm_evtdi in sm_evtdis
  r = ::evtdi_insert( head_sm_evtdi:head_sm_evtdi, sm_evtdi:sm_evtdi );
  head_sm_evtdi = r;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("753a36f5-29c2-4cbc-b5a2-708215022721",
	"3f34287c-f39e-49f3-beda-77198c353d45",
	'sm_evtdis',
	"8d48c15e-5425-419d-a407-d6d4338150d4",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("8d48c15e-5425-419d-a407-d6d4338150d4",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref_set<State Machine Event Data Item>',
	'',
	'',
	'../State Machine/State Machine.xtuml');
INSERT INTO PE_PE
	VALUES ("3f34287c-f39e-49f3-beda-77198c353d45",
	1,
	"e0e8a924-f549-4e50-9ee0-af61843ab967",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("5b0772c5-0863-48ab-b88f-f8621a2ec47e",
	"00000000-0000-0000-0000-000000000000",
	'evtdi_insert',
	'',
	'head_sm_evtdi = param.head_sm_evtdi;
sm_evtdi = param.sm_evtdi;
result = sm_evtdi;
if ( empty head_sm_evtdi )
  // Just starting.  Return sm_evtdi as head.
elif ( sm_evtdi.Name <= head_sm_evtdi.Name )
  // insert before
  relate sm_evtdi to head_sm_evtdi across R533.''succeeds'';
else
  // find bigger
  result = head_sm_evtdi;
  prev_sm_evtdi = head_sm_evtdi;
  select one cursor_sm_evtdi related by head_sm_evtdi->SM_EVTDI[R533.''succeeds''];
  while ( not_empty cursor_sm_evtdi )
    if ( sm_evtdi.Name <= cursor_sm_evtdi.Name )
      break;
    else
      prev_sm_evtdi = cursor_sm_evtdi;
      select one cursor_sm_evtdi related by cursor_sm_evtdi->SM_EVTDI[R533.''succeeds''];
    end if;
  end while;
  relate prev_sm_evtdi to sm_evtdi across R533.''succeeds'';
  if ( not_empty cursor_sm_evtdi )
    relate sm_evtdi to cursor_sm_evtdi across R533.''succeeds'';
  end if;
end if;
return result;
',
	"aa498bc5-0f18-424e-9588-09bbffb0b5ec",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("27d92baa-3972-4e34-b3a5-0e10fad12c42",
	"5b0772c5-0863-48ab-b88f-f8621a2ec47e",
	'head_sm_evtdi',
	"aa498bc5-0f18-424e-9588-09bbffb0b5ec",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("aa498bc5-0f18-424e-9588-09bbffb0b5ec",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<State Machine Event Data Item>',
	'',
	'',
	'../State Machine/State Machine.xtuml');
INSERT INTO S_SPARM
	VALUES ("4c7e3ac7-c235-480b-802d-7673675cd39b",
	"5b0772c5-0863-48ab-b88f-f8621a2ec47e",
	'sm_evtdi',
	"aa498bc5-0f18-424e-9588-09bbffb0b5ec",
	0,
	'',
	"27d92baa-3972-4e34-b3a5-0e10fad12c42",
	'');
INSERT INTO PE_PE
	VALUES ("5b0772c5-0863-48ab-b88f-f8621a2ec47e",
	1,
	"e0e8a924-f549-4e50-9ee0-af61843ab967",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("86c8d3da-c0ee-4900-80e9-03be9763fed1",
	"00000000-0000-0000-0000-000000000000",
	'pp_sort',
	'',
	'//
//
c_pps = param.c_pps;
for each c_pp in c_pps
  select one prev_c_pp related by c_pp->C_PP[R4021.''precedes''];
  if ( not_empty prev_c_pp )
    unrelate c_pp from prev_c_pp across R4021.''precedes'';
  end if;
end for;
// Declare an empty instance reference.
select any head_c_pp related by c_pps->C_PP[R4021.''precedes''] where ( false );
for each c_pp in c_pps
  r = ::pp_insert( head_c_pp:head_c_pp, c_pp:c_pp );
  head_c_pp = r;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("ebcaeade-959d-442d-bf24-2bdfc55ef41f",
	"86c8d3da-c0ee-4900-80e9-03be9763fed1",
	'c_pps',
	"47b05aeb-144f-4981-85ca-cec108b82bb7",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("47b05aeb-144f-4981-85ca-cec108b82bb7",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref_set<Property Parameter>',
	'',
	'',
	'../Component/Component.xtuml');
INSERT INTO PE_PE
	VALUES ("86c8d3da-c0ee-4900-80e9-03be9763fed1",
	1,
	"e0e8a924-f549-4e50-9ee0-af61843ab967",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("4a010d28-3a94-4890-9496-7a328d1175f3",
	"00000000-0000-0000-0000-000000000000",
	'pp_insert',
	'',
	'head_c_pp = param.head_c_pp;
c_pp = param.c_pp;
result = c_pp;
if ( empty head_c_pp )
  // Just starting.  Return c_pp as head.
elif ( c_pp.Name <= head_c_pp.Name )
  // insert before
  relate c_pp to head_c_pp across R4021.''succeeds'';
else
  // find bigger
  result = head_c_pp;
  prev_c_pp = head_c_pp;
  select one cursor_c_pp related by head_c_pp->C_PP[R4021.''succeeds''];
  while ( not_empty cursor_c_pp )
    if ( c_pp.Name <= cursor_c_pp.Name )
      break;
    else
      prev_c_pp = cursor_c_pp;
      select one cursor_c_pp related by cursor_c_pp->C_PP[R4021.''succeeds''];
    end if;
  end while;
  relate prev_c_pp to c_pp across R4021.''succeeds'';
  if ( not_empty cursor_c_pp )
    relate c_pp to cursor_c_pp across R4021.''succeeds'';
  end if;
end if;
return result;
',
	"b38e0639-ac8f-4bfb-b8a4-0a2ee533862b",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("abb8b489-a1e5-4998-ba4a-9d9758d78866",
	"4a010d28-3a94-4890-9496-7a328d1175f3",
	'head_c_pp',
	"b38e0639-ac8f-4bfb-b8a4-0a2ee533862b",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("b38e0639-ac8f-4bfb-b8a4-0a2ee533862b",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Property Parameter>',
	'',
	'',
	'../Component/Component.xtuml');
INSERT INTO S_SPARM
	VALUES ("58b50f2c-254f-40e4-b482-f5df6507e4c0",
	"4a010d28-3a94-4890-9496-7a328d1175f3",
	'c_pp',
	"b38e0639-ac8f-4bfb-b8a4-0a2ee533862b",
	0,
	'',
	"abb8b489-a1e5-4998-ba4a-9d9758d78866",
	'');
INSERT INTO PE_PE
	VALUES ("4a010d28-3a94-4890-9496-7a328d1175f3",
	1,
	"e0e8a924-f549-4e50-9ee0-af61843ab967",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("c773118b-b6d8-4c6f-a6dd-f22f9ec7afeb",
	"00000000-0000-0000-0000-000000000000",
	'parm_sort',
	'',
	'//
// CDS temporary for sorting model data parameters
if ( true )
  select many s_syncs from instances of S_SYNC;
  for each s_sync in s_syncs
    select many s_sparms related by s_sync->S_SPARM[R24];
    ::sparm_sort( s_sparms:s_sparms );
  end for;
  select many s_brgs from instances of S_BRG;
  for each s_brg in s_brgs
    select many s_bparms related by s_brg->S_BPARM[R21];
    ::bparm_sort( s_bparms:s_bparms );
  end for;
  select many o_tfrs from instances of O_TFR;
  for each o_tfr in o_tfrs
    select many o_tparms related by o_tfr->O_TPARM[R117];
    ::tparm_sort( o_tparms:o_tparms );
  end for;
  select many sm_evts from instances of SM_EVT;
  for each sm_evt in sm_evts
    select many sm_evtdis related by sm_evt->SM_EVTDI[R532];
    ::evtdi_sort( sm_evtdis:sm_evtdis );
  end for;
  select many c_eps from instances of C_EP;
  for each c_ep in c_eps
    select many c_pps related by c_ep->C_PP[R4006];
    ::pp_sort( c_pps:c_pps );
  end for;
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("c773118b-b6d8-4c6f-a6dd-f22f9ec7afeb",
	1,
	"e0e8a924-f549-4e50-9ee0-af61843ab967",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("f0c96d2b-335b-42d5-808a-430fe156169b",
	"00000000-0000-0000-0000-000000000000",
	'rel_pseudoformalize',
	'',
	'//============================================================================
// $RCSfile: q.assoc.pseudoformalize.arc,v $
//
// Description:
// This query/transformation archetype file contains the functionality
// that will allow the model compiler to generate code for unformalized 
// associations (associations that have not been formalized).
//
// Notice:
// (C) Copyright 1998-2013 Mentor Graphics Corporation
//     All rights reserved.
//
// This document contains confidential and proprietary information and
// property of Mentor Graphics Corp.  No part of this document may be
// reproduced without the express written permission of Mentor Graphics Corp.
//============================================================================
//
// Find the associations that are not formalized.  They are characterized
// by the existence of 2 instances of R_PART linked to one R_SIMP.
// Migrate the R_PART/R_RTO pair to R_FORM/R_RGO.
// It does not matter which participant we choose unless this is a many
// association.  Grab the many side of a 1-M or any random R_PART and
// migrate it and its parent R_RTO to R_FORM and R_RGO respectively.
select many r_simps from instances of R_SIMP;
for each r_simp in r_simps
  select many r_parts related by r_simp->R_PART[R207];
  if ( ( cardinality r_parts ) > 1 )
    select any r_part related by r_simp->R_PART[R207] where ( selected.Mult == 1 );
    if ( empty r_part )
      select any r_part related by r_simp->R_PART[R207];
    end if;
    select one r_rto related by r_part->R_RTO[R204];
    select one r_oir related by r_rto->R_OIR[R203];
    //
    create object instance r_rgo of R_RGO;
    create object instance r_form of R_FORM;
    //
    // Copy the R_PART to the new R_FORM.
    r_form.Mult = r_part.Mult;
    r_form.Cond = r_part.Cond;
    r_form.Txt_Phrs = r_part.Txt_Phrs;
    //
    unrelate r_part from r_rto across R204;
    delete object instance r_part;
    //
    unrelate r_rto from r_oir across R203;
    delete object instance r_rto;
    //
    relate r_rgo to r_oir across R203;
    relate r_form to r_rgo across R205;
    relate r_form to r_simp across R208;
  end if;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("f0c96d2b-335b-42d5-808a-430fe156169b",
	1,
	"e0e8a924-f549-4e50-9ee0-af61843ab967",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("82ebbb61-3d4c-4ccd-b5b5-85e17653b63e",
	"00000000-0000-0000-0000-000000000000",
	'container_factory',
	'',
	'//
te_container = param.te_container;
te_container.flavor = "";
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("bf666450-eb56-4b02-9f6d-86651d0e3a71",
	"82ebbb61-3d4c-4ccd-b5b5-85e17653b63e",
	'te_container',
	"bed7aed0-a8ba-4e93-acaa-c7c0ef17e639",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("bed7aed0-a8ba-4e93-acaa-c7c0ef17e639",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<container>',
	'',
	'',
	'../Translation Extensions/Translation Extensions.xtuml');
INSERT INTO PE_PE
	VALUES ("82ebbb61-3d4c-4ccd-b5b5-85e17653b63e",
	1,
	"e0e8a924-f549-4e50-9ee0-af61843ab967",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("200caf68-f717-421c-b08c-773b46e080d1",
	"00000000-0000-0000-0000-000000000000",
	'copyright_factory',
	'',
	'//
//
te_copyright = param.te_copyright;
te_copyright.body = "your copyright statement can go here (from te_copyright.body)";
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("9433a763-c810-4d7c-8d2b-90d52061a764",
	"200caf68-f717-421c-b08c-773b46e080d1",
	'te_copyright',
	"66047ebf-b4d3-4c3f-ac61-a72efcb39e53",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("66047ebf-b4d3-4c3f-ac61-a72efcb39e53",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<copyright>',
	'',
	'',
	'../Translation Extensions/Translation Extensions.xtuml');
INSERT INTO PE_PE
	VALUES ("200caf68-f717-421c-b08c-773b46e080d1",
	1,
	"e0e8a924-f549-4e50-9ee0-af61843ab967",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("41516c62-1748-4680-992c-01a26dadd0db",
	"00000000-0000-0000-0000-000000000000",
	'dlist_factory',
	'',
	'//
//
te_dlist = param.te_dlist;
select any te_prefix from instances of TE_PREFIX;
te_dlist.remove_node = te_prefix.result + "SetRemoveDlistNode";
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("a0c1b63c-b3a6-4b88-8e45-e397b87ade03",
	"41516c62-1748-4680-992c-01a26dadd0db",
	'te_dlist',
	"ae4a14e9-ebe7-41e2-97d0-0b6e1b15ceea",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("ae4a14e9-ebe7-41e2-97d0-0b6e1b15ceea",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<dlist>',
	'',
	'',
	'../Translation Extensions/Translation Extensions.xtuml');
INSERT INTO PE_PE
	VALUES ("41516c62-1748-4680-992c-01a26dadd0db",
	1,
	"e0e8a924-f549-4e50-9ee0-af61843ab967",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("be33a989-7a84-41cd-a75d-827f1d1f9e8f",
	"00000000-0000-0000-0000-000000000000",
	'dma_factory',
	'',
	'//
//
te_dma = param.te_dma;
select any te_prefix from instances of TE_PREFIX;
te_dma.file = "sys_memory";
te_dma.allocate = te_prefix.result + "malloc";
te_dma.release = te_prefix.result + "free";
te_dma.debugging_heap = false;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("a07bbc57-eb86-48c0-b80d-6718c65c8a00",
	"be33a989-7a84-41cd-a75d-827f1d1f9e8f",
	'te_dma',
	"95c40567-3d38-4e09-ab51-e0a2883d1bae",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("95c40567-3d38-4e09-ab51-e0a2883d1bae",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<dynamic memory allocation>',
	'',
	'',
	'../Translation Extensions/Translation Extensions.xtuml');
INSERT INTO PE_PE
	VALUES ("be33a989-7a84-41cd-a75d-827f1d1f9e8f",
	1,
	"e0e8a924-f549-4e50-9ee0-af61843ab967",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("cfcb59f5-e260-436e-b738-cc843c40b794",
	"00000000-0000-0000-0000-000000000000",
	'eq_factory',
	'',
	'//
//
te_eq = param.te_eq;
select any te_prefix from instances of TE_PREFIX;
te_eq.ignored = "EVENT_IS_IGNORED";
te_eq.cant_happen = "EVENT_CANT_HAPPEN";
te_eq.system_events_union = te_prefix.result + "systemxtUMLevents";
te_eq.system_event_pool = te_prefix.result + "xtUML_event_pool";
te_eq.constant_type = te_prefix.result + "xtUMLEventConstant_t";
te_eq.base_event_type = te_prefix.result + "xtUMLEvent_t";
te_eq.base_variable = "mc_event_base";
te_eq.max_events = te_prefix.define_u + "SYS_MAX_XTUML_EVENTS";
te_eq.max_self_events = te_prefix.define_u + "SYS_MAX_SELF_EVENTS";
te_eq.max_nonself_events = te_prefix.define_u + "SYS_MAX_NONSELF_EVENTS";
te_eq.new = te_prefix.result + "NewxtUMLEvent";
te_eq.allocate = te_prefix.result + "AllocatextUMLEvent";
te_eq.delete = te_prefix.result + "DeletextUMLEvent";
te_eq.modify = te_prefix.result + "ModifyxtUMLEvent";
te_eq.self = te_prefix.result + "SendSelfEvent";
te_eq.non_self = te_prefix.result + "SendEvent";
te_eq.search_and_destroy = te_prefix.result + "EventSearchAndDestroy";
te_eq.run_flag = te_prefix.result + "run_flag";
te_eq.event_message_variable = "e";
te_eq.scope = "";
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("ab2f9e25-a365-467f-aa2a-5b02330c6bb0",
	"cfcb59f5-e260-436e-b738-cc843c40b794",
	'te_eq',
	"d6d92349-6671-4f67-b702-a8dcef6f4bab",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("d6d92349-6671-4f67-b702-a8dcef6f4bab",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<event queue>',
	'',
	'',
	'../Translation Extensions/Translation Extensions.xtuml');
INSERT INTO PE_PE
	VALUES ("cfcb59f5-e260-436e-b738-cc843c40b794",
	1,
	"e0e8a924-f549-4e50-9ee0-af61843ab967",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("061d0535-d75d-49d5-b094-5014ebb21557",
	"00000000-0000-0000-0000-000000000000",
	'extent_factory',
	'',
	'//
//
te_extent = param.te_extent;
select any te_prefix from instances of TE_PREFIX;
select any te_set from instances of TE_SET;
select any te_typemap from instances of TE_TYPEMAP;
select any te_instance from instances of TE_INSTANCE;
te_extent.sets_type = te_set.base_class;
te_extent.type = te_prefix.result + "Extent_t";
te_extent.active = "active";
te_extent.inactive = "inactive";
te_extent.initializer = "{0}";
te_extent.size_type = te_typemap.object_size_name;
te_extent.istate_type = te_typemap.state_number_name;
te_extent.istate_name = "initial_state";
te_extent.container_type = te_set.element_type + "*";
te_extent.container_name = "container";
te_extent.pool_type = te_instance.handle;
te_extent.pool_name = "pool";
te_extent.population_type = te_typemap.instance_index_name;
te_extent.population_name = "population";
te_extent.rstorsize_type = te_typemap.object_size_name;
te_extent.rstorsize_name = "size_no_rel";
te_extent.linkfunc_name = "link_function";
te_extent.size_name = "size";
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("c6aa739d-7ab7-4ae2-95c1-76e022d7b61e",
	"061d0535-d75d-49d5-b094-5014ebb21557",
	'te_extent',
	"1f3bdad1-ec0f-48e9-8084-9a44d3c52a99",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("1f3bdad1-ec0f-48e9-8084-9a44d3c52a99",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<extent>',
	'',
	'',
	'../Translation Extensions/Translation Extensions.xtuml');
INSERT INTO PE_PE
	VALUES ("061d0535-d75d-49d5-b094-5014ebb21557",
	1,
	"e0e8a924-f549-4e50-9ee0-af61843ab967",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("a0165032-f3c5-4760-8f9c-94202f37939a",
	"00000000-0000-0000-0000-000000000000",
	'file_factory',
	'',
	'//
//
te_file = param.te_file;
select any te_prefix from instances of TE_PREFIX;
te_file.hdr_file_ext = "h";
te_file.src_file_ext = "c";
te_file.sys_main = te_prefix.file + "sys_main";
te_file.factory = te_prefix.file + "sys_xtuml";
te_file.events = te_prefix.file + "sys_events";
te_file.asm_file_ext = "s";
te_file.obj_file_ext = "o";
te_file.rpt_file_ext = "rpt";
te_file.nvs = te_prefix.file + "sys_nvs";
te_file.sets = te_prefix.file + "sys_sets";
te_file.types = te_prefix.file + "sys_types";
te_file.thread = te_prefix.file + "sys_thread";
te_file.trace = te_prefix.file + "sys_trace";
te_file.tim = te_prefix.file + "TIM_bridge";
te_file.callout = te_prefix.file + "sys_user_co";
te_file.ilb = te_prefix.file + "sys_ilb";
te_file.persist = te_prefix.file + "sys_persist";
te_file.xtumlload = te_prefix.file + "sys_xtumlload";
te_file.interfaces = te_prefix.file + "sysc_interfaces";
te_file.registers = te_prefix.file + "RegDefs";
te_file.domain_color_path = ".";
te_file.domain_source_path = "_ch";
te_file.domain_include_path = "_ch";
te_file.domain_sql_path = "schema/sql";
te_file.system_source_path = "_ch";
te_file.system_include_path = "_ch";
te_file.system_color_path = ".";
te_file.registry_mark = "registry.mark";
te_file.system_mark = "system.mark";
te_file.datatype_mark = "datatype.mark";
te_file.event_mark = "event.mark";
te_file.class_mark = "class.mark";
te_file.domain_mark = "domain.mark";
te_file.domain_functions_mark = "dom_functions.arc";
te_file.system_functions_mark = "sys_functions.arc";
te_file.bridge_mark = "bridge.mark";
te_file.nvs_bridge = te_prefix.file + "NVS_bridge";
te_file.arc_path = "mc3020/arc";
te_file.root_path = ".";
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("dcb217ec-d562-4a82-91aa-a2e3e4dba817",
	"a0165032-f3c5-4760-8f9c-94202f37939a",
	'te_file',
	"0036820d-a4f4-4951-aaba-f90c9abe57f1",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("0036820d-a4f4-4951-aaba-f90c9abe57f1",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<file>',
	'',
	'',
	'../Translation Extensions/Translation Extensions.xtuml');
INSERT INTO PE_PE
	VALUES ("a0165032-f3c5-4760-8f9c-94202f37939a",
	1,
	"e0e8a924-f549-4e50-9ee0-af61843ab967",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("ccc2131b-86ef-4212-b52a-ca82fc522c04",
	"00000000-0000-0000-0000-000000000000",
	'instance_factory',
	'',
	'//
//
te_instance = param.te_instance;
select any te_prefix from instances of TE_PREFIX;
te_instance.scope = "";
te_instance.create = te_prefix.result + "CreateInstance";
te_instance.create_persistent = te_prefix.result + "CreatePersistent";
te_instance.delete = te_prefix.result + "DeleteInstance";
te_instance.delete_persistent = te_prefix.result + "DeletePersistent";
te_instance.self = "self";
te_instance.global_self = te_prefix.result + "GetSelf";
te_instance.base = te_prefix.result + "InstanceBase_t";
te_instance.handle = te_prefix.result + "iHandle_t";
te_instance.factory_init = te_prefix.result + "ClassFactoryInit";
te_instance.get_dci = te_prefix.result + "GetDCI";
te_instance.get_event_dispatcher = te_prefix.result + "GetEventDispatcher";
te_instance.get_thread_assignment = te_prefix.result + "GetThreadAssignment";
te_instance.base_class = te_prefix.result + "Object_s";
te_instance.max_extent = te_prefix.define_u + "SYS_MAX_OBJECT_EXTENT";
te_instance.max_association_extent = te_prefix.define_u + "SYS_MAX_ASSOCIATION_EXTENT";
te_instance.max_transient_extent = te_prefix.define_u + "SYS_MAX_TRANSIENT_EXTENT";
te_instance.current_state = "current_state";
te_instance.module = "";
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("a0d2d49f-c571-4572-a632-df87648c43ed",
	"ccc2131b-86ef-4212-b52a-ca82fc522c04",
	'te_instance',
	"f0202e24-f724-4165-9b1f-c61a34457bc8",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("f0202e24-f724-4165-9b1f-c61a34457bc8",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<instance>',
	'',
	'',
	'../Translation Extensions/Translation Extensions.xtuml');
INSERT INTO PE_PE
	VALUES ("ccc2131b-86ef-4212-b52a-ca82fc522c04",
	1,
	"e0e8a924-f549-4e50-9ee0-af61843ab967",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("72cda6cb-8804-4c94-b89c-cf763482295f",
	"00000000-0000-0000-0000-000000000000",
	'ilb_factory',
	'',
	'//
//
te_ilb = param.te_ilb;
select any te_prefix from instances of TE_PREFIX;
te_ilb.file = "sys_ilb";
te_ilb.interleave_bridge = "InterleaveBridge";
te_ilb.define_name = te_prefix.define_u + "SYS_MAX_INTERLEAVED_BRIDGES";
te_ilb.data_define_name = te_prefix.define_u + "SYS_MAX_INTERLEAVED_BRIDGE_DATA";
te_ilb.interleave_bridge_done = "InterleaveBridgeDone";
te_ilb.get_data = "GetILBData";
te_ilb.dispatch = "DispatchInterleaveBridge";
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("769cf144-3359-4fab-9042-e3057e4bc76c",
	"72cda6cb-8804-4c94-b89c-cf763482295f",
	'te_ilb',
	"9607434a-e180-4f6f-bfad-1014845a2102",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("9607434a-e180-4f6f-bfad-1014845a2102",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<interleaved bridge>',
	'',
	'',
	'../Translation Extensions/Translation Extensions.xtuml');
INSERT INTO PE_PE
	VALUES ("72cda6cb-8804-4c94-b89c-cf763482295f",
	1,
	"e0e8a924-f549-4e50-9ee0-af61843ab967",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("9508301e-fc83-46da-8fb7-5dc1538e1b44",
	"00000000-0000-0000-0000-000000000000",
	'persist_factory',
	'',
	'//
//
te_persist = param.te_persist;
select any te_prefix from instances of TE_PREFIX;
select any te_typemap from instances of TE_TYPEMAP;
te_persist.class_union = "";
te_persist.instance_cache_depth = te_prefix.define_u + "PERSIST_INST_CACHE_DEPTH";
te_persist.check_mark = "check_mark_post";
te_persist.post_link = "";
te_persist.link_type_name = te_prefix.type + "link_t";
te_persist.persist_file = "sys_persist";
te_persist.factory_init = te_prefix.result + "PersistFactoryInit";
te_persist.commit = te_prefix.result + "PersistenceCommit";
te_persist.restore = te_prefix.result + "PersistenceRestore";
te_persist.remove = te_prefix.result + "PersistDelete";
te_persist.link_cache_depth = te_prefix.define_u + "PERSIST_LINK_CACHE_DEPTH";
// Return the name of the extended attribute variable for use by
// the persistent restore operation.  This attribute represents the
// instance index of the class extent at time of persistent stowage
// together with the class number (across domains) of the class.
// Also return the types for this attribute variable.
te_persist.domainnum_name = "domainnum";
te_persist.domainnum_type = te_typemap.domain_number_name;
te_persist.classnum_name = "classnum";
te_persist.classnum_type = te_typemap.object_number_name;
te_persist.index_name = "index";
te_persist.index_type = te_typemap.instance_index_name;
te_persist.instid_type = "InstanceIdentifier_t";
te_persist.instid_name = "instance_identifier";
te_persist.dirty_type = "s1_t";
te_persist.dirty_name = "persist_dirty";
te_persist.dirty_dirty = 1;
te_persist.dirty_clean = 0;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("bc09a7ef-b677-413a-b044-148751289da4",
	"9508301e-fc83-46da-8fb7-5dc1538e1b44",
	'te_persist',
	"64c42b53-ed69-45a1-b7de-39fa11bfa5de",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("64c42b53-ed69-45a1-b7de-39fa11bfa5de",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<persistence>',
	'',
	'',
	'../Translation Extensions/Translation Extensions.xtuml');
INSERT INTO PE_PE
	VALUES ("9508301e-fc83-46da-8fb7-5dc1538e1b44",
	1,
	"e0e8a924-f549-4e50-9ee0-af61843ab967",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("5f2db2cc-57f5-490c-a4da-e8fb26a08e78",
	"00000000-0000-0000-0000-000000000000",
	'prefix_factory',
	'',
	'//
//
te_prefix = param.te_prefix;
te_prefix.symbol = "Escher_";
te_prefix.type = "Escher_";
te_prefix.define_u = "ESCHER_";
te_prefix.define_c = "Escher_";
te_prefix.symbolsw = "";
te_prefix.typesw = "";
te_prefix.result = "Escher_";
te_prefix.define_csw = "";
te_prefix.define_usw = "";
te_prefix.file = "";
te_prefix.provided_port = "pport_";
te_prefix.required_port = "rport_";
te_prefix.channel = "channel_";
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("1252cf07-0156-4dbd-b8a2-15542f584c28",
	"5f2db2cc-57f5-490c-a4da-e8fb26a08e78",
	'te_prefix',
	"3afdbefc-08c0-46d7-8e35-39767bc796a8",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("3afdbefc-08c0-46d7-8e35-39767bc796a8",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<prefix>',
	'',
	'',
	'../Translation Extensions/Translation Extensions.xtuml');
INSERT INTO PE_PE
	VALUES ("5f2db2cc-57f5-490c-a4da-e8fb26a08e78",
	1,
	"e0e8a924-f549-4e50-9ee0-af61843ab967",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("5ebca154-eea1-4f7d-af06-121dd89e3a32",
	"00000000-0000-0000-0000-000000000000",
	'relinfo_factory',
	'',
	'//
//
te_relinfo = param.te_relinfo;
te_relinfo.multiplicity = 0;
te_relinfo.rel_phrase = "";
te_relinfo.is_formalizer = false;
te_relinfo.is_supertype = false;
te_relinfo.generate_subtype = false;
te_relinfo.gen_declaration = false;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("40d72bbe-1f31-41a2-a5aa-dba7820bf63a",
	"5ebca154-eea1-4f7d-af06-121dd89e3a32",
	'te_relinfo',
	"4ac9e914-7a2d-42a4-afbb-979afa290813",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("4ac9e914-7a2d-42a4-afbb-979afa290813",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<relationship information>',
	'',
	'',
	'../Translation Extensions/Translation Extensions.xtuml');
INSERT INTO PE_PE
	VALUES ("5ebca154-eea1-4f7d-af06-121dd89e3a32",
	1,
	"e0e8a924-f549-4e50-9ee0-af61843ab967",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("fd4b0fdd-5613-4898-affe-91d6dd227c62",
	"00000000-0000-0000-0000-000000000000",
	'relstore_factory',
	'',
	'//
//
te_relstore = param.te_relstore;
te_relstore.data_init = "";
te_relstore.link_calls = "";
te_relstore.link_index = 0;
te_relstore.data_fini = "";
te_relstore.self_name = "self";
te_relstore.data_declare = "";
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("4bec37fb-25a8-4ead-986f-eb7d2b3c99dd",
	"fd4b0fdd-5613-4898-affe-91d6dd227c62",
	'te_relstore',
	"e0eff310-4301-4d0e-892a-5e44db181c35",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("e0eff310-4301-4d0e-892a-5e44db181c35",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<relationship storage>',
	'',
	'',
	'../Translation Extensions/Translation Extensions.xtuml');
INSERT INTO PE_PE
	VALUES ("fd4b0fdd-5613-4898-affe-91d6dd227c62",
	1,
	"e0e8a924-f549-4e50-9ee0-af61843ab967",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("9af8aa5b-60f0-46ce-891e-4d9519097ab0",
	"00000000-0000-0000-0000-000000000000",
	'set_factory',
	'',
	'//
//
te_set = param.te_set;
select any te_prefix from instances of TE_PREFIX;
te_set.module = "";
te_set.copy = te_prefix.result + "CopySet";
te_set.clear = te_prefix.result + "ClearSet";
te_set.insert_element = te_prefix.result + "SetInsertElement";
te_set.element_count = te_prefix.result + "SetCardinality";
te_set.iterator_class_name = te_prefix.result + "Iterator_s";
te_set.number_of_containoids = te_prefix.define_usw + "SYS_MAX_CONTAINERS";
te_set.factory = te_prefix.result + "SetFactoryInit";
te_set.insert_block = te_prefix.result + "SetInsertBlock";
te_set.remove_instance = te_prefix.result + "SetRemoveInstance";
te_set.contains = te_prefix.result + "SetContains";
te_set.equality = te_prefix.result + "SetEquality";
te_set.init = te_prefix.result + "InitSet";
te_set.insert_instance = te_prefix.result + "SetInsertInstance";
te_set.emptiness = te_prefix.result + "SetIsEmpty";
te_set.get_any = te_prefix.result + "SetGetAny";
te_set.remove_element = te_prefix.result + "SetRemoveElement";
te_set.iterator_reset = te_prefix.result + "IteratorReset";
te_set.iterator_next = te_prefix.result + "IteratorNext";
te_set.base_class = te_prefix.result + "ObjectSet_s";
te_set.element_type = te_prefix.result + "SetElement_s";
te_set.scope = "";
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("cc25514b-1fa8-420f-a1c0-f7dc6dab9cf8",
	"9af8aa5b-60f0-46ce-891e-4d9519097ab0",
	'te_set',
	"acfc1b52-78f3-4f68-9025-f05d65609d43",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("acfc1b52-78f3-4f68-9025-f05d65609d43",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<set>',
	'',
	'',
	'../Translation Extensions/Translation Extensions.xtuml');
INSERT INTO PE_PE
	VALUES ("9af8aa5b-60f0-46ce-891e-4d9519097ab0",
	1,
	"e0e8a924-f549-4e50-9ee0-af61843ab967",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("2d3feeed-36bc-4857-8e3e-eeacafa7a74f",
	"00000000-0000-0000-0000-000000000000",
	'slist_factory',
	'',
	'//
//
te_slist = param.te_slist;
select any te_prefix from instances of TE_PREFIX;
te_slist.remove_node = te_prefix.result + "SetRemoveNode";
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("95eec4cd-edc1-445e-91e2-ec9811793a2d",
	"2d3feeed-36bc-4857-8e3e-eeacafa7a74f",
	'te_slist',
	"976fc510-71b7-4ace-b099-c840dff5f3de",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("976fc510-71b7-4ace-b099-c840dff5f3de",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<slist>',
	'',
	'',
	'../Translation Extensions/Translation Extensions.xtuml');
INSERT INTO PE_PE
	VALUES ("2d3feeed-36bc-4857-8e3e-eeacafa7a74f",
	1,
	"e0e8a924-f549-4e50-9ee0-af61843ab967",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("3e3540fc-e09e-493d-a6b7-f0af1a4967f5",
	"00000000-0000-0000-0000-000000000000",
	'string_factory',
	'',
	'//
//
te_string = param.te_string;
select any te_prefix from instances of TE_PREFIX;
te_string.memset = te_prefix.result + "memset";
te_string.memmove = te_prefix.result + "memmove";
te_string.strcpy = te_prefix.result + "strcpy";
te_string.stradd = te_prefix.result + "stradd";
te_string.strlen = te_prefix.result + "strlen";
te_string.itoa = te_prefix.result + "itoa";
te_string.atoi = te_prefix.result + "atoi";
te_string.strcmp = te_prefix.result + "strcmp";
te_string.strget = te_prefix.result + "strget";
te_string.max_string_length = te_prefix.define_u + "SYS_MAX_STRING_LEN";
te_string.debug_buffer_depth = te_prefix.define_u + "DEBUG_BUFFER_DEPTH";
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("285599c4-cf13-4f54-a9aa-71f1abda9ad7",
	"3e3540fc-e09e-493d-a6b7-f0af1a4967f5",
	'te_string',
	"950366c4-a10b-4518-8cdb-3dc0f89902cc",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("950366c4-a10b-4518-8cdb-3dc0f89902cc",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<string>',
	'',
	'',
	'../Translation Extensions/Translation Extensions.xtuml');
INSERT INTO PE_PE
	VALUES ("3e3540fc-e09e-493d-a6b7-f0af1a4967f5",
	1,
	"e0e8a924-f549-4e50-9ee0-af61843ab967",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("33a42e2b-8cfb-4cb6-82d7-7cb61a176c67",
	"00000000-0000-0000-0000-000000000000",
	'thread_factory',
	'',
	'//
//
te_thread = param.te_thread;
select any te_prefix from instances of TE_PREFIX;
te_thread.file = "sys_thread";
te_thread.mutex_lock = te_prefix.result + "mutex_lock";
te_thread.mutex_unlock = te_prefix.result + "mutex_unlock";
te_thread.nonbusy_wait = te_prefix.result + "nonbusy_wait";
te_thread.nonbusy_wake = te_prefix.result + "nonbusy_wake";
te_thread.shutdown = te_prefix.result + "thread_shutdown";
te_thread.create = te_prefix.result + "thread_create";
te_thread.enabled = false;
te_thread.flavor = "POSIX";
te_thread.serialize = false;
te_thread.number_of_threads = 1;
te_thread.extra_initialization = "";
te_thread.AUTOSAR_enabled = te_prefix.define_usw + "AUTOSAR_ENABLED";
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("af69afe3-0efc-4db6-8ec7-be9fc0ebb5ca",
	"33a42e2b-8cfb-4cb6-82d7-7cb61a176c67",
	'te_thread',
	"11e51b45-1939-4fba-8271-981f25fb85e0",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("11e51b45-1939-4fba-8271-981f25fb85e0",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<thread>',
	'',
	'',
	'../Translation Extensions/Translation Extensions.xtuml');
INSERT INTO PE_PE
	VALUES ("33a42e2b-8cfb-4cb6-82d7-7cb61a176c67",
	1,
	"e0e8a924-f549-4e50-9ee0-af61843ab967",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("d0bbf997-798c-4404-861c-784bf77e4060",
	"00000000-0000-0000-0000-000000000000",
	'tim_factory',
	'',
	'//
//
te_tim = param.te_tim;
select any te_prefix from instances of TE_PREFIX;
te_tim.max_timers = te_prefix.define_u + "SYS_MAX_XTUML_TIMERS";
te_tim.keyed_timer_support = false;
te_tim.recurring_timer_support = true;
te_tim.internal_type = "ETimer_t";
te_tim.timer_event_search_and_destroy = false;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("07db2bed-4e41-4039-8906-32460a0affa9",
	"d0bbf997-798c-4404-861c-784bf77e4060",
	'te_tim',
	"64135dee-0504-4c8d-b94c-4103b7459fc0",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("64135dee-0504-4c8d-b94c-4103b7459fc0",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<timer>',
	'',
	'',
	'../Translation Extensions/Translation Extensions.xtuml');
INSERT INTO PE_PE
	VALUES ("d0bbf997-798c-4404-861c-784bf77e4060",
	1,
	"e0e8a924-f549-4e50-9ee0-af61843ab967",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("0909dcdf-2c15-44d5-8142-b2ae8894f8eb",
	"00000000-0000-0000-0000-000000000000",
	'typemap_factory',
	'',
	'//
//
te_typemap = param.te_typemap;
select any te_prefix from instances of TE_PREFIX;
te_typemap.instance_index_name = te_prefix.result + "InstanceIndex_t";
te_typemap.instance_index_type = "u2_t";
te_typemap.object_size_name = te_prefix.type + "ClassSize_t";
te_typemap.object_size_type = "u2_t";
te_typemap.object_number_name = te_prefix.type + "ClassNumber_t";
te_typemap.object_number_type = "u2_t";
te_typemap.state_number_name = te_prefix.type + "StateNumber_t";
te_typemap.state_number_type = "u1_t";
te_typemap.domain_number_name = te_prefix.type + "DomainNumber_t";
te_typemap.domain_number_type = "u1_t";
te_typemap.event_number_name = te_prefix.type + "EventNumber_t";
te_typemap.event_number_type = "u1_t";
te_typemap.event_priority_name = te_prefix.type + "EventPriority_t";
te_typemap.event_priority_type = "u1_t";
te_typemap.event_flags_name = te_prefix.type + "EventFlags_t";
te_typemap.event_flags_type = "u1_t";
te_typemap.poly_return_name = te_prefix.type + "PolyEventRC_t";
te_typemap.poly_return_type = "u1_t";
te_typemap.SEM_cell_type = "u1_t";
te_typemap.SEM_cell_name = te_prefix.type + "SEMcell_t";
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("43bd844a-918f-4c25-bac0-8dc14a4f906a",
	"0909dcdf-2c15-44d5-8142-b2ae8894f8eb",
	'te_typemap',
	"d98a6bae-7ee6-42d2-a8a1-2f809cba7b82",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("d98a6bae-7ee6-42d2-a8a1-2f809cba7b82",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<type map>',
	'',
	'',
	'../Translation Extensions/Translation Extensions.xtuml');
INSERT INTO PE_PE
	VALUES ("0909dcdf-2c15-44d5-8142-b2ae8894f8eb",
	1,
	"e0e8a924-f549-4e50-9ee0-af61843ab967",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("59afc4e7-69b4-4a19-853a-70e3402e74b8",
	"00000000-0000-0000-0000-000000000000",
	'callout_factory',
	'',
	'//
//
te_callout = param.te_callout;
select any te_prefix from instances of TE_PREFIX;
te_callout.initialization = te_prefix.symbolsw + "UserInitializationCallout";
te_callout.pre_xtUML_initialization = te_prefix.symbolsw + "UserPreOoaInitializationCallout";
te_callout.post_xtUML_initialization = te_prefix.symbolsw + "UserPostOoaInitializationCallout";
te_callout.background_processing = te_prefix.symbolsw + "UserBackgroundProcessingCallout";
te_callout.pre_shutdown = te_prefix.symbolsw + "UserPreShutdownCallout";
te_callout.event_no_instance = te_prefix.symbolsw + "UserEventNoInstanceCallout";
te_callout.event_free_list_empty = te_prefix.symbolsw + "UserEventFreeListEmptyCallout";
te_callout.object_pool_empty = te_prefix.symbolsw + "UserObjectPoolEmptyCallout";
te_callout.node_list_empty = te_prefix.symbolsw + "UserNodeListEmptyCallout";
te_callout.interleaved_bridge_overflow = te_prefix.symbolsw + "UserInterleavedBridgeOverflowCallout";
te_callout.self_event_queue_empty = te_prefix.symbolsw + "UserSelfEventQueueEmptyCallout";
te_callout.non_self_event_queue_empty = te_prefix.symbolsw + "UserNonSelfEventQueueEmptyCallout";
te_callout.persistence_error = te_prefix.symbolsw + "UserPersistenceErrorCallout";
te_callout.file = "sys_user_co";
te_callout.post_shutdown = te_prefix.symbolsw + "UserPostShutdownCallout";
te_callout.event_cant_happen = te_prefix.symbolsw + "UserEventCantHappenCallout";
te_callout.empty_handle_detected = te_prefix.symbolsw + "UserEmptyHandleDetectedCallout";
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("99c23be3-15c1-4769-b264-d0f330c1dc13",
	"59afc4e7-69b4-4a19-853a-70e3402e74b8",
	'te_callout',
	"93f43d4c-fd60-4b31-97f4-e74103f19dc9",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("93f43d4c-fd60-4b31-97f4-e74103f19dc9",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<user callout>',
	'',
	'',
	'../Translation Extensions/Translation Extensions.xtuml');
INSERT INTO PE_PE
	VALUES ("59afc4e7-69b4-4a19-853a-70e3402e74b8",
	1,
	"e0e8a924-f549-4e50-9ee0-af61843ab967",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("70cd4dc3-b604-4f9f-beb9-0f10f70cd6da",
	"00000000-0000-0000-0000-000000000000",
	'trace_factory',
	'',
	'//
//
te_trace = param.te_trace;
select any te_prefix from instances of TE_PREFIX;
te_trace.component_msg_start = te_prefix.define_usw + "COMP_MSG_START_TRACE";
te_trace.component_msg_end = te_prefix.define_usw + "COMP_MSG_END_TRACE";
te_trace.state_txn_start = te_prefix.define_usw + "STATE_TXN_START_TRACE";
te_trace.oal_trace = te_prefix.define_usw + "OAL_ACTION_TRACE";
te_trace.state_txn_end = te_prefix.define_usw + "STATE_TXN_END_TRACE";
te_trace.state_txn_event_ignored = te_prefix.define_usw + "STATE_TXN_IG_TRACE";
te_trace.state_txn_cant_happen = te_prefix.define_usw + "STATE_TXN_CH_TRACE";
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("a19ba308-618e-4e01-8792-ac2fab26d3a1",
	"70cd4dc3-b604-4f9f-beb9-0f10f70cd6da",
	'te_trace',
	"1aa80d4d-ce32-4473-9aa3-f54ad1ca398e",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("1aa80d4d-ce32-4473-9aa3-f54ad1ca398e",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<trace>',
	'',
	'',
	'../Translation Extensions/Translation Extensions.xtuml');
INSERT INTO PE_PE
	VALUES ("70cd4dc3-b604-4f9f-beb9-0f10f70cd6da",
	1,
	"e0e8a924-f549-4e50-9ee0-af61843ab967",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("6b096d3f-c8d3-49b4-a540-d26c347cafa5",
	"00000000-0000-0000-0000-000000000000",
	'target_factory',
	'',
	'//
te_target = param.te_target;
te_target.language = "C";
te_target.c2cplusplus_linkage_begin = "#ifdef\t__cplusplus\nextern\tC\t{\n#endif";
te_target.c2cplusplus_linkage_end = "#ifdef\t__cplusplus\n}\n#endif";
te_target.main = "main";
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("d549d64a-df06-43e7-9e7e-0f5228f07ccb",
	"6b096d3f-c8d3-49b4-a540-d26c347cafa5",
	'te_target',
	"87352925-0272-4445-84b6-d8c3f983377f",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("87352925-0272-4445-84b6-d8c3f983377f",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<target>',
	'',
	'',
	'../Translation Extensions/Translation Extensions.xtuml');
INSERT INTO PE_PE
	VALUES ("6b096d3f-c8d3-49b4-a540-d26c347cafa5",
	1,
	"e0e8a924-f549-4e50-9ee0-af61843ab967",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("bc0135ff-98d9-4583-909c-4facecd9c199",
	"00000000-0000-0000-0000-000000000000",
	'sys_singletons',
	'',
	'//
create object instance te_prefix of TE_PREFIX;
::prefix_factory( te_prefix:te_prefix );
create object instance te_typemap of TE_TYPEMAP;
::typemap_factory( te_typemap:te_typemap );
create object instance te_container of TE_CONTAINER;
::container_factory( te_container:te_container );
create object instance te_copyright of TE_COPYRIGHT;
::copyright_factory( te_copyright:te_copyright );
create object instance te_dlist of TE_DLIST;
::dlist_factory( te_dlist:te_dlist );
create object instance te_dma of TE_DMA;
::dma_factory( te_dma:te_dma );
create object instance te_eq of TE_EQ;
::eq_factory( te_eq:te_eq );
create object instance te_file of TE_FILE;
::file_factory( te_file:te_file );
create object instance te_instance of TE_INSTANCE;
::instance_factory( te_instance:te_instance );
create object instance te_ilb of TE_ILB;
::ilb_factory( te_ilb:te_ilb );
create object instance te_persist of TE_PERSIST;
::persist_factory( te_persist:te_persist );
create object instance te_relinfo of TE_RELINFO;
::relinfo_factory( te_relinfo:te_relinfo );
create object instance te_relstore of TE_RELSTORE;
::relstore_factory( te_relstore:te_relstore );
create object instance te_set of TE_SET;
::set_factory( te_set:te_set );
create object instance te_slist of TE_SLIST;
::slist_factory( te_slist:te_slist );
create object instance te_string of TE_STRING;
::string_factory( te_string:te_string );
create object instance te_thread of TE_THREAD;
::thread_factory( te_thread:te_thread );
create object instance te_tim of TE_TIM;
::tim_factory( te_tim:te_tim );
create object instance te_callout of TE_CALLOUT;
::callout_factory( te_callout:te_callout );
create object instance te_trace of TE_TRACE;
::trace_factory( te_trace:te_trace );
create object instance te_extent of TE_EXTENT;
::extent_factory( te_extent:te_extent );
create object instance te_target of TE_TARGET;
::target_factory( te_target:te_target );
//
create object instance te_assign of TE_ASSIGN;
create object instance te_create_instance of TE_CREATE_INSTANCE;
create object instance te_for of TE_FOR;
create object instance te_if of TE_IF;
create object instance te_while of TE_WHILE;
create object instance te_elif of TE_ELIF;
create object instance te_delete_instance of TE_DELETE_INSTANCE;
create object instance te_create_event of TE_CREATE_EVENT;
create object instance te_relate of TE_RELATE;
create object instance te_relate_using of TE_RELATE_USING;
create object instance te_unrelate of TE_UNRELATE;
create object instance te_unrelate_using of TE_UNRELATE_USING;
create object instance te_select of TE_SELECT;
create object instance te_select_where of TE_SELECT_WHERE;
create object instance te_generate_precreated_event of TE_GENERATE_PRECREATED_EVENT;
create object instance te_event_parameters of TE_EVENT_PARAMETERS;
create object instance te_generate of TE_GENERATE;
create object instance te_generate_creator_event of TE_GENERATE_CREATOR_EVENT;
create object instance te_generate_to_class of TE_GENERATE_TO_CLASS;
create object instance te_sgn of TE_SGN;
create object instance te_iop of TE_IOP;
create object instance te_operation of TE_OPERATION;
create object instance te_bridge of TE_BRIDGE;
create object instance te_function of TE_FUNCTION;
create object instance te_return of TE_RETURN;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("bc0135ff-98d9-4583-909c-4facecd9c199",
	1,
	"e0e8a924-f549-4e50-9ee0-af61843ab967",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("3609606e-b11b-412a-8f73-6f5329db3919",
	"00000000-0000-0000-0000-000000000000",
	'GetBaseTypeForUDT',
	'',
	'//============================================================================
// $RCSfile: q.datatype.arc,v $
//
// Notice:
// (C) Copyright 1998-2013 Mentor Graphics Corporation
//     All rights reserved.
//
// This document contains confidential and proprietary information and
// property of Mentor Graphics Corp.  No part of this document may be
// reproduced without the express written permission of Mentor Graphics Corp.
//============================================================================
//
//
//============================================================================
// Recursively locate the datatype at the base of the UDT type definition 
// chain. Traverses up through UDTs based on UDTs until we find the underlying
// S_DT instance (which may actually be EDT, SDT, IRDT or CDT).
//============================================================================
s_udt = param.s_udt;
select one s_dt related by s_udt->S_DT[R18];
select one s_udt related by s_dt->S_UDT[R17];
if ( not_empty s_udt )
  r = ::GetBaseTypeForUDT( s_udt:s_udt );
  s_dt = r;
end if;
return s_dt;
',
	"3f421b34-9cdd-4a99-947a-7224e3b97776",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("fe16b961-c9f5-4526-b6c5-7ba007f14b7f",
	"3609606e-b11b-412a-8f73-6f5329db3919",
	's_udt',
	"fbb3cc5a-c0d2-405d-a9fd-46fcd925a160",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("fbb3cc5a-c0d2-405d-a9fd-46fcd925a160",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<User Data Type>',
	'',
	'',
	'../Domain/Domain.xtuml');
INSERT INTO PE_PE
	VALUES ("3609606e-b11b-412a-8f73-6f5329db3919",
	1,
	"e0e8a924-f549-4e50-9ee0-af61843ab967",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_DT_PROXY
	VALUES ("3f421b34-9cdd-4a99-947a-7224e3b97776",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Data Type>',
	'',
	'',
	'../Instance Reference Data Types/Instance Reference Data Types.xtuml');
INSERT INTO S_SYNC
	VALUES ("e17c1ffa-d73f-47fd-823c-24deb352786c",
	"00000000-0000-0000-0000-000000000000",
	'GetAttributeCodeGenType',
	'',
	'//
//============================================================================
//   Get the S_DT and S_CDT object references for a given attribute
//   (O_ATTR) instance.
//============================================================================
o_attr = param.o_attr;
//
select one s_dt related by o_attr->S_DT[R114];
select one s_udt related by s_dt->S_UDT[R17];
if ( not_empty s_udt )
  r = ::GetBaseTypeForUDT( s_udt:s_udt );
  s_dt = r;
end if;
select one te_dt related by s_dt->TE_DT[R2021];
select one s_cdt related by s_dt->S_CDT[R17];
//
if ( empty s_cdt )
  select one s_edt related by s_dt->S_EDT[R17];
  if ( empty s_edt )
    select one s_sdt related by s_dt->S_SDT[R17];
    if ( empty s_sdt )
      select one s_irdt related by s_dt->S_IRDT[R17];
      if ( empty s_irdt )
        T::print(s:"Error in attribute T::s(i:o_attr.Name)");
        T::print(s:"with data type T::s(i:s_dt.Name)");
        T::exit(i:100);
      end if;
    end if;
  else
    // Enum, use integer type.
    // CDS Some day we should pass along the enumeration type.
    select any s_cdt from instances of S_CDT where ( selected.Core_Typ == 2 );
  end if;
end if;
//
if ( not_empty s_cdt )
  if ( 7 == s_cdt.Core_Typ )
    // s_cdt.Core_Typ is "same_as<Base_Attribute>"
    select one base_o_attr related by o_attr->O_RATTR[R106]->O_BATTR[R113]->O_ATTR[R106];
    if ( empty base_o_attr )
      select one o_obj related by o_attr->O_OBJ[R102];
      T::print(s:"\nCould not find O_BATTR for object T::s(i:o_obj.Name) (T::s(i:o_obj.Key_Lett)) attribute T::s(i:o_attr.Name) !");
      T::print(s:"\nDid you combine a referential and then rename the combined attribute?");
      T::exit(i:101);
    end if;
    // Note: the following is a recursive call to this function
    r = ::GetAttributeCodeGenType( o_attr:base_o_attr );
    te_dt = r;
  end if;
end if;
return te_dt;
',
	"5b20f7fb-179b-4254-a8de-922a50a1225d",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("6d682de9-d2c4-4ae3-9194-dad5138a0fa1",
	"e17c1ffa-d73f-47fd-823c-24deb352786c",
	'o_attr',
	"f597d699-ee8c-4635-9196-5082b710160d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("f597d699-ee8c-4635-9196-5082b710160d",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Attribute>',
	'',
	'',
	'../Instance Reference Data Types/Instance Reference Data Types.xtuml');
INSERT INTO PE_PE
	VALUES ("e17c1ffa-d73f-47fd-823c-24deb352786c",
	1,
	"e0e8a924-f549-4e50-9ee0-af61843ab967",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_DT_PROXY
	VALUES ("5b20f7fb-179b-4254-a8de-922a50a1225d",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Extended Data Type>',
	'',
	'',
	'../Translation Extensions/Translation Extensions.xtuml');
INSERT INTO S_SYNC
	VALUES ("216c86ce-79f8-4c04-bc54-e7e2c3bb1bbf",
	"00000000-0000-0000-0000-000000000000",
	'MapUserSpecifiedDataTypePrecision',
	'',
	'//
//============================================================================
// Map a user defined data types precision into its corresponding instance
// of Data Type (S_DT).
// Note:  Might prefer POSIX type support here, but doubt we can count
// on most embedded targets thinking this way.  Thus brute force the types.
//============================================================================
te_dt = param.te_dt;
mapping = param.mapping;
error = false;
type = mapping;
if ( ( type == "uchar_t" ) or ( ( type == "u_char" ) or ( type == "unsignedchar" ) ) )
  te_dt.ExtName = "unsigned char";
elif ( ( type == "char_t" ) or ( type == "char" ) )
  te_dt.ExtName = "char";
elif ( type == "signedchar" )
  te_dt.ExtName = "signed char";
elif ( ( type == "ushort_t" ) or ( ( type == "u_short" ) or ( type == "unsignedshort" ) ) )
  te_dt.ExtName = "unsigned short";
elif ( ( type == "short_t" ) or ( type == "short" ) )
  te_dt.ExtName = "short";
elif ( type == "signedshort" )
  te_dt.ExtName = "signed short";
elif ( ( type == "uint_t" ) or ( ( type == "u_int" ) or ( type == "unsignedint" ) ) )
  te_dt.ExtName = "unsigned int";
elif ( type == "s1_t" )
  te_dt.ExtName = "s1_t";
elif ( type == "u1_t" )
  te_dt.ExtName = "u1_t";
elif ( type == "s2_t" )
  te_dt.ExtName = "s2_t";
elif ( type == "u2_t" )
  te_dt.ExtName = "u2_t";
elif ( type == "s4_t" )
  te_dt.ExtName = "s4_t";
elif ( type == "u4_t" )
  te_dt.ExtName = "u4_t";
elif ( type == "i_t" )
  te_dt.ExtName = "i_t";
elif ( ( type == "int_t" ) or ( type == "int" ) )
  te_dt.ExtName = "int";
elif ( type == "signedint" )
  te_dt.ExtName = "signed int";
elif ( ( type == "ulong_t" ) or ( ( type == "u_long" ) or ( type == "unsignedlong" ) ) )
  te_dt.ExtName = "unsigned long";
elif ( ( type == "long_t" ) or ( type == "long" ) )
  te_dt.ExtName = "long";
elif ( type == "signedlong" )
  te_dt.ExtName = "signed long";
elif ( ( type == "u_longlong_t" ) or ( ( type == "u_longlong_t" ) or ( type == "unsignedlonglong" ) ) )
  te_dt.ExtName = "unsigned long long";
elif ( ( type == "longlong_t" ) or ( ( type == "longlong" ) or ( type == "signedlonglong" ) ) )
  te_dt.ExtName = "long long";
  //
elif ( type == "float" )
  te_dt.ExtName = "float";
elif ( type == "r4_t" )
  te_dt.ExtName = "r4_t";
elif ( type == "double" )
  te_dt.ExtName = "double";
elif ( type == "r8_t" )
  te_dt.ExtName = "r8_t";
  //
elif ( type == "size_t" )
  te_dt.ExtName = "size_t";
elif ( type == "ssize_t" )
  te_dt.ExtName = "ssize_t";
elif ( type == "time_t" )
  te_dt.ExtName = "time_t";
elif ( type == "clock_t" )
  te_dt.ExtName = "clock_t";
elif ( type == "volatile_clock_t" )
  te_dt.ExtName = "volatile unsigned long";
  //
else
  error = true;
end if;
return error;
',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("f3c8dd04-4e04-4665-87d5-16deddfa1c85",
	"216c86ce-79f8-4c04-bc54-e7e2c3bb1bbf",
	'te_dt',
	"5b20f7fb-179b-4254-a8de-922a50a1225d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("bcaa658f-9fa1-4f21-b896-75f3b60da681",
	"216c86ce-79f8-4c04-bc54-e7e2c3bb1bbf",
	'mapping',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"f3c8dd04-4e04-4665-87d5-16deddfa1c85",
	'');
INSERT INTO PE_PE
	VALUES ("216c86ce-79f8-4c04-bc54-e7e2c3bb1bbf",
	1,
	"e0e8a924-f549-4e50-9ee0-af61843ab967",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("94c94f31-0d10-43de-ad1a-4520175ba16a",
	"00000000-0000-0000-0000-000000000000",
	'UserSuppliedDataTypeIncludes',
	'',
	'//
// Return the structure type for persistent links.
select any te_file from instances of TE_FILE;
sys_types_file_name = ( te_file.types + "." ) + te_file.hdr_file_ext;
select many special_te_dts from instances of TE_DT where ( ( selected.Include_File != "" ) and ( selected.Include_File != sys_types_file_name ) );
s = "";
for each special_te_dt in special_te_dts
  s = ( s + "#include " ) + ( special_te_dt.Include_File + "\n" );
end for;
return s;
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("94c94f31-0d10-43de-ad1a-4520175ba16a",
	1,
	"e0e8a924-f549-4e50-9ee0-af61843ab967",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("00b670eb-6b5d-475b-8753-84ad83d79c52",
	"00000000-0000-0000-0000-000000000000",
	'containoid_select_many_count',
	'',
	'//============================================================================
// $RCSfile: q.oal.utils.arc,v $
//
// Description:
// Utility functions specifically for OAL analysis.
//
// Notice:
// (C) Copyright 1998-2013 Mentor Graphics Corporation
//     All rights reserved.
//
// This document contains confidential and proprietary information and
// property of Mentor Graphics Corp.  No part of this document may be
// reproduced without the express written permission of Mentor Graphics Corp.
//============================================================================
//
//
//
// Find the maximum number of "select many" statements expressed in
// one action body.  We will use this number to estimate the container
// pool.
// CDS - This gets called for each component but uses all actions in 
// the system.  And it gets called too many times.
//
result = 0;
select many act_acts from instances of ACT_ACT;
for each act_act in act_acts
  select many act_smts related by act_act->ACT_BLK[R601]->ACT_SMT[R602];
  select many act_sels related by act_smts->ACT_SEL[R603] where ( ( selected.cardinality == "many" ) and ( selected.is_implicit ) );
  select many act_fios related by act_smts->ACT_FIO[R603] where ( ( selected.cardinality == "many" ) and ( selected.is_implicit ) );
  select many act_fiws related by act_smts->ACT_FIW[R603] where ( ( selected.cardinality == "many" ) and ( selected.is_implicit ) );
  count = cardinality act_sels;
  c1 = cardinality act_fios;
  count = count + c1;
  c1 = cardinality act_fiws;
  count = count + c1;
  if ( count > result )
    result = count;
  end if;
end for;
return result;
',
	"ba5eda7a-def5-0000-0000-000000000002",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("00b670eb-6b5d-475b-8753-84ad83d79c52",
	1,
	"e0e8a924-f549-4e50-9ee0-af61843ab967",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("db19ab22-fa0e-41e3-a1da-14736ccfed95",
	"00000000-0000-0000-0000-000000000000",
	'timer_analyze_starts',
	'',
	'//
//
// Count up the number of places where a timer is started (or started
// in recurring mode).
//
result = 0;
select many s_ees from instances of S_EE where ( selected.Key_Lett == "TIM" );
for each s_ee in s_ees
  select any s_brg related by s_ee->S_BRG[R19] where ( selected.Name == "timer_start" );
  if ( not_empty s_brg )
    select many timer_invocations related by s_brg->V_BRV[R828];
    c = cardinality timer_invocations;
    result = result + c;
  end if;
  select any s_brg related by s_ee->S_BRG[R19] where ( selected.Name == "timer_start_recurring" );
  if ( not_empty s_brg )
    select many timer_invocations related by s_brg->V_BRV[R828];
    c = cardinality timer_invocations;
    result = result + c;
  end if;
end for;
return result;
',
	"ba5eda7a-def5-0000-0000-000000000002",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("db19ab22-fa0e-41e3-a1da-14736ccfed95",
	1,
	"e0e8a924-f549-4e50-9ee0-af61843ab967",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("279af1e8-e98f-4837-9fd7-a0b5df14f861",
	"00000000-0000-0000-0000-000000000000",
	'CreateSpecialWhereClauseInstances',
	'',
	'//
//============================================================================
// Class: 2000.  Special Where Clause
// CREATE TABLE TE_SWC (
// 	Obj_Kl		STRING,
// 	Where_Spec	STRING,
// 	Key	        STRING,
// 	Ret_Val	        BOOLEAN,
//	Built_In	BOOLEAN,
//	Oid_ID	        INTEGER );
//
// Notes:
// (1) The selected attributes of the where clause _Key_ are specified in the
//     same order as they appear on the OIM. This convention allows other
//     archetypes a _rule_ for dealing with the positional parameter
//     information provided during fragment parsing of a special where clause.
//============================================================================
te_sys = param.te_sys;
//
// Special Where Clause patterns that may be optimized by the model compiler.
//
unique_num = 0;
select many te_classes from instances of TE_CLASS where ( not selected.ExcludeFromGen );
for each te_class in te_classes
  select many o_ids related by te_class->O_OBJ[R2019]->O_ID[R104];
  for each o_id in o_ids
    select one te_where related by o_id->TE_WHERE[R2032];
    // Get all special wheres when loading instances even if they are
    // not seen in the OAL.  We need them for batch_relate.
    if ( te_sys.InstanceLoading )
      select any r_rto related by o_id->R_RTO[R109];
      if ( not_empty r_rto )
        te_where.WhereKey = true;
      end if;
    end if;
    if ( te_where.WhereKey )
      key_number = o_id.Oid_ID + 1;
      where_spec = "";
      unique_num = unique_num + 1;
      where_key = ( ( te_class.Key_Lett + T::s(i:key_number) ) + ( "_mcw" + T::s(i:unique_num) ) );
      //
      select many te_attrs related by te_class->TE_ATTR[R2061];
      for each te_attr in te_attrs
        te_attr.Included = false;
      end for;
      //
      select many te_attrs related by o_id->O_OIDA[R105]->O_ATTR[R105]->TE_ATTR[R2033];
      num_ident_attr = cardinality te_attrs;
      for each te_attr in te_attrs
        te_attr.Included = true;
      end for;
      //
      // *** Provide a key without parenthesis.
      // Be sure we have the first attribute in the class.
      select any first_te_attr related by te_class->TE_ATTR[R2061];
      while ( not_empty first_te_attr )
        select one prev_te_attr related by first_te_attr->TE_ATTR[R2087.''precedes''];
        if ( empty prev_te_attr )
          break;
        end if;
        first_te_attr = prev_te_attr;
      end while;
      te_attr = first_te_attr;
      oida_count = 0;
      while ( not_empty te_attr )
        select one o_attr related by te_attr->O_ATTR[R2033];
        if ( te_attr.Included )
          oida_count = oida_count + 1;
          where_spec = where_spec + "selected.T::s(i:o_attr.Name) == ?";
          if ( oida_count < num_ident_attr )
            where_spec = where_spec + " AND ";
          end if;
        end if;
        //
        select one te_attr related by te_attr->TE_ATTR[R2087.''succeeds''];
      end while;
      //
      // Object ${te_class.Name} (${te_class.Key_Lett}) Identifier *${key_number}
      create object instance te_swc of TE_SWC;
      relate te_swc to te_class across R2001;
      te_swc.Obj_Kl = te_class.Key_Lett;
      te_swc.Where_Spec = where_spec;
      te_swc.Key = where_key;
      te_swc.Ret_Val = false;
      te_swc.Built_In = true;
      te_swc.Oid_ID = o_id.Oid_ID;
      //
      // *** Provide a key parenthesized at the outer construct.
      where_spec = "(";
      unique_num = unique_num + 1;
      where_key = ( ( te_class.Key_Lett + T::s(i:key_number) ) + ( "_mcw" + T::s(i:unique_num) ) );
      te_attr = first_te_attr;
      oida_count = 0;
      while ( not_empty te_attr )
        select one o_attr related by te_attr->O_ATTR[R2033];
        if ( te_attr.Included )
          oida_count = oida_count + 1;
          where_spec = where_spec + "selected.T::s(i:o_attr.Name) == ?";
          if ( oida_count < num_ident_attr )
            where_spec = where_spec + " AND ";
          else
            where_spec = where_spec + ")";
          end if;
        end if;
        //
        select one te_attr related by te_attr->TE_ATTR[R2087.''succeeds''];
      end while;
      //
      // Object ${te_class.Name} (${te_class.Key_Lett}) Identifier *${key_number}
      create object instance te_swc of TE_SWC;
      relate te_swc to te_class across R2001;
      te_swc.Obj_Kl = te_class.Key_Lett;
      te_swc.Where_Spec = where_spec;
      te_swc.Key = where_key;
      te_swc.Ret_Val = false;
      te_swc.Built_In = true;
      te_swc.Oid_ID = o_id.Oid_ID;
      //
      if ( num_ident_attr > 1 )
        // *** Provide a key parenthesized at outer and inner constructs.
        where_spec = "(";
        unique_num = unique_num + 1;
        where_key = ( ( te_class.Key_Lett + T::s(i:key_number) ) + ( "_mcw" + T::s(i:unique_num) ) );
        te_attr = first_te_attr;
        oida_count = 0;
        while ( not_empty te_attr )
          select one o_attr related by te_attr->O_ATTR[R2033];
          if ( te_attr.Included )
            oida_count = oida_count + 1;
            where_spec = where_spec + "(selected.T::s(i:o_attr.Name) == ?)";
            if ( oida_count < num_ident_attr )
              where_spec = where_spec + " AND ";
            else
              where_spec = where_spec + ")";
            end if;
          end if;
          //
          select one te_attr related by te_attr->TE_ATTR[R2087.''succeeds''];
        end while;
        //
        // Object ${te_class.Name} (${te_class.Key_Lett}) Identifier *${key_number}
        create object instance te_swc of TE_SWC;
        relate te_swc to te_class across R2001;
        te_swc.Obj_Kl = te_class.Key_Lett;
        te_swc.Where_Spec = where_spec;
        te_swc.Key = where_key;
        te_swc.Ret_Val = false;
        te_swc.Built_In = true;
        te_swc.Oid_ID = o_id.Oid_ID;
        // *** Provide a key parenthesized at just inner constructs.
        where_spec = "";
        unique_num = unique_num + 1;
        where_key = ( ( te_class.Key_Lett + T::s(i:key_number) ) + ( "_mcw" + T::s(i:unique_num) ) );
        te_attr = first_te_attr;
        oida_count = 0;
        while ( not_empty te_attr )
          select one o_attr related by te_attr->O_ATTR[R2033];
          if ( te_attr.Included )
            oida_count = oida_count + 1;
            where_spec = where_spec + "(selected.T::s(i:o_attr.Name) == ?)";
            if ( oida_count < num_ident_attr )
              where_spec = where_spec + " AND ";
            end if;
          end if;
          //
          select one te_attr related by te_attr->TE_ATTR[R2087.''succeeds''];
        end while;
        //
        // Object ${te_class.Name} (${te_class.Key_Lett}) Identifier *${key_number}
        create object instance te_swc of TE_SWC;
        relate te_swc to te_class across R2001;
        te_swc.Obj_Kl = te_class.Key_Lett;
        te_swc.Where_Spec = where_spec;
        te_swc.Key = where_key;
        te_swc.Ret_Val = false;
        te_swc.Built_In = true;
        te_swc.Oid_ID = o_id.Oid_ID;
        //
      end if;
    end if;
  end for;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("12f8b388-c2cb-4e89-a7be-3ed856caf128",
	"279af1e8-e98f-4837-9fd7-a0b5df14f861",
	'te_sys',
	"195cd118-2bf6-483c-9efd-4ec7a5cd069a",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("195cd118-2bf6-483c-9efd-4ec7a5cd069a",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Extended System>',
	'',
	'',
	'../Translation Extensions/Translation Extensions.xtuml');
INSERT INTO PE_PE
	VALUES ("279af1e8-e98f-4837-9fd7-a0b5df14f861",
	1,
	"e0e8a924-f549-4e50-9ee0-af61843ab967",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO PE_PE
	VALUES ("e0e8a924-f549-4e50-9ee0-af61843ab967",
	2,
	"efb614c1-5af5-40ee-92c8-706430a99db3",
	"00000000-0000-0000-0000-000000000000",
	7);
INSERT INTO EP_PKG_PROXY
	VALUES ("efb614c1-5af5-40ee-92c8-706430a99db3",
	"00000000-0000-0000-0000-000000000000",
	"d9bc5487-4193-4817-be1c-6c3f3339aebf",
	'ooaofooa',
	'========================================================================

File:          $RCSfile: ooaofooa.xtuml,v $
Version:   $Revision: 1.127 $
Modified:  $Date: 2006/09/26 15:10:20 $

(c) Copyright 2004-2012 by Mentor Graphics Corp. All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Mentor Graphics Corp. and is not for external distribution.
========================================================================

This is the application domain for the Tiger project.

The processing in this model describes the activities
for model capture.



',
	0,
	'../ooaofooa.xtuml');
INSERT INTO S_SYS_PROXY
	VALUES ("d9bc5487-4193-4817-be1c-6c3f3339aebf",
	'com.mentor.nucleus.bp.core',
	1,
	'../../../../com.mentor.nucleus.bp.core.xtuml');
